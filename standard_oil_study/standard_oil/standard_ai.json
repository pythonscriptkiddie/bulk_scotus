"United States Court of Appeals \nfor the Federal Circuit \n\n \n\n \n\n \n\n \n\n______________________ \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n \nORACLE AMERICA, INC., \nPlaintiff-Appellant, \n \nv. \n \nGOOGLE INC., \nDefendant-Cross-Appellant. \n______________________ \n \n2013-1021, -1022 \n______________________ \n \n\n______________________ \n \nDecided: May 9, 2014  \n______________________ \n\nAppeals from the United States District Court for the \nNorthern  District  of California  in  No.  10-CV-3561, Judge \nWilliam H. Alsup. \n\n \nE.  JOSHUA  ROSENKRANZ,  Orrick,  Herrington  &  Sut-\ncliffe  LLP,  of  New  York,  New  York,  argued  for  plaintiff-\nappellant.    With  him  on  the  brief  were  MARK  S.  DAVIES, \nANDREW D. SILVERMAN, KELLY M. DALEY; and ANNETTE L. \nHURST, GABRIEL M. RAMSEY, and ELIZABETH C. MCBRIDE, \nof San Francisco, California.  Of counsel on the brief were \nDORIAN  E.  DALEY,  DEBORAH  K.  MILLER,  MATTHEW \nSARBORARIA,  and  ANDREW  C.  TEMKIN,  Oracle  America, \nInc.,  of  Redwood  Shores,  California;  and  DALE  M. \nCENDALI,  DIANA  M.  TORRES,  SEAN  B.  FERNANDES,  and \nJOSHUA L. SIMMONS, Kirkland & Ellis LLP, of New York, \nNew York.  Of counsel were SUSAN M. DAVIES, Kirkland & \n\n\f2 \n\n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nEllis  LLP,  of  New  York,  New  York;  MICHAEL  A.  JACOBS, \nMorrison  &  Foerster  LLP,  of  San  Francisco,  California; \nand KENNETH A. KUWAYTI, of Palo Alto, California.   \n\n \nROBERT A. VAN NEST, Keker & Van Nest LLP, of San \nFrancisco,  California,  argued \nfor  defendant-cross-\nappellant.    With  him  on  the  brief  were  CHRISTA  M. \nANDERSON,  STEVEN  A.  HIRSCH,  MICHAEL  S.  KWUN,  and \nDANIEL  E.  JACKSON.    Of  counsel  on  the  brief  were  IAN  C. \nBALLON  and  HEATHER  MEEKER,  Greenberg  Traurig, LLP, \nof East Palo Alto, California; RENNY HWANG, Google Inc., \nof Mountain View, California; and DARYL L. JOSEFFER and \nBRUCE  W.  BABER,  King  &  Spalding  LLP,  of  Washington, \nDC.   \n\n \nMARCIA B. PAUL, Davis Wright Tremaine LLP, of New \nYork,  New  York,  for  amicus  curiae  Ralph  Oman.    With \nher  on  the  brief  were  LACY  H.  KOONCE,  III  and  DEBORAH \nA. ADLER.   \n\n \nWILLIAM  A.  RUDY,  Lathrop  &  Gage  LLP,  of  Kansas \nCity, Missouri, for amici curiae Picture Archive Council of \nAmerica,  Inc.,  et  al.   With  him  on  the  brief  were  CAROLE \nE.  HANDLER  and  BRIANNA  E.  DAHLBERG,  of  Los  Angeles, \nCalifornia.   \n\n \nGREGORY  G.  GARRE,  Latham  &  Watkins,  LLP,  of \nWashington,  DC,  for  amici  curiae  Microsoft  Corporation, \net al.  With him on the brief was LORI ALVINO MCGILL.  Of \ncounsel  on  the  brief  were  PAUL  T.  DACIER,  KRISHNENDU \nGUPTA,  EMC  Corporation,  of  Hopkinton,  Massachusetts; \nand  DOUGLAS  LUFTMAN,  NETAPP,  Inc.,  of  Sunnyvale, \nCalifornia.   \n\n \nJARED  BOBROW,  Weil,  Gotshal  &  Manges  LLP,  of \nRedwood  Shores,  California,  for  amici  curiae  Eugene  H. \nSpafford, Ph.D., et al.  With him on the brief was AARON \nY. HUANG.   \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n3 \n\n \nMATTHEW S. HELLMAN, Jenner & Block LLP, of Wash-\n\nington, DC, for amicus curiae BSA/The Software Alliance.  \nWith him on the brief was PAUL M. SMITH.   \n\n \nSTEVEN  T.  COTTREAU,  Clifford  Chance  US  LLP,  of \n\nWashington, DC, for amici curiae, Scott McNealy, et al.   \n\n \nMEREDITH  JACOB,  Program  on  Information  Justice \nand Intellectual Property, American University, Washing-\nton  College  of  Law,  of  Washington,  DC,  for  amici  curiae \nIntellectual Property Law Professors.  \n\n \nJULIE  P.  SAMUELS,  Electronic  Frontier  Foundation,  of \nSan  Francisco,  California,  for  amici  curiae  Computer \nScientists.  With her on the brief was MICHAEL BARCLAY.  \nOf  counsel  on  the  brief  was  JASON  M.  SCHULTZ,  NYU \nTechnology Law and Policy Clinic, NYU School of Law, of \nNew York, New York.   \n\n \nJONATHAN  BAND,  Jonathan  Band  PLLC,  of  Washing-\nton, DC, filed a brief for amicus curiae Computer & Com-\nmunications Industry Association.  With him on the brief \nwas  MATTHEW  SCHRUERS,  Computer  &  Communications \nIndustry Association, of Washington, DC.   \n\n \nCHAD RUBACK, The Ruback Law Firm, of Dallas, Tex-\nas, filed a brief for amici curiae Rackspace US, Inc., et al.  \n\n \nJENNIFER M. URBAN, Samuelson Law, Technology and \nPublic  Policy  Clinic,  U.C.  Berkeley  School  of  Law,  of \nBerkeley, California for amici curiae Software Innovators, \net al.   \n\n______________________ \n \nBefore O\u2019MALLEY, PLAGER, and TARANTO, Circuit Judges. \n\n\f4 \n\n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nO\u2019MALLEY, Circuit Judge. \n\nThis  copyright  dispute  involves  37  packages  of  com-\nputer  source  code.    The  parties  have  often  referred  to \nthese groups of computer programs, individually or collec-\ntively,  as  \u201capplication  programming  interfaces,\u201d  or  API \npackages,  but  it  is  their  content,  not  their  name,  that \nmatters.    The  predecessor  of  Oracle  America,  Inc.  (\u201cOra-\ncle\u201d)  wrote  these  and  other  API  packages  in  the  Java \nprogramming  language,  and  Oracle  licenses  them  on \nvarious  terms  for  others  to  use.    Many  software  develop-\ners  use  the  Java  language,  as  well  as  Oracle\u2019s  API  pack-\nages,  to  write  applications  (commonly  referred  to  as \n\u201capps\u201d) \nlaptop  computers,  tablets, \nsmartphones, and other devices.   \n\nfor  desktop  and \n\nOracle  filed  suit  against  Google  Inc.  (\u201cGoogle\u201d)  in  the \nUnited  States  District  Court  for  the  Northern  District  of \nCalifornia,  alleging  that  Google\u2019s  Android  mobile  operat-\ning system infringed Oracle\u2019s patents and copyrights.  The \njury found no patent infringement, and the patent claims \nare not at issue in this appeal.  As to the copyright claims, \nthe  parties  agreed  that  the  jury  would  decide  infringe-\nment, fair use, and whether any copying was de minimis, \nwhile the district judge would decide copyrightability and \nGoogle\u2019s  equitable  defenses.    The  jury  found  that  Google \ninfringed Oracle\u2019s copyrights in the 37 Java packages and \na  specific  computer  routine  called  \u201crangeCheck,\u201d  but \nreturned a noninfringement verdict as to eight decompiled \nsecurity  files.    The  jury  deadlocked  on  Google\u2019s  fair  use \ndefense.   \n\nAfter  the  jury  verdict,  the  district  court  denied  Ora-\ncle\u2019s  motion  for  judgment  as  a  matter  of  law  (\u201cJMOL\u201d) \nregarding  fair  use  as  well  as  Google\u2019s  motion  for  JMOL \nwith  respect  to  the  rangeCheck  files.    Order  on  Motions \nfor  Judgment  as  a  Matter  of  Law,  Oracle  Am.,  Inc.  v. \nGoogle  Inc.,  No.  3:10-cv-3561  (N.D.  Cal.  May  10,  2012), \nECF  No.  1119.    Oracle  also  moved  for  JMOL  of  infringe-\n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n5 \n\nment  with  respect  to  the  eight  decompiled  security  files.  \nIn  granting  that  motion,  the  court  found  that:  (1)  Google \nadmitted to copying the eight files; and (2) no reasonable \njury  could  find  that  the  copying  was  de  minimis.    Oracle \nAm.,  Inc.  v.  Google  Inc.,  No.  C  10-3561,  2012  U.S.  Dist. \nLEXIS  66417  (N.D.  Cal.  May  11,  2012)  (\u201cOrder  Granting \nJMOL on Decompiled Files\u201d).  \n\nShortly  thereafter,  the  district  court  issued  its  deci-\nsion  on  copyrightability,  finding  that  the  replicated  ele-\nments  of  the  37  API  packages\u2014including  the  declaring \ncode and the structure, sequence, and organization\u2014were \nnot  subject  to  copyright  protection.    Oracle  Am.,  Inc.  v. \nGoogle Inc., 872 F. Supp. 2d 974 (N.D. Cal. 2012) (\u201cCopy-\nrightability  Decision\u201d).    Accordingly,  the  district  court \nentered  final  judgment  in  favor  of  Google  on  Oracle\u2019s \ncopyright infringement claims, except with respect to the \nrangeCheck  code  and  the  eight  decompiled  files.    Final \nJudgment,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-\n3561  (N.D.  Cal.  June  20,  2012),  ECF  No.  1211.    Oracle \nappeals  from  the  portion  of  the  final  judgment  entered \nagainst  it,  and  Google  cross-appeals  from  the  portion  of \nthat  same  judgment  entered  in  favor  of  Oracle  as  to  the \nrangeCheck code and eight decompiled files.   \n\nBecause  we  conclude  that  the  declaring  code  and  the \nstructure, sequence, and organization of the API packages \nare entitled to copyright protection, we reverse the district \ncourt\u2019s copyrightability determination with instructions to \nreinstate the jury\u2019s infringement finding as to the 37 Java \npackages.    Because  the  jury  deadlocked  on  fair  use,  we \nremand  for  further  consideration  of  Google\u2019s  fair  use \ndefense in light of this decision.  With respect to Google\u2019s \ncross-appeal,  we  affirm  the  district  court\u2019s  decisions: \n(1) granting  Oracle\u2019s  motion  for  JMOL  as  to  the  eight \ndecompiled  Java  files  that  Google  copied  into  Android; \nand (2) denying Google\u2019s motion for JMOL with respect to \nthe rangeCheck function.  Accordingly, we affirm-in-part, \nreverse-in-part, and remand for further proceedings.  \n\n\f6 \n\n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nBACKGROUND \n\nA.  The Technology  \n\nSun  Microsystems,  Inc.  (\u201cSun\u201d)  developed  the  Java \n\u201cplatform\u201d  for  computer  programming  and  released  it  in \n1996.1    The  aim  was  to  relieve  programmers  from  the \nburden  of  writing  different  versions  of  their  computer \nprograms for different operating systems or devices.  \u201cThe \nJava  platform,  through  the  use  of  a  virtual  machine, \nenable[d]  software  developers  to  write  programs  that \n[we]re  able  to  run  on  different  types  of  computer  hard-\nware  without  having  to  rewrite  them  for  each  different \ntype.\u201d  Copyrightability Decision, 872 F. Supp. 2d at 977.  \nWith Java, a software programmer could \u201cwrite once, run \nanywhere.\u201d   \n\nThe Java virtual machine (\u201cJVM\u201d) plays a central role \nin  the  overall  Java  platform.    The  Java  programming \nlanguage  itself\u2014which  includes  words,  symbols,  and \nother  units,  together  with  syntax  rules  for  using  them  to \ncreate  instructions\u2014is  the  language  in  which  a  Java \nprogrammer writes source code, the version of a program \nthat  is  \u201cin  a  human-readable  language.\u201d    Id.    For  the \ninstructions  to  be  executed,  they  must  be  converted  (or \ncompiled)  into  binary  machine  code  (object  code)  consist-\ning of 0s and 1s understandable by the particular compu-\nting  device.    In  the  Java  system,  \u201csource  code  is  first \nconverted  into  \u2018bytecode,\u2019  an  intermediate  form,  before  it \nis  then  converted  into  binary  machine  code  by  the  Java \nvirtual  machine\u201d  that  has  been  designed  for  that  device.  \nId.  The Java platform includes the \u201cJava development kit \n(JDK),  javac  compiler,  tools  and  utilities,  runtime  pro-\ngrams, class libraries (API packages), and the Java virtu-\nal machine.\u201d  Id. at 977 n.2.    \n\n                                            \n\n1   Oracle acquired Sun in 2010. \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n7 \n\nSun wrote a number of ready-to-use Java programs to \nperform common computer functions and organized those \nprograms into groups it called \u201cpackages.\u201d  These packag-\nes,  which  are  the  application  programming  interfaces  at \nissue  in  this  appeal,  allow  programmers  to  use  the  pre-\nwritten  code  to  build  certain  functions  into  their  own \nprograms,  rather  than  write  their  own  code  to  perform \nthose  functions  from  scratch.    They  are  shortcuts.    Sun \ncalled the code for a specific operation (function) a \u201cmeth-\nod.\u201d    It  defined  \u201cclasses\u201d  so  that  each  class  consists  of \nspecified  methods  plus  variables  and  other  elements  on \nwhich  the  methods  operate.    To  organize  the  classes  for \nusers, then, it grouped classes (along with certain related \n\u201cinterfaces\u201d)  into  \u201cpackages.\u201d    See  id.  at  982  (describing \norganization: \u201c[e]ach package [i]s broken into classes and \nthose  in  turn  [are]  broken  into  methods\u201d).    The  parties \nhave  not  disputed  the  district  court\u2019s  analogy:  Oracle\u2019s \ncollection  of  API  packages  is  like  a  library,  each  package \nis like a bookshelf in the library, each class is like a book \non the shelf, and each method is like a how-to chapter in a \nbook.  Id. at 977.  \n\nThe  original  Java  Standard  Edition  Platform  (\u201cJava \nSE\u201d)  included  \u201ceight  packages  of  pre-written  programs.\u201d  \nId.  at  982.  The  district  court  found,  and  Oracle  concedes \nto  some  extent,  that  three  of  those  packages\u2014java.lang, \njava.io, and java.util\u2014were \u201ccore\u201d packages, meaning that \nprogrammers  using  the  Java  language  had  to  use  them \n\u201cin  order  to  make  any  worthwhile  use  of  the  language.\u201d  \nId.    By  2008,  the  Java  platform  had  more  than  6,000 \nmethods  making  up  more  than  600  classes  grouped  into \n166  API  packages.    There  are  37  Java  API  packages  at \nissue in this appeal, three of which are the core packages \nidentified  by  the  district  court.2    These  packages  contain \n\n                                            \n\n2   The  37  API  packages  involved  in  this  appeal  are: \nja-\n\njava.beans, \n\njava.lang, \n\njava.io, \n\njava.awt.font, \n\n\f8 \n\n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nthousands  of  individual  elements,  including  classes, \nsubclasses, methods, and interfaces.   \n\ncall \n\ncode; \n\n(1) declaring \n\nthe  parties \n\nEvery  package  consists  of  two  types  of  source  code\u2014\nand \nwhat \n(2) implementing  code.    Declaring  code  is  the  expression \nthat  identifies  the  prewritten  function  and  is  sometimes \nreferred  to  as  the  \u201cdeclaration\u201d  or  \u201cheader.\u201d    As  the  dis-\ntrict  court  explained,  the  \u201cmain  point  is  that  this  header \nline of code introduces the method body and specifies very \nprecisely the inputs, name and other functionality.\u201d  Id. at \n979-80.    The  expressions  used  by  the  programmer  from \nthe  declaring  code  command the  computer  to  execute  the \nassociated  implementing  code,  which  gives  the  computer \nthe step-by-step instructions for carrying out the declared \nfunction.   \n\nTo  use  the  district  court\u2019s  example,  one  of  the  Java \nAPI packages at issue is \u201cjava.lang.\u201d  Within that package \nis  a  class  called  \u201cmath,\u201d  and  within  \u201cmath\u201d  there  are \nseveral methods, including one that is designed to find the \nlarger  of  two  numbers:  \u201cmax.\u201d    The  declaration  for  the \n\u201cmax\u201d method, as defined for integers, is: \u201cpublic static int \nmax(int x, int y),\u201d where the word \u201cpublic\u201d means that the \nmethod  is  generally  accessible,  \u201cstatic\u201d  means  that  no \n\n                                                                                                  \n\njava.sql, \n\njava.security, \n\njava.lang.reflect, \n\nva.lang.annotation, \nja-\njava.lang.ref, \nva.net,  java.nio,  java.nio.channels,  java.nio.channels.spi, \nja-\njava.nio.charset.spi, \njava.nio.charset, \nva.security.acl,  java.security.cert,  java.security.interfaces, \nja-\njava.security.spec, \nva.util.jar, \nja-\njavax.crypto, \nva.util.regex, \njavax.net, \njavax.crypto.interfaces, \njavax.net.ssl, \nja-\njavax.security.auth.login, \nvax.security.auth.callback, \njavax.security.auth.x500, \nja-\nvax.sql.   \n\njavax.crypto.spec, \njavax.security.auth, \n\njavax.security.cert,  and \n\njava.util.logging, \n\njava.util.prefs, \n\njava.util.zip, \n\njava.text, \n\njava.util, \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n9 \n\nspecific instance of the class is needed to call the method, \nthe  first  \u201cint\u201d  indicates  that  the  method  returns  an  inte-\nger,  and  \u201cint  x\u201d  and  \u201cint  y\u201d  are  the  two  numbers  (inputs) \nbeing  compared.    Copyrightability  Decision,  872  F.  Supp. \n2d  at  980-82.    A  programmer  calls  the  \u201cmax\u201d  method  by \ntyping  the  name  of  the  method  stated  in  the  declaring \ncode and providing unique inputs for the variables \u201cx\u201d and \n\u201cy.\u201d    The  expressions  used  command  the  computer  to \nexecute the implementing code that carries out the opera-\ntion of returning the larger number. \n\nAlthough  Oracle  owns  the  copyright  on  Java  SE  and \nthe API packages, it offers three different licenses to those \nwho  want  to  make  use  of  them.    The  first  is  the  General \nPublic  License,  which  is  free  of  charge  and  provides  that \nthe licensee can use the packages\u2014both the declaring and \nimplementing  code\u2014but  must  \u201ccontribute  back\u201d  its  inno-\nvations to the public.  This arrangement is referred to as \nan \u201copen source\u201d license.  The second option is the Specifi-\ncation  License,  which  provides  that  the  licensee  can  use \nthe declaring code and organization of Oracle\u2019s API pack-\nages  but  must  write  its  own  implementing  code.    The \nthird  option  is  the  Commercial  License,  which  is  for \nbusinesses that \u201cwant to use and customize the full Java \ncode  in  their  commercial  products  and  keep  their  code \nsecret.\u201d    Appellant  Br.  14.    Oracle  offers  the  Commercial \nLicense  in  exchange  for  royalties.    To  maintain  Java\u2019s \n\u201cwrite  once,  run  anywhere\u201d  motto,  the  Specification  and \nCommercial Licenses require that the licensees\u2019 programs \npass  certain  tests  to  ensure  compatibility  with  the  Java \nplatform.   \n\nThe  testimony  at  trial  also  revealed  that  Sun  was  li-\ncensing  a  derivative  version  of  the  Java  platform  for  use \non  mobile  devices:  the  Java  Micro  Edition  (\u201cJava  ME\u201d).    \nOracle  licensed  Java  ME  for  use  on  feature  phones  and \nsmartphones.    Sun/Oracle  has  never  successfully  devel-\noped its own smartphone platform using Java.  \n\n\f10 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nB.  Google\u2019s Accused Product: Android  \n\nThe  accused  product  is  Android,  a  software  platform \nthat  was  designed  for  mobile  devices  and  competes  with \nJava  in  that  market.    Google  acquired  Android,  Inc.  in \n2005 as part of a plan to develop a smartphone platform.  \nLater  that  same  year,  Google  and  Sun  began  discussing \nthe  possibility  of  Google  \u201ctaking  a  license  to  use  and  to \nadapt the entire Java platform for mobile devices.\u201d  Copy-\nrightability  Decision,  872  F.  Supp.  2d  at  978.    They  also \ndiscussed  a  \u201cpossible  co-development  partnership  deal \nwith  Sun  under  which  Java  technology  would  become  an \nopen-source  part  of  the  Android  platform,  adapted  for \nmobile  devices.\u201d    Id.    The  parties  negotiated  for  months \nbut  were  unable  to  reach  an  agreement.    The  point  of \ncontention  between  the  parties  was  Google\u2019s  refusal  to \nmake the implementation of its programs compatible with \nthe Java virtual machine or interoperable with other Java \nprograms.    Because  Sun/Oracle  found  that  position  to  be \nanathema  to  the  \u201cwrite  once,  run  anywhere\u201d  philosophy, \nit  did  not  grant  Google  a  license  to  use  the  Java  API \npackages.   \n\nWhen  the  parties\u2019  negotiations  reached  an  impasse, \nGoogle decided to use the Java programming language to \ndesign  its  own  virtual  machine\u2014the  Dalvik  virtual  ma-\nchine  (\u201cDalvik  VM\u201d)\u2014and  \u201cto  write  its  own  implementa-\ntions  for  the  functions  in  the  Java  API  that  were  key  to \nmobile  devices.\u201d    Id.    Google  developed  the  Android  plat-\nform,  which  grew  to  include  168  API  packages\u201437  of \nwhich  correspond  to  the  Java  API  packages  at  issue  in \nthis appeal.   \n\nWith  respect  to  the  37  packages  at  issue, \u201cGoogle be-\nlieved  Java  application  programmers  would  want  to  find \nthe  same  37  sets  of  functionalities  in  the  new  Android \nsystem callable by the same names as used in Java.\u201d  Id.  \nTo achieve this result, Google copied the declaring source \ncode  from  the  37  Java  API  packages  verbatim,  inserting \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n11 \n\nthat code into parts of its Android software.  In doing so, \nGoogle  copied  the  elaborately  organized  taxonomy  of  all \nthe names of methods, classes, interfaces, and packages\u2014\nthe  \u201coverall  system  of  organized  names\u2014covering  37 \npackages,  with  over  six  hundred  classes,  with  over  six \nthousand  methods.\u201d    Copyrightability  Decision,  872  F. \nSupp. 2d at 999.   The parties and district court  referred \nto  this  taxonomy  of  expressions  as  the  \u201cstructure,  se-\nquence, and organization\u201d or \u201cSSO\u201d of the 37 packages.  It \nis undisputed, however, that Google wrote its own imple-\nmenting  code,  except  with  respect  to:  (1)  the  rangeCheck \nfunction,  which  consisted  of  nine  lines  of  code;  and \n(2) eight decompiled security files.   \n\nAs to rangeCheck, the court found that the Sun engi-\nneer who wrote it later worked for Google and contributed \ntwo files he created containing the rangeCheck function\u2014\n\u201cTimsort.java\u201d and \u201cComparableTimsort\u201d\u2014to the Android \nplatform.   In  doing  so,  the  nine-line  rangeCheck  function \nwas  copied  directly  into  Android.    As  to  the  eight  decom-\npiled  files,  the  district  court  found  that  they  were  copied \nand  used  as  test  files  but  \u201cnever  found  their  way  into \nAndroid or any handset.\u201d  Id. at 983. \n\nGoogle released the Android platform in 2007, and the \nfirst  Android  phones  went  on  sale  the  following  year.  \nAlthough  it  is  undisputed  that  certain  Android  software \ncontains  copies  of  the  37  API  packages\u2019  declaring  code  at \nissue,  neither  the  district  court  nor  the  parties  specify  in \nwhich programs those copies appear.  Oracle indicated at \noral  argument,  however,  that  all  Android  phones contain \ncopies  of  the  accused  portions  of  the  Android  software.  \nOral  Argument  at  1:35,  available  at  http://www. \ncafc.uscourts.gov/oral-argument-recordings/2013-1021/all. \nAndroid  smartphones  \u201crapidly  grew  in  popularity  and \nnow comprise a large share of the United States market.\u201d  \nCopyrightability Decision, 872 F. Supp. 2d at 978.  Google \nfree  of  charge  to \nprovides  the  Android  platform \nsmartphone  manufacturers  and  receives  revenue  when \n\n\f12 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\ncustomers use particular functions on the Android phone.  \nAlthough  Android  uses  the  Java  programming  language, \nit  is  undisputed  that  Android  is  not  generally  Java  com-\npatible.    As  Oracle  explains,  \u201cGoogle  ultimately  designed \nAndroid  to  be  incompatible  with  the  Java  platform,  so \nthat  apps  written  for  one  will  not  work  on  the  other.\u201d  \nAppellant Br. 29.  \n\nC.  Trial and Post-Trial Rulings \n\nBeginning on April 16, 2012, the district court and the \njury\u2014on  parallel  tracks\u2014viewed  documents  and  heard \ntestimony from twenty-four witnesses on copyrightability, \ninfringement,  fair  use,  and  Google\u2019s  other  defenses.  \nBecause the parties agreed the district court would decide \ncopyrightability,  the  court  instructed  the  jury  to  assume \nthat  the  structure,  sequence,  and  organization  of  the  37 \nAPI packages was copyrightable.  And, the court informed \nthe jury that Google conceded that it copied the declaring \ncode  used  in  the  37  packages  verbatim.    The  court  also \ninstructed  the  jury  that  Google  conceded  copying  the \nrangeCheck  function  and  the  eight  decompiled  security \nfiles,  but  that  Google  maintained  that  its  use  of  those \nlines  of  code  was  de  minimis.    See  Final  Charge  to  the \nJury (Phase One), Oracle Am., Inc. v. Google Inc., 3:10-cv-\n3561 (N.D. Cal. Apr. 30, 2012), ECF No. 1018 at 14 (\u201cWith \nissues  concerning  the \nrespect  to  the \nrangeCheck  and  other  similar  files,  Google  agrees  that \nthe  accused  lines  of  code  and  comments  came  from  the \ncopyrighted  material  but  contends  that  the  amounts \ninvolved were  so  negligible as  to  be  de  minimis  and  thus \nshould be excused.\u201d).   \n\ninfringement \n\nOn  May  7,  2012,  the  jury  returned  a  verdict  finding \nthat  Google  infringed  Oracle\u2019s  copyright  in  the  37  Java \nAPI  packages  and  in  the  nine  lines  of  rangeCheck  code, \nbut  returned  a  noninfringement  verdict  as  to  eight  de-\ncompiled security files.  The jury hung on Google\u2019s fair use \ndefense.   \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n13 \n\nThe parties filed a number of post-trial motions, most \nof  which  were  ultimately  denied.    In  relevant  part,  the \ndistrict court denied Oracle\u2019s motion for JMOL regarding \nfair  use  and  Google\u2019s  motion  for  JMOL  as  to  the \nrangeCheck  files.    Order  on  Motions  for  Judgment  as  a \nMatter  of  Law,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-\ncv-3561  (N.D.  Cal.  May  10,  2012),  ECF  No.  1119.    The \ndistrict  court  granted  Oracle\u2019s  motion  for  JMOL  of  in-\nfringement  as  to  the  eight  decompiled  files,  however.    In \nits  order,  the  court  explained  that:  (1)  Google  copied  the \nfiles in their entirety; (2) the trial testimony revealed that \nthe use of those files was \u201csignificant\u201d; and (3) no reason-\nable jury could find the copying de minimis.  Order Grant-\ning  JMOL  on  Decompiled  Files,  2012  U.S.  Dist.  LEXIS \n66417, at *6.   \n\nOn May 31, 2012, the district court issued the prima-\nry decision at issue in this appeal, finding that the repli-\ncated  elements  of  the  Java  API  packages\u2014including  the \ndeclarations and their structure, sequence, and organiza-\ntion\u2014were  not  copyrightable.      As  to  the  declaring  code, \nthe  court  concluded  that  \u201cthere  is  only  one  way  to  write\u201d \nit, and thus the \u201cmerger doctrine bars anyone from claim-\ning  exclusive  copyright  ownership  of  that  expression.\u201d  \nCopyrightability  Decision,  872  F.  Supp.  2d  at  998.    The \ncourt  further  found  that  the  declaring  code  was  not  pro-\ntectable  because  \u201cnames  and  short  phrases  cannot  be \ncopyrighted.\u201d    Id.    As  such,  the  court  determined  that \n\u201cthere can be no copyright violation in using the identical \ndeclarations.\u201d  Id.   \n\nAs  to  the  overall  structure,  sequence,  and  organiza-\ntion  of  the  Java  API  packages,  the  court  recognized  that \n\u201cnothing  in  the  rules  of  the  Java  language  .  .  .  required \nthat  Google  replicate  the  same  groupings  even  if  Google \nwas  free  to  replicate  the  same  functionality.\u201d    Id.  at  999.  \nTherefore,  the  court determined  that  \u201cOracle\u2019s  best  argu-\nment  .  .  .  is  that  while  no  single  name  is  copyrightable, \nJava\u2019s  overall  system  of  organized  names\u2014covering  37 \n\n\f14 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\npackages,  with  over  six  hundred  classes,  with  over  six \nthousand  methods\u2014is  a  \u2018taxonomy\u2019  and,  therefore,  copy-\nrightable.\u201d  Id. \n\nAlthough it acknowledged that the overall structure of \nOracle\u2019s  API  packages  is  creative,  original,  and  \u201cresem-\nbles  a  taxonomy,\u201d  the  district  court  found  that  it  \u201cis \nnevertheless a command structure, a system or method of \noperation\u2014a  long  hierarchy  of  over  six  thousand  com-\nmands  to  carry  out  pre-assigned  functions\u201d\u2014that  is  not \nentitled  to  copyright  protection  under  Section  102(b)  of \nthe  Copyright  Act.    Id.  at  999-1000.    In  reaching  this \nconclusion,  the  court  emphasized  that,  \u201c[o]f  the  166  Java \npackages, 129 were not violated in any way.\u201d  Id. at 1001.  \nAnd, of the 37 Java API packages at issue, \u201c97 percent of \nthe Android lines were new from Google and the remain-\ning three percent were freely replicable under the merger \nand  names  doctrines.\u201d    Id.    On  these  grounds,  the  court \ndismissed  Oracle\u2019s  copyright  claims,  concluding  that  \u201cthe \nparticular elements replicated by Google were free for all \nto use under the Copyright Act.\u201d  Id.   \n\nOn  June  20,  2012,  the  district  court  entered  final \njudgment  in  favor  of  Google  and  against  Oracle  on  its \nclaim  for  copyright  infringement,  except  with  respect  to \nthe  rangeCheck  function  and  the  eight  decompiled  files.  \nAs  to  rangeCheck  and  the  decompiled  files,  the  court \nentered  judgment  for  Oracle  and  against  Google  in  the \namount of zero dollars, per the parties\u2019 stipulation.  Final \nJudgment,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-\n3561  (N.D.  Cal.  June  20,  2012),  ECF  No.  1211.    Oracle \ntimely  appealed  from  the  portion  of  the  district  court\u2019s \nfinal judgment entered against it and Google timely cross-\nappealed  with  respect  to  rangeCheck  and  the  eight  de-\ncompiled  files.    Because  this  action  included  patent \nclaims,  we  have  jurisdiction  pursuant  to  28  U.S.C. \n\u00a7 1295(a)(1).   \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n15 \n\nDISCUSSION \n\nI.  ORACLE\u2019S APPEAL  \n\nIt is undisputed that the Java programming language \nis open and free for anyone to use.  Except to the limited \nextent noted below regarding three of the API packages, it \nis also undisputed that Google could have written its own \nAPI packages using the Java language.  Google chose not \nto  do  that.    Instead,  it  is  undisputed  that  Google  copied \n7,000 lines of declaring code and generally replicated the \noverall  structure,  sequence,  and  organization  of  Oracle\u2019s \n37 Java API packages.  The central question before us is \nwhether these elements of the Java platform are entitled \nto copyright protection.  The district court concluded that \nthey are not, and Oracle challenges that determination on \nappeal.    Oracle  also  argues  that  the  district  court  should \nhave  dismissed  Google\u2019s  fair  use  defense  as  a  matter  of \nlaw.   \n\nAccording  to  Google,  however,  the  district  court  cor-\nrectly  determined  that:  (1) there  was  only  one  way  to \nwrite  the Java  method  declarations  and  remain  \u201cinterop-\nerable\u201d with Java; and (2) the organization and structure \nof  the  37  Java  API  packages  is  a  \u201ccommand  structure\u201d \nexcluded  from  copyright  protection  under  Section 102(b).  \nGoogle  also  argues  that,  if  we  reverse  the  district  court\u2019s \ncopyrightability  determination,  we  should  direct  the \ndistrict court to retry its fair use defense.  \n\n\u201cWhen the questions on appeal involve law and prece-\ndent  on  subjects  not  exclusively  assigned  to  the  Federal \nCircuit, the court applies the law which would be applied \nby the regional circuit.\u201d Atari Games Corp. v. Nintendo of \nAm., Inc., 897 F.2d 1572, 1575 (Fed. Cir. 1990).  Copyright \nissues are not exclusively assigned to the Federal Circuit.  \nSee  28  U.S.C.  \u00a7 1295.    The  parties  agree  that  Ninth  Cir-\ncuit  law  applies  and  that,  in  the  Ninth  Circuit,  whether \nparticular  expression  is  protected  by  copyright  law  is \n\n\f16 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\n\u201csubject  to  de  novo  review.\u201d    Ets-Hokin  v.  Skyy  Spirits, \nInc., 225 F.3d 1068, 1073 (9th Cir. 2000).3     \n\n                                            \n\n3   The  Supreme  Court  has  not  addressed  whether \ncopyrightability  is  a  pure  question  of  law  or  a  mixed \nquestion  of  law  and  fact,  or  whether,  if  it  is  a  mixed \nquestion  of  law  and  fact,  the  factual  components  of  that \ninquiry are for the court, rather than the jury.  Relatedly, \nit  has  not  decided  the  standard  of  review that  applies  on \nappeal.    Ten  years  ago,  before  finding  it  unnecessary  to \ndecide  whether  copyrightability is  a  pure  question  of  law \nor  a  mixed  question  of  law  and  fact,  the  Seventh  Circuit \nnoted that it had \u201cfound only a handful of appellate cases \naddressing  the  issue,  and  they  are  split.\u201d    Gaiman  v. \nMcFarlane,  360  F.3d  644,  648  (7th  Cir.  2004).    And, \npanels  of  the  Ninth  Circuit  have  defined  the  respective \nroles of the jury and the court differently where questions \nof originality were at issue.  Compare North Coast Indus. \nv.  Jason  Maxwell,  Inc.,  972  F.2d  1031,  1035  (9th  Cir. \n1992),  with  Ets-Hokin,  225  F.3d  at  1073.    More  recently, \nseveral  district  courts  within  the  Ninth  Circuit  have \ntreated  copyrightability  as  a  question  for  only  the  court, \nregardless  of  whether  it  is  a  pure  question  of  law.    See \nStern v. Does, No. 09-1986, 2011 U.S. Dist. LEXIS 37735, \n*7  (C.D.  Cal.  Feb.  10,  2011);  Jonathan  Browning,  Inc.  v. \nVenetian  Casino  Resort  LLC,  No.  C  07-3983,  2009  U.S. \nDist.  LEXIS  57525,  at  *2  (N.D.  Cal.  June  19,  2009);  see \nalso Pivot Point Int\u2019l, Inc. v. Charlene Prods., Inc., 932 F. \nSupp. 220, 225 (N.D. Ill. 1996) (Easterbrook, J.) (citing to \nMarkman  v.  Westview  Instruments,  Inc.,  517  U.S.  370 \n(1996), and concluding that whether works are copyright-\nable  is  a  question  which  the  \u201cjury  has  nothing  to  do \nwith\u201d).    We  need  not  address  any  of  these  questions, \nbecause  the  parties  here  agreed  that  the  district  court \nwould decide copyrightability, and both largely agree that \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n17 \n\nWe  are  mindful  that  the  application  of  copyright  law \nin the computer context is often a difficult task.  See Lotus \nDev. Corp. v. Borland Int\u2019l, Inc., 49 F.3d 807, 820 (1st Cir. \n1995) (Boudin, J., concurring) (\u201cApplying copyright law to \ncomputer  programs  is  like  assembling  a  jigsaw  puzzle \nwhose pieces do not quite fit.\u201d).  On this record, however, \nwe  find  that  the  district  court  failed  to  distinguish  be-\ntween  the  threshold  question  of  what  is  copyrightable\u2014\nwhich  presents  a  low  bar\u2014and  the  scope  of  conduct  that \nconstitutes  infringing  activity.    The  court  also  erred  by \nimporting  fair  use  principles,  including  interoperability \nconcerns, into its copyrightability analysis.     \n\nFor  the  reasons  that  follow,  we  conclude  that  the  de-\nclaring  code  and  the  structure,  sequence,  and  organiza-\ntion of the 37 Java API packages are entitled to copyright \nprotection.    Because  there  is  an  insufficient  record  as  to \nthe  relevant  fair  use  factors,  we  remand  for  further  pro-\nceedings on Google\u2019s fair use defense.   \n\nA.  Copyrightability  \n\nThe  Copyright  Act  provides  protection  to  \u201coriginal \nworks  of  authorship  fixed  in  any  tangible  medium  of \nexpression,\u201d \n  17  U.S.C. \nincluding  \u201cliterary  works.\u201d \n\u00a7 102(a).    It  is  undisputed  that  computer  programs\u2014\ndefined  in  the  Copyright  Act  as  \u201ca  set  of  statements  or \ninstructions to be used directly or indirectly in a computer \nin  order  to  bring  about  a  certain  result,\u201d    17  U.S.C. \n\u00a7 101\u2014can  be  subject  to  copyright  protection  as  \u201cliterary \nworks.\u201d    See  Atari  Games  Corp.  v.  Nintendo  of  Am.,  Inc., \n975  F.2d  832,  838  (Fed.  Cir.  1992)  (\u201cAs  literary  works, \ncopyright  protection  extends  to  computer  programs.\u201d).  \nIndeed,  the  legislative  history  explains  that  \u201cliterary \nworks\u201d  includes  \u201ccomputer  programs  to  the  extent  that \n\n                                                                                                  \n\nwe  may  undertake  a  review  of  that  determination  de \nnovo. \n\n\f18 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nthey  incorporate  authorship  in  the  programmer\u2019s  expres-\nsion  of  original  ideas,  as  distinguished  from  the  ideas \nthemselves.\u201d  H.R. Rep. No. 1476, 94th Cong., 2d Sess. 54, \nreprinted in 1976 U.S.C.C.A.N. 5659, 5667.   \n\nBy  statute,  a  work  must  be  \u201coriginal\u201d  to  qualify  for \ncopyright protection.  17 U.S.C. \u00a7 102(a).  This \u201coriginality \nrequirement is not particularly stringent,\u201d however.  Feist \nPubl\u2019ns,  Inc.  v.  Rural  Tel.  Serv.  Co.,  499  U.S.  340,  358 \n(1991).  \u201cOriginal, as the term is used in copyright, means \nonly  that  the  work  was  independently  created  by  the \nauthor  (as  opposed  to  copied  from  other  works),  and  that \nit  possesses  at  least  some  minimal  degree  of  creativity.\u201d  \nId. at 345.   \n\nCopyright protection extends only to the expression of \nan idea\u2014not to the underlying idea itself.  Mazer v. Stein, \n347  U.S.  201,  217  (1954)  (\u201cUnlike  a  patent,  a  copyright \ngives no exclusive right to the art disclosed; protection is \ngiven  only  to  the  expression  of  the  idea\u2014not  the  idea \nitself.\u201d).    This  distinction\u2014commonly  referred  to  as  the \n\u201cidea/expression dichotomy\u201d\u2014is codified in Section 102(b) \nof the Copyright Act, which provides: \n\nIn  no  case  does  copyright  protection  for  an  origi-\nnal work of authorship extend to any idea, proce-\ndure,  process,  system,  method  of  operation, \nconcept,  principle,  or  discovery,  regardless  of  the \nform in which it is described, explained, illustrat-\ned, or embodied in such work.   \n\n17  U.S.C.  \u00a7 102(b);  see  Golan  v.  Holder,  132  S.  Ct.  873, \n890  (2012)  (\u201cThe  idea/expression  dichotomy  is  codified  at \n17 U.S.C. \u00a7 102(b).\u201d).   \n\nThe  idea/expression  dichotomy  traces  back  to  the  Su-\npreme  Court\u2019s  decision  in  Baker  v.  Selden,  101  U.S.  99, \n101  (1879).    In  Baker,  the  plaintiff  Selden  wrote  and \nobtained copyrights on a series of books setting out a new \nsystem of bookkeeping.  Id. at 100.  The books included an \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n19 \n\nintroductory essay explaining the system and blank forms \nwith  ruled  lines  and headings  designed  for  use  with  that \nsystem.  Id.  Baker  published account books employing a \nsystem  with  similar  forms,  and  Selden  filed  suit  alleging \ncopyright  infringement.    According  to  Selden,  the  \u201cruled \nlines  and  headings,  given  to  illustrate  the  system,  are  a \npart  of  the  book\u201d  and  \u201cno  one  can  make  or  use  similar \nruled  lines  and  headings,  or  ruled  lines  and  headings \nmade  and  arranged  on  substantially  the  same  system, \nwithout violating the copyright.\u201d  Id. at 101.   \n\nThe  Supreme  Court  framed  the  issue  on  appeal  in \nBaker  as  \u201cwhether  the  exclusive  property  in  a  system  of \nbook-keeping  can  be claimed,  under  the law  of  copyright, \nby  means  of  a  book  in  which  that  system  is  explained.\u201d  \nId.    In  reversing  the  circuit  court\u2019s  decision,  the  Court \nconcluded  that  the  \u201ccopyright  of  a  book  on  book-keeping \ncannot  secure  the  exclusive  right  to  make,  sell,  and  use \naccount-books  prepared  upon  the  plan  set  forth  in  such \nbook.\u201d    Id. at  104.    Likewise,  the  \u201ccopyright  of  a  work  on \nmathematical science cannot give to the author an exclu-\nsive  right  to  the  methods  of  operation  which  he  pro-\npounds.\u201d  Id. at 103.  The Court found that, although the \ncopyright  protects  the  way  Selden  \u201cexplained  and  de-\nscribed  a  peculiar  system  of  book-keeping,\u201d  it  does  not \nprevent  others  from  using  the  system  described  therein.  \nId. at 104.  The Court further indicated that, if it is neces-\nsary  to  use  the  forms  Selden  included  in  his  books  to \nmake  use  of  the  accounting  system,  that  use  would  not \namount  to  copyright  infringement.    See  id.  (noting  that \nthe public has the right to use the account-books and that, \n\u201cin using the art, the ruled lines and headings of accounts \nmust necessarily be used as incident to it\u201d).   \n\nCourts  routinely  cite  Baker  as  the  source  of  several \nprinciples  incorporated  into  Section  102(b)  that  relate  to \nthis  appeal,  including  that:  (1) copyright  protection  ex-\ntends only to expression, not to ideas, systems, or process-\nes;  and  (2) \u201cthose  elements  of  a  computer  program  that \n\n\f20 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nare  necessarily  incidental  to  its  function  are  .  .  .  unpro-\ntectable.\u201d    See  Computer  Assocs.  Int\u2019l  v.  Altai,  982  F.2d \n693, 704-05 (2d Cir. 1992) (\u201cAltai\u201d) (discussing Baker, 101 \nU.S. at 103-04). \n\nIt is well established that copyright protection can ex-\ntend to both literal and non-literal elements of a computer \nprogram.  See Altai, 982 F.2d at 702.  The literal elements \nof  a  computer  program  are  the  source  code  and  object \ncode.  See Johnson Controls, Inc. v. Phoenix Control Sys., \nInc.,  886  F.2d  1173,  1175  (9th  Cir.  1989).    Courts  have \ndefined  source  code  as  \u201cthe  spelled-out  program  com-\nmands  that  humans  can  read.\u201d    Lexmark  Int\u2019l,  Inc.  v. \nStatic  Control  Components,  Inc.,  387  F.3d  522,  533  (6th \nCir.  2004).    Object  code  refers  to  \u201cthe  binary  language \ncomprised of zeros and ones through which the computer \ndirectly receives its instructions.\u201d  Altai, 982 F.2d at 698.  \nBoth  source  and  object  code  \u201care  consistently  held  pro-\ntected by a copyright on the program.\u201d  Johnson Controls, \n886  F.2d  at  1175;  see  also  Altai,  982  F.2d  at  702  (\u201cIt  is \nnow  well  settled  that  the  literal  elements  of  computer \nprograms,  i.e.,  their  source  and  object  codes,  are  the \nsubject  of  copyright  protection.\u201d).    Google  nowhere  dis-\nputes that premise.  See, e.g., Oral Argument at 57:38. \n\nThe non-literal components of a computer program in-\nclude, among other things, the program\u2019s sequence, struc-\nture,  and  organization,  as  well  as  the  program\u2019s  user \ninterface.    Johnson  Controls,  886  F.2d  at  1175.    As  dis-\ncussed  below,  whether  the  non-literal  elements  of  a  pro-\ngram  \u201care  protected  depends  on  whether,  on  the \nparticular  facts  of  each  case,  the  component  in  question \nqualifies as an expression of an idea, or an idea itself.\u201d  Id.   \n\nIn  this  case,  Oracle  claims  copyright  protection  with \nrespect to both: (1) literal elements of its API packages\u2014\nthe 7,000 lines of declaring source code; and (2) non-literal \nelements\u2014the  structure,  sequence,  and  organization  of \neach of the 37 Java API packages.   \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n21 \n\nThe distinction between literal and non-literal aspects \nof  a  computer  program  is  separate  from  the  distinction \nbetween  literal  and  non-literal  copying.    See  Altai,  982 \nF.2d  at  701-02.    \u201cLiteral\u201d  copying  is  verbatim  copying  of \noriginal expression.  \u201cNon-literal\u201d copying is \u201cparaphrased \nor loosely paraphrased rather than word for word.\u201d  Lotus \nDev.  Corp.  v.  Borland  Int\u2019l,  49  F.3d  807,  814  (1st  Cir. \n1995).  Here, Google concedes that it copied the declaring \ncode verbatim.  Oracle explains that the lines of declaring \ncode \u201cembody the structure of each [API] package, just as \nthe chapter titles and topic sentences represent the struc-\nture  of  a  novel.\u201d    Appellant  Br.  45.    As  Oracle  explains, \nwhen  Google  copied  the  declaring  code  in  these  packages \n\u201cit  also  copied  the  \u2018sequence  and  organization\u2019  of  the \npackages  (i.e.,  the  three-dimensional  structure  with  all \nthe  chutes  and  ladders)\u201d  employed  by  Sun/Oracle  in  the \npackages.  Appellant Br. 27.  Oracle also argues that the \nnonliteral  elements  of  the  API  packages\u2014the  structure, \nsequence,  and  organization  that  led  naturally  to  the \nimplementing code Google created\u2014are entitled to protec-\ntion.  Oracle does not assert \u201cliteral\u201d copying of the entire \nSSO,  but,  rather,  that  Google  literally  copied  the  declar-\ning code and then paraphrased the remainder of the SSO \nby  writing  its  own  implementing  code.    It  therefore  as-\nserts non-literal copying with respect to the entirety of the \nSSO.   \n\nAt this stage, it is undisputed that the declaring code \nand the structure and organization of the Java API pack-\nages  are  original.    The  testimony  at  trial  revealed  that \ndesigning  the  Java  API  packages  was  a  creative  process \nand  that  the  Sun/Oracle  developers  had  a  vast  range  of \noptions  for  the  structure  and  organization.    In  its  copy-\nrightability  decision,  the  district  court  specifically  found \nthat the API packages are both creative and original, and \nGoogle  concedes  on  appeal  that  the  originality  require-\nments  are  met.    See  Copyrightability  Decision,  872  F. \nSupp.  2d  at  976  (\u201cThe  overall  name  tree,  of  course,  has \n\n\f22 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\ncreative  elements  .  .  .  .\u201d);  Id.  at  999  (\u201cYes,  it  is  creative.  \nYes,  it  is  original.\u201d);  Appellee  Br.  5  (\u201cGoogle  does  not \ndispute\u201d  the  district  court\u2019s  finding  that  \u201cthe  Java  API \nclears  the  low  originality  threshold.\u201d).    The  court  found, \nhowever, that neither the declaring code nor the SSO was \nentitled to copyright protection under the Copyright Act.   \n\nAlthough the parties agree that Oracle\u2019s API packages \nmeet  the  originality  requirement  under  Section 102(a), \nthey disagree as to the proper interpretation and applica-\ntion  of  Section 102(b).    For  its  part,  Google  suggests  that \nthere  is  a  two-step  copyrightability  analysis,  wherein \nSection 102(a)  grants  copyright  protection  to  original \nworks, while Section 102(b) takes it away if the work has \na  functional  component.    To  the  contrary,  however,  Con-\ngress emphasized that Section 102(b) \u201cin no way enlarges \nor contracts the scope of copyright protection\u201d and that its \n\u201cpurpose  is  to  restate  .  .  .  that  the  basic  dichotomy  be-\ntween  expression  and  idea  remains  unchanged.\u201d    Feist, \n499 U.S. at 356 (quoting H.R. Rep. No. 1476, 94th Cong., \n2d  Sess.  54,  reprinted  in  1976  U.S.C.C.A.N.  5659,  5670).  \n\u201cSection 102(b) does not extinguish the protection accord-\ned a particular expression of an idea merely because that \nexpression  is  embodied  in  a  method  of  operation.\u201d    Mitel, \nInc.  v.  Iqtel,  Inc.,  124  F.3d  1366,  1372  (10th  Cir.  1997).  \nSection 102(a) and 102(b) are to be considered collectively \nso that certain expressions are subject to greater scrutiny.  \nId.    In  assessing  copyrightability,  the  district  court  is \nrequired  to  ferret  out  apparent  expressive  aspects  of  a \nwork  and  then  separate  protectable  expression  from \n\u201cunprotectable  ideas,  facts,  processes,  and  methods  of \noperation.\u201d  See Atari, 975 F.2d at 839.   \n\nOf course, as with many things, in defining this task, \nthe  devil  is  in  the  details.    Circuit  courts  have  struggled \nwith,  and  disagree  over,  the  tests  to  be  employed  when \nattempting  to  draw  the  line  between  what  is  protectable \nexpression and what is not.  Compare Whelan Assocs., Inc. \nv.  Jaslow  Dental  Lab.,  Inc.,  797  F.2d  1222, 1236  (3d  Cir. \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n23 \n\n\u201cabstraction-filtration-comparison\u201d \n\n1986) (everything not necessary to the purpose or function \nof  a  work  is  expression),  with  Lotus,  49  F.3d  at  815 \n(methods of operation are means by which a user operates \nsomething  and  any  words  used  to  effectuate  that  opera-\ntion are unprotected expression).  When assessing wheth-\ner  the  non-literal  elements  of  a  computer  program \nconstitute  protectable  expression,  the  Ninth  Circuit  has \ntest \nendorsed  an \nformulated  by  the  Second  Circuit  and  expressly  adopted \nby  several  other  circuits.    Sega  Enters.  Ltd.  v.  Accolade, \nInc., 977 F.2d 1510, 1525 (9th Cir. 1992) (\u201cIn our view, in \nlight  of  the  essentially  utilitarian  nature  of  computer \nprograms, the Second Circuit\u2019s approach is an appropriate \none.\u201d).    This  test  rejects  the  notion  that  anything  that \nperforms  a  function  is  necessarily  uncopyrightable.    See \nMitel, 124 F.3d at 1372 (rejecting the Lotus court\u2019s formu-\nlation,  and  concluding  that,  \u201calthough  an  element  of  a \nwork may be characterized as a method of operation, that \nelement  may  nevertheless  contain  expression  that  is \neligible  for  copyright  protection.\u201d).    And  it  also  rejects  as \nflawed  the  Whelan  assumption  that,  once  any  separable \nidea  can  be  identified  in  a  computer  program  everything \nelse must be protectable expression, on grounds that more \nthan  one  idea  may  be  embodied  in  any  particular  pro-\ngram.  Altai, 982 F.2d at 705-06. \n\nThus, this test eschews bright line approaches and re-\nquires  a  more  nuanced  assessment  of  the  particular \nprogram at issue in order to determine what expression is \nprotectable and infringed.  As the Second Circuit explains, \nthis  test  has  three  steps.    In  the  abstraction  step,  the \ncourt \u201cfirst break[s] down the allegedly infringed program \ninto  its  constituent  structural  parts.\u201d    Id.  at  706.    In  the \nfiltration  step,  the  court  \u201csift[s]  out  all  non-protectable \nmaterial,\u201d  including  ideas  and  \u201cexpression  that  is  neces-\nsarily incidental to those ideas.\u201d  Id.  In the final step, the \n\n\f24 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\ncourt  compares  the  remaining  creative  expression  with \nthe allegedly infringing program.4   \n\nIn the second step, the court is first to assess whether \nthe  expression  is  original  to  the  programmer  or  author.  \nAtari,  975  F.2d  at  839.    The  court  must  then  determine \nwhether  the  particular  inclusion  of  any  level  of  abstrac-\ntion is dictated by considerations of efficiency, required by \nfactors  already  external  to  the  program  itself,  or  taken \nfrom  the  public  domain\u2014all  of  which  would  render  the \nexpression unprotectable.  Id.  These conclusions are to be \ninformed by traditional copyright principles of originality, \nmerger,  and  scenes  a  faire.    See  Mitel,  124  F.3d  at  1372 \n(\u201cAlthough this core of expression is eligible for copyright \nprotection,  it  is  subject  to  the  rigors  of  filtration  analysis \nwhich  excludes  from  protection  expression  that  is  in  the \npublic  domain,  otherwise  unoriginal,  or  subject  to  the \ndoctrines of merger and scenes a faire.\u201d).   \n\nIn  all  circuits,  it  is  clear  that  the  first  step  is  part  of \nthe  copyrightability  analysis  and  that  the  third  is  an \ninfringement  question.    It  is  at  the  second  step  of  this \nanalysis where the circuits are in less accord.  Some treat \nall aspects of this second step as part of the copyrightabil-\nity  analysis,  while  others  divide  questions  of  originality \nfrom the other inquiries, treating the former as a question \nof  copyrightability  and  the  latter  as  part  of  the  infringe-\nment  inquiry.    Compare  Lexmark,  387  F.3d  at  537-38 \n\n                                            \n\n4  \n\nImportantly, this  full  analysis  only  applies  where \na  copyright  owner  alleges  infringement  of  the  non-literal \naspects of its work.  Where \u201cadmitted literal copying of a \ndiscrete,  easily-conceptualized  portion  of  a  work\u201d  is  at \nissue\u2014as with Oracle\u2019s declaring code\u2014a court \u201cneed not \nperform  a  complete  abstraction-filtration-comparison \nanalysis\u201d and may focus the protectability analysis on the \nfiltration  stage,  with  attendant  reference  to  standard \ncopyright principles.  Mitel, 124 F.3d at 1372-73. \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n25 \n\n(finding  that  the  district  court  erred  in  assessing  princi-\nples  of  merger  and  scenes  a  faire  in  the  infringement \nanalysis, rather than as a component of copyrightability), \nwith  Kregos,  937  F.2d  at  705    (noting  that  the  Second \nCircuit  has  considered  the  merger  doctrine  \u201cin  determin-\ning whether actionable infringement has occurred, rather \nthan whether a copyright is valid\u201d); see also Lexmark, 387 \nF.3d  at  557  (Feikens,  J.,  dissenting-in-part)  (noting  the \ncircuit  split  and  concluding  that,  where  a  court  is  as-\nsessing  merger  of  an  expression  with  a  method  of  opera-\ntion, \u201cI would find the merger doctrine can operate only as \na defense to infringement in that context, and as such has \nno bearing on the question of copyrightability.\u201d).  We need \nnot  assess  the  wisdom  of  these  respective  views  because \nthere  is  no  doubt  on  which  side  of  this  circuit  split  the \nNinth Circuit falls.    \n\nIn the Ninth Circuit, while questions regarding origi-\nnality  are  considered  questions  of  copyrightability,  con-\ncepts  of  merger  and  scenes  a  faire  are  affirmative \ndefenses  to  claims  of  infringement.    Ets-Hokin,  225  F.3d \nat 1082; Satava v. Lowry, 323 F.3d 805, 810 n.3 (9th Cir. \n2003)  (\u201cThe  Ninth  Circuit  treats  scenes  a  faire  as  a  de-\nfense  to  infringement  rather  than  as  a  barrier  to  copy-\nrightability.\u201d).    The Ninth  Circuit  has acknowledged  that \n\u201cthere  is  some  disagreement  among  courts  as  to  whether \nthese two doctrines  figure into the issue of copyrightabil-\nity  or  are  more  properly  defenses  to  infringement.\u201d    Ets-\nHokin,  225 F.3d at 1082  (citations  omitted).    It,  nonethe-\nless,  has  made  clear  that,  in  that  circuit,  these  concepts \nare  to  be  treated  as defenses  to  infringement.    Id.  (citing \nKregos, 937 F.2d at 705 (holding that the merger doctrine \nrelates to infringement, not copyrightability); Reed-Union \nCorp. v. Turtle Wax, Inc., 77 F.3d 909, 914 (7th Cir. 1996) \n(explaining why the doctrine of scenes a faire is separate \nfrom the validity of a copyright)).  \n\nWith  these  principles  in  mind,  we  turn  to  the  trial \ncourt\u2019s  analysis  and  judgment  and  to  Oracle\u2019s  objections \n\n\f26 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nthereto.  While the trial court mentioned the abstraction-\nfiltration-comparison  test  when  describing  the  develop-\nment of relevant law, it did not purport to actually apply \nthat  test.    Instead,  it  moved  directly  to  application  of \nfamiliar  principles  of  copyright  law  when  assessing  the \ncopyrightability  of  the  declaring  code  and  interpreted \nSection  102(b)  to  preclude  copyrightability  for  any  func-\ntional  element  \u201cessential  for  interoperability\u201d  \u201cregardless \nof its form.\u201d  Copyrightability Decision, 872 F. Supp. 2d at \n997.  \n\nOracle  asserts  that  all  of  the  trial  court\u2019s  conclusions \nregarding  copyrightability  are  erroneous.    Oracle  argues \nthat  its  Java  API  packages  are  entitled  to  protection \nunder the Copyright Act because they are expressive and \ncould  have  been  written  and  organized  in  any  number  of \nways  to  achieve  the  same  functions.    Specifically,  Oracle \nargues that the district court erred when it: (1) concluded \nthat  each  line  of  declaring  code  is  uncopyrightable  be-\ncause the idea and expression have merged; (2) found the \ndeclaring  code  uncopyrightable  because  it  employs  short \nphrases; (3) found all aspects of the SSO devoid of protec-\ntion as a \u201cmethod of  operation\u201d under 17  U.S.C. \u00a7 102(b); \nand (4) invoked Google\u2019s \u201cinteroperability\u201d concerns in the \ncopyrightability  analysis.    For  the  reasons  explained \nbelow, we agree with Oracle on each point.   \n\n1.  Declaring Source Code \n\nFirst,  Oracle  argues  that  the  district  court  erred  in \nconcluding  that  each  line  of  declaring  source  code  is \ncompletely  unprotected  under  the  merger  and  short \nphrases  doctrines.    Google  responds  that  Oracle  waived \nits right to assert copyrightability based on the 7,000 lines \nof declaring code by failing \u201cto object to instructions and a \nverdict  form  that  effectively  eliminated  that  theory  from \nthe case.\u201d  Appellee Br. 67.  Even if not waived, moreover, \nGoogle argues that, because there is only one way to write \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n27 \n\nthe  names  and  declarations,  the  merger  doctrine  bars \ncopyright protection.   \n\nWe  find  that  Oracle  did  not  waive  arguments  based \non Google\u2019s literal copying of the declaring code.  Prior to \ntrial,  both  parties  informed  the  court  that  Oracle\u2019s  copy-\nright infringement claims included the declarations of the \nAPI  elements  in  the  Android  class  library  source  code.  \nSee  Oracle\u2019s  Statement  of  Issues  Regarding  Copyright, \nOracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-3561  (N.D. \nCal.  Apr.  12,  2012),  ECF  No.  899-1,  at  3  (Oracle  accuses \nthe \u201cdeclarations of the API elements in the Android class \nlibrary  source  code  and  object  code  that  implements  the \n37  API  packages\u201d  of  copyright  infringement.);  see  also \nGoogle\u2019s  Proposed  Statement  of  Issues  Regarding  Copy-\nright,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-3561 \n(N.D.  Cal.  Apr.  12,  2012),  ECF  No.  901,  at  2  (Oracle \naccuses  the  \u201cdeclarations  of  the  API  elements  in  Android \nclass library source code and object code that implements \nthe 37 API packages.\u201d).   \n\nWhile Google is correct that the jury instructions and \nverdict form focused  on the structure and organization of \nthe  packages,  we  agree  with  Oracle  that  there  was  no \nneed for the jury to address copying of the declaring code \nbecause  Google  conceded  that  it  copied  it  verbatim.  \nIndeed,  the  district  court  specifically  instructed  the  jury \nthat  \u201cGoogle  agrees  that  it  uses  the  same  names  and \ndeclarations\u201d in Android.  Final Charge to the Jury at 10.   \n\nThat the district court addressed the declaring code in \nits  post-jury  verdict  copyrightability  decision  further \nconfirms  that  the  verbatim  copying  of  declaring  code \nremained in the case.  The court explained that the \u201ciden-\ntical  lines\u201d  that  Google  copied  into  Android  \u201care  those \nlines that specify the names, parameters and functionali-\nty of the methods and classes, lines called \u2018declarations\u2019 or \n\u2018headers.\u2019\u201d    Copyrightability  Decision,  872  F.  Supp.  2d  at \n979.   The  court  specifically  found  that  the  declaring  code \n\n\f28 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nwas not entitled to copyright protection under the merger \nand short phrases doctrines.  We address each in turn.   \n\na.  Merger  \n\nThe  merger  doctrine  functions  as  an  exception  to  the \nidea/expression  dichotomy.    It  provides  that,  when  there \nare a limited number of ways to express an idea, the idea \nis said to \u201cmerge\u201d with its expression, and the expression \nbecomes  unprotected.    Altai,  982  F.2d  at  707-08.    As \nnoted, the Ninth Circuit treats this concept as an affirma-\ntive  defense  to  infringement.    Ets-Hokin,  225  F.3d  at \n1082.    Accordingly,  it  appears  that  the  district  court\u2019s \nmerger  analysis  is  irrelevant  to  the  question  of  whether \nOracle\u2019s  API  packages  are  copyrightable  in  the  first \ninstance.    Regardless  of  when  the  analysis  occurs,  we \nconclude that merger does not apply on the record before \nus. \n\nUnder  the  merger  doctrine,  a  court  will  not  protect  a \ncopyrighted work from infringement if the idea contained \ntherein  can  be  expressed  in  only  one  way.    Satava  v. \nLowry,  323  F.3d  805,  812  n.5  (9th  Cir.  2003).    For  com-\nputer  programs,  \u201cthis  means  that  when  specific  [parts  of \nthe  code],  even  though  previously  copyrighted,  are  the \nonly  and  essential  means  of  accomplishing  a  given  task, \ntheir  later  use  by  another  will  not  amount  to  infringe-\nment.\u201d  Altai, 982 F.2d at 708 (citation omitted).  We have \nrecognized, however, applying Ninth Circuit law, that the \n\u201cunique arrangement of computer program expression . . . \ndoes  not  merge  with  the  process  so  long  as  alternate \nexpressions are available.\u201d  Atari, 975 F.2d at 840.   \n\nIn Atari, for example, Nintendo designed a program\u2014\nthe  10NES\u2014to  prevent  its  video  game  system  from  ac-\ncepting  unauthorized  game  cartridges.    975  F.2d  at  836.  \nNintendo  \u201cchose  arbitrary  programming  instructions  and \narranged  them  in  a  unique  sequence  to  create  a  purely \narbitrary data stream\u201d which \u201cserves as the key to unlock \nthe NES.\u201d  Id. at 840.  Because Nintendo produced expert \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n29 \n\ntestimony  \u201cshowing  a  multitude  of  different  ways  to \ngenerate  a  data  stream  which  unlocks  the  NES  console,\u201d \nwe  concluded  that  Nintendo\u2019s  specific  choice  of  code  did \nnot merge with the process.  Id.   \n\nHere,  the  district  court  found  that,  \u201cno  matter  how \ncreative  or  imaginative  a  Java  method  specification  may \nbe,  the  entire  world  is  entitled  to  use  the  same  method \nspecification  (inputs,  outputs,  parameters)  so  long  as  the \nline-by-line  implementations  are  different.\u201d    Copyrighta-\nbility Decision, 872 F. Supp. 2d at 998.  In its analysis, the \ncourt  identified  the  method  declaration  as  the  idea  and \nfound  that  the  implementation  is  the  expression.    Id. \n(\u201cThe  method  specification  is  the  idea.    The  method  im-\nplementation  is  the  expression.    No  one  may  monopolize \nthe  idea.\u201d)  (emphases  in  original).    The  court  explained \nthat, under the rules of Java, a programmer must use the \nidentical \u201cdeclaration or method header lines\u201d to \u201cdeclare \na  method  specifying  the  same  functionality.\u201d    Id.  at  976.  \nBecause  the  district  court  found  that  there  was  only  one \nway to write the declaring code for each of the Java pack-\nages,  it  concluded  that  \u201cthe  merger  doctrine  bars  anyone \nfrom claiming exclusive copyright ownership\u201d of it.  Id. at \n998.  Accordingly, the court held there could be \u201cno copy-\nright violation in using the identical declarations.\u201d  Id.  \n\nGoogle  agrees  with  the  district  court  that  the  imple-\nmenting code is the expression entitled to protection\u2014not \nthe declaring code.  Indeed, at oral argument, counsel for \nGoogle explained that, \u201cit is not our position that none of \nJava is copyrightable.  Obviously, Google spent two and a \nhalf years . . . to write from scratch all of the implement-\ning code.\u201d  Oral Argument at 33:16.5  Because it is undis-\n\n                                            \n\n5  \n\nIt  is  undisputed  that  Microsoft  and  Apple  devel-\noped  mobile  operating  systems  from  scratch,  using  their \nown  array  of  software  packages.    When  asked  whether \nGoogle could also copy all of Microsoft or Apple\u2019s declaring \n\n\f30 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nputed  that  Google  wrote  its  own  implementing  code,  the \ncopyrightability of the precise language of that code is not \nat issue on appeal.  Instead, our focus is on the declaring \ncode and structure of the API packages.  \n\nOn  appeal,  Oracle  argues  that  the  district  court: \n(1) misapplied the merger doctrine; and (2) failed to focus \nits  analysis  on  the  options  available  to  the  original  au-\nthor.    We  agree  with  Oracle  on  both  points.    First,  we \nagree that merger cannot bar copyright protection for any \nlines of declaring source code unless Sun/Oracle had only \none way, or a limited number of ways, to write them.  See \nSatava, 323 F.3d at 812 n.5 (\u201cUnder the merger doctrine, \ncourts  will  not  protect  a  copyrighted  work  from  infringe-\nment  if  the  idea  underlying  the  copyrighted  work  can  be \nexpressed  in  only  one  way,  lest  there  be  a  monopoly  on \nthe  underlying  idea.\u201d).    The  evidence  showed  that  Oracle \nhad  \u201cunlimited  options  as  to  the  selection  and  arrange-\nment  of  the  7000 lines  Google  copied.\u201d    Appellant  Br. 50.  \nUsing  the  district  court\u2019s  \u201cjava.lang.Math.max\u201d  example, \nOracle  explains  that  the  developers  could  have  called  it \nany  number  of  things,  including  \u201cMath.maximum\u201d  or \n\u201cArith.larger.\u201d  This was not a situation where Oracle was \nselecting among preordained names and phrases to create \nits packages.6  As the district court recognized, moreover, \n\n                                                                                                  \n\ncode\u2014codes  that  obviously  differ  from  those  at  issue \nhere\u2014counsel  for  Google  responded:  \u201cYes,  but  only  the \nstructure,  sequence,  and  organization.    Only  the  com-\nmand  structure\u2014what  you  need  to  access  the  functions.  \nYou\u2019d  have  to  rewrite  all  the  millions  of  lines  of  code  in \nApple  or  in  Microsoft  which  is  what  Google  did  in  An-\ndroid.\u201d  Oral Argument at 36:00.   \n\n6  \n\nIn  their  brief  as  amici  curiae  in  support  of  rever-\nsal,  Scott  McNealy  and  Brian  Sutphin\u2014both  former \nexecutives  at  Sun  who  were  involved  in  the  development \nof  the  Java  platform\u2014provide  a  detailed  example  of  the \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n31 \n\n\u201cthe  Android  method  and  class  names  could  have  been \ndifferent  from  the  names  of  their  counterparts  in  Java \nand still have worked.\u201d  Copyrightability Decision, 872 F. \nSupp. 2d at 976.  Because \u201calternative expressions [we]re \navailable,\u201d there is no merger.  See Atari, 975 F.2d at 840. \n\nWe further find that  the district court erred in focus-\ning its merger analysis on the options available to Google \nat  the  time  of  copying.    It  is  well-established  that  copy-\nrightability and the scope of protectable activity are to be \nevaluated  at  the  time  of  creation,  not  at  the  time  of  in-\nfringement.    See  Apple  Computer,  Inc.  v.  Formula  Int\u2019l, \nInc.,  725  F.2d  521,  524  (9th  Cir.  1984)  (quoting  National \nCommission  on  New  Technological  Uses  of  Copyrighted \nWorks,  Final  Report  at  21  (1979)  (\u201cCONTU  Report\u201d) \n(recognizing  that  the  Copyright  Act  was  designed  \u201cto \nprotect all works of authorship from the moment of their \nfixation  in  any  tangible  medium  of  expression\u201d)).    The \nfocus  is,  therefore,  on  the  options  that  were  available  to \nSun/Oracle  at  the  time  it  created  the  API  packages.    Of \n\n                                                                                                  \n\ncreative  choices  involved  in  designing  a  Java  package.  \nLooking  at  the  \u201cjava.text\u201d  package,  they  explain  that  it \n\u201ccontains  25  classes,  2  interfaces,  and  hundreds  of  meth-\nods  to  handle  text,  dates,  numbers,  and  messages  in  a \nmanner  independent  of  natural  human  languages  .  .  .  .\u201d \nBr. of McNealy and Sutphin 14-15.  Java\u2019s creators had to \ndetermine  whether  to  include  a  java.text  package  in  the \nfirst place, how long the package would be, what elements \nto  include,  how  to  organize  that  package,  and  how  it \nwould  relate  to  other  packages.    Id.  at  16.    This  descrip-\ntion  of  Sun\u2019s  creative  process  is  consistent  with  the  evi-\ndence  presented  at  trial.    See  Appellant  Br.  12-13  (citing \ntestimony  that  it  took  years  to  write  some  of  the  Java \npackages and that Sun/Oracle developers  had to \u201cwrestle \nwith  what  functions  to  include  in  the  package,  which  to \nput in other packages, and which to omit entirely\u201d). \n\n\f32 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\ncourse,  once  Sun/Oracle  created  \u201cjava.lang.Math.max,\u201d \nprogrammers  who  want  to  use  that  particular  package \nhave  to  call  it  by  that  name.    But,  as  the  court  acknowl-\nedged,  nothing  prevented  Google  from  writing  its  own \ndeclaring  code,  along  with  its  own  implementing  code,  to \nachieve  the  same  result.    In  such  circumstances,  the \nchosen  expression  simply  does  not  merge  with  the  idea \nbeing expressed.7   \n\nIt  seems  possible  that  the  merger  doctrine,  when \nproperly  analyzed,  would  exclude  the  three  packages \nidentified  by  the  district  court  as  core  packages  from  the \nscope of actionable infringing conduct.  This would be so if \nthe Java authors, at the time these packages were creat-\ned,  had  only  a  limited  number  of  ways  to  express  the \nmethods and classes therein if they wanted to write in the \nJava  language.    In  that  instance,  the  idea  may  well  be \nmerged  with  the  expression  in  these  three  packages.8  \n\n                                            \n\n7   The district court did not find merger with respect \nto  the  structure,  sequence,  and  organization  of  Oracle\u2019s \nJava API packages.  Nor could it, given the court\u2019s recog-\nnition  that  there  were  myriad  ways  in  which  the  API \npackages  could  have  been  organized.    Indeed,  the  court \nfound  that  the  SSO  is  original  and  that  \u201cnothing  in  the \nrules  of  the  Java  language  .  .  .  required  that  Google \nreplicate the same groupings.\u201d  Copyrightability Decision, \n872 F. Supp. 2d at 999.  As discussed below, however, the \ncourt nonetheless found that the SSO is an uncopyrighta-\nble \u201cmethod of operation.\u201d \n\n8   At  oral  argument,  counsel  for  Oracle  was  asked \nwhether  we  should  view  the  three  core  packages  \u201cdiffer-\nently  vis-\u00e0-vis  the  concept  of  a  method  of  operation  than \nthe  other  packages.\u201d    See  Oral  Argument  at  7:43.    He \nresponded:  \u201cI  think  not  your  Honor.  I  would  view  them \ndifferently with respect to fair use . . . . It\u2019s not that they \nare  more  basic.   It\u2019s  that  there  are  just  several  methods, \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n33 \n\nGoogle  did  not  present  its  merger  argument  in  this  way \nbelow  and  does  not  do  so  here,  however.    Indeed,  Google \ndoes  not  try  to  differentiate  among  the  packages  for \npurposes  of  its  copyrightability  analysis  and  does  not \nappeal  the  infringement  verdict  as  to  the  packages.    For \nthese reasons, we reject the trial court\u2019s merger analysis.   \n\nb.  Short Phrases  \n\nThe  district  court  also  found  that  Oracle\u2019s  declaring \ncode consists of uncopyrightable short phrases.  Specifical-\nly,  the  court  concluded  that,  \u201cwhile  the  Android  method \nand  class  names  could  have  been  different  from  the \nnames  of  their  counterparts  in  Java  and  still  have \nworked,  copyright  protection  never  extends  to  names  or \nshort phrases as a matter of law.\u201d  Copyrightability Deci-\nsion, 872 F. Supp. 2d at 976.  \n\nThe  district  court  is  correct  that  \u201c[w]ords  and  short \nphrases  such  as  names,  titles,  and  slogans\u201d  are  not  sub-\nject  to  copyright  protection.    37  C.F.R.  \u00a7 202.1(a).    The \ncourt  failed  to  recognize,  however,  that  the  relevant \nquestion  for  copyrightability  purposes  is  not  whether  the \nwork  at  issue  contains  short  phrases\u2014as  literary  works \noften do\u2014but, rather, whether those phrases are creative.  \nSee  Soc\u2019y  of  Holy  Transfiguration  Monastery,  Inc.  v. \n\n                                                                                                  \n\nthat is, routines, within just those three packages that are \nnecessary  to  \u2018speak  the  Java  language.\u2019   Nothing  in  the \nother  thirty-four  packages  is  necessary  in  order  to  speak \nin  Java,  so  to  speak.\u201d    Id.    Counsel  conceded,  however, \nthat  this  issue  \u201cmight  go  to  merger.   It  might  go  to  the \nquestion  whether  someone\u2014since  we  conceded  that  it\u2019s \nokay  to  use  the  language\u2014if  it\u2019s  alright  to  use  the  lan-\nguage  that  there  are  certain  things  that  the  original \ndevelopers  had  to  say  in  order  to  use  that  language, \narguably, although I still think it\u2019s really a fair use analy-\nsis.\u201d  Id.   \n\n\f34 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nGregory, 689 F.3d 29, 52 (1st Cir. 2012) (noting that \u201cnot \nall  short  phrases  will  automatically  be  deemed  uncopy-\nrightable\u201d);  see  also  1  Melville  B.  Nimmer  &  David  Nim-\nmer,  Nimmer  on  Copyright  \u00a7 2.01[B]  (2013)  (\u201c[E]ven  a \nshort  phrase  may  command  copyright  protection  if  it \nexhibits  sufficient  creativity.\u201d).  And,  by  dissecting  the \nindividual  lines  of  declaring  code  at  issue  into  short \nphrases, the district court further failed to recognize that \nan original combination of elements can be copyrightable.  \nSee  Softel,  Inc.  v.  Dragon  Med.  &  Scientific  Commc\u2019ns, \n118  F.3d  955,  964  (2d  Cir.  1997)  (noting  that,  in  Feist, \n\u201cthe  Court  made  quite  clear  that  a  compilation  of  non-\nprotectible  elements  can  enjoy  copyright  protection  even \nthough its constituent elements do not\u201d).   \n\nBy analogy, the opening of Charles Dickens\u2019 A Tale of \nTwo Cities is nothing but a string of short phrases.  Yet no \none  could  contend  that  this  portion  of  Dickens\u2019  work  is \nunworthy of copyright protection because it can be broken \ninto  those  shorter  constituent  components.    The  question \nis  not  whether  a  short  phrase  or  series  of  short  phrases \ncan be extracted from the work, but whether the manner \nin which they are used or strung together exhibits creativ-\nity.  \n\nAlthough  the  district  court  apparently  focused  on  in-\ndividual  lines  of  code,  Oracle  is  not  seeking  copyright \nprotection  for  a  specific  short  phrase  or  word.    Instead, \nthe  portion  of  declaring  code  at  issue  is  7,000  lines,  and \nGoogle\u2019s  own  \u201cJava  guru\u201d  conceded  that  there  can  be \n\u201ccreativity  and  artistry  even  in  a  single  method  declara-\ntion.\u201d    Joint  Appendix  (\u201cJ.A.\u201d)  20,970.      Because  Oracle \n\u201cexercised creativity in the selection and arrangement\u201d of \nthe method declarations when it created the API packages \nand  wrote  the  relevant  declaring  code,  they  contain  pro-\ntectable  expression  that  is  entitled  to  copyright  protec-\ntion.  See Atari, 975 F.2d at 840; see also 17 U.S.C. \u00a7\u00a7 101, \n103  (recognizing  copyright  protection  for  \u201ccompilations\u201d \nwhich  are  defined  as  work  that  is  \u201cselected,  coordinated, \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n35 \n\nor  arranged  in  such  a  way  that  the  resulting  work  as  a \nwhole  constitutes  an  original  work  of  authorship\u201d).    Ac-\ncordingly,  we  conclude  that  the  district  court  erred  in \napplying  the  short  phrases  doctrine  to  find  the  declaring \ncode not copyrightable.  \n\nc.  Scenes a Faire \n\nThe  scenes  a  faire  doctrine,  which  is  related  to  the \nmerger  doctrine,  operates  to  bar  certain  otherwise  crea-\ntive expression from copyright protection.  Apple Comput-\ner,  Inc.  v.  Microsoft  Corp.,  35  F.3d  1435,  1444  (9th  Cir. \n1994).  It provides that \u201cexpressive elements of a work of \nauthorship  are  not  entitled  to  protection  against  in-\nfringement  if  they  are  standard,  stock,  or  common  to  a \ntopic,  or  if  they  necessarily  follow  from  a  common  theme \nor setting.\u201d  Mitel, 124 F.3d at 1374.  Under this doctrine, \n\u201cwhen certain commonplace expressions are indispensable \nand  naturally  associated  with  the  treatment  of  a  given \nidea,  those  expressions  are  treated  like  ideas  and  there-\nfore  [are]  not  protected  by  copyright.\u201d    Swirsky  v.  Carey, \n376  F.3d  841,  850  (9th  Cir.  2004).    In  the  computer  con-\ntext,  \u201cthe  scene  a  faire  doctrine  denies  protection  to  pro-\ngram  elements  that  are  dictated  by  external  factors  such \nas \u2018the mechanical specifications of the computer on which \na particular program is intended to run\u2019 or \u2018widely accept-\ned programming practices within the computer industry.\u2019\u201d  \nSoftel, 118 F.3d at 963 (citation omitted).   \n\nThe trial court rejected Google\u2019s reliance on the scenes \na  faire  doctrine.    It  did  so  in  a  footnote,  finding  that \nGoogle had failed to present evidence to support the claim \nthat either the grouping of methods within the classes or \nthe  code  chosen  for  them  \u201cwould  be  so  expected  and \ncustomary  as  to  be  permissible  under  the  scenes  a  faire \ndoctrine.\u201d    Copyrightability  Decision,  872  F.  Supp.  2d  at \n999  n.9.    Specifically,  the  trial  court  found  that  \u201cit  is \nimpossible to say on this record that all of the classes and \ntheir  contents  are  typical  of  such  classes  and,  on  this \n\n\f36 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nrecord,  this  order  rejects  Google\u2019s  global  argument  based \non scenes a faire.\u201d  Id.   \n\nOn  appeal,  Google  refers  to  scenes  a  faire  concepts \nbriefly,  as  do  some  amici,  apparently  contending  that, \nbecause  programmers  have  become  accustomed  to  and \ncomfortable using the groupings in the Java API packag-\nes, those groupings are so commonplace as to be indispen-\nsable  to  the  expression  of  an  acceptable  programming \nplatform.  As such, the argument goes, they are so associ-\nated with the \u201cidea\u201d of what the packages are accomplish-\ning  that  they  should  be  treated  as  ideas  rather  than \nexpression.    See  Br.  of  Amici  Curiae  Rackspace  US,  Inc., \net al. at 19-22. \n\nGoogle cannot rely on the scenes a faire doctrine as an \nalternative  ground  upon  which  we  might  affirm  the \ncopyrightability judgment of the district court.  This is so \nfor  several  reasons.    First,  as  noted,  like  merger,  in  the \nNinth  Circuit,  the  scenes  a  faire  doctrine  is  a  component \nof  the  infringement  analysis.    \u201c[S]imilarity  of  expression, \nwhether  literal  or  non-literal,  which  necessarily  results \nfrom  the  fact  that  the  common  idea  is  only  capable  of \nexpression in more or less stereotyped form, will preclude \na  finding  of  actionable  similarity.\u201d    4  Nimmer  on  Copy-\nright  \u00a7 13.03[B][3].    Thus,  the  expression  is  not  excluded \nfrom copyright protection; it is just that certain copying is \nforgiven  as  a  necessary  incident  of  any  expression  of  the \nunderlying  idea.    See  Satava,  323  F.3d  at  810  n.3  (\u201cThe \nNinth  Circuit  treats  scenes  a  faire  as  a  defense  to  in-\nfringement rather than as a barrier to copyrightability.\u201d).   \n\nSecond,  Google  has  not  objected  to  the  trial  court\u2019s \nconclusion  that  Google  failed  to  make  a  sufficient  factual \nrecord  to  support  its  contention  that  the  groupings  and \ncode chosen for the 37 Java API packages were driven by \nexternal  factors  or  premised  on  features  that  were  either \ncommonplace  or  essential  to  the  idea  being  expressed.  \nGoogle provides no record citations indicating that such a \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n37 \n\nshowing  was  made  and  does  not  contend  that  the  trial \ncourt  erred  when  it  expressly  found  it  was  not.    Indeed, \nGoogle does not even make this argument with respect to \nthe core packages.  \n\nFinally,  Google\u2019s  reliance  on  the  doctrine  below  and \nthe  amici  reference  to  it  here  are  premised  on  a  funda-\nmental  misunderstanding  of  the  doctrine.    Like  merger, \nthe  focus  of  the  scenes  a  faire  doctrine  is  on  the  circum-\nstances presented to the creator, not the copier.  See Mitel, \n124  F.3d  at  1375  (finding  error  to  the  extent  the  trial \ncourt discussed \u201cwhether external factors such as market \nforces  and  efficiency  considerations  justified  Iqtel\u2019s  copy-\ning  of  the  command  codes\u201d).    The  court\u2019s  analytical  focus \nmust  be  upon  the  external  factors  that  dictated  Sun\u2019s \nselection  of  classes,  methods,  and  code\u2014not  upon  what \nGoogle  encountered  at  the  time  it  chose  to  copy  those \ngroupings  and  that  code.    See  id.    \u201c[T]he  scenes  a  faire \ndoctrine  identifies  and  excludes  from  protection  against \ninfringement  expression  whose  creation  \u2018flowed  naturally \nfrom  considerations  external  to  the  author\u2019s  creativity.\u2019\u201d  \nId. (quoting Nimmer \u00a7 13.03[F][3], at 13-131 (1997)).  It is \nthis  showing  the  trial  court  found  Google  failed  to  make, \nand Google cites to nothing in the record which indicates \notherwise. \n\nFor  these  reasons,  the  trial  court  was  correct  to  con-\nclude  that  the  scenes  a  faire  doctrine  does  not  affect  the \ncopyrightability of either the declaring code in, or the SSO \nof, the Java API packages at issue.  \n\n2.  The Structure, Sequence, and Organization  \nof the API Packages \n\nThe district court found that the SSO of the Java API \npackages  is  creative  and  original,  but  nevertheless  held \nthat it is a \u201csystem or method of operation . . . and, there-\nfore,  cannot  be  copyrighted\u201d  under  17  U.S.C.  \u00a7 102(b).  \nCopyrightability  Decision,  872  F.  Supp.  2d  at  976-77.    In \nreaching  this  conclusion,  the  district  court  seems  to  have \n\n\f38 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nrelied upon language contained in a First Circuit decision: \nLotus  Development  Corp.  v.  Borland  International,  Inc., \n49  F.3d  807  (1st  Cir.  1995),  aff\u2019d  without  opinion  by \nequally divided court, 516 U.S. 233 (1996).9   \n\nIn Lotus, it was undisputed that the defendant copied \nthe menu command hierarchy and interface from Lotus 1-\n2-3, a computer spreadsheet program \u201cthat enables users \nto  perform  accounting  functions  electronically  on  a  com-\nputer.\u201d    49  F.3d  at  809.    The  menu  command  hierarchy \nreferred to a series of commands\u2014such as \u201cCopy,\u201d \u201cPrint,\u201d \nand  \u201cQuit\u201d\u2014which  were  arranged  into  more  than  50 \nmenus  and  submenus.    Id.    Although  the  defendant  did \nnot  copy  any  Lotus  source  code,  it  copied  the  menu  com-\nmand  hierarchy  into  its  rival  program.    The  question \nbefore the court was \u201cwhether a computer menu command \nhierarchy is copyrightable subject matter.\u201d  Id.    \n\nAlthough  it  accepted  the  district  court\u2019s  finding  that \nLotus  developers  made  some  expressive  choices  in  select-\ning  and  arranging  the  command  terms,  the  First  Circuit \nfound that the command hierarchy was not copyrightable \nbecause,  among  other  things,  it  was  a  \u201cmethod  of  opera-\ntion\u201d  under  Section 102(b).    In  reaching  this  conclusion, \nthe  court  defined  a  \u201cmethod  of  operation\u201d  as  \u201cthe  means \nby  which  a  person  operates  something,  whether  it  be  a \ncar,  a  food  processor,  or  a  computer.\u201d    Id.  at  815.10    Be-\ncause  the  Lotus  menu  command  hierarchy  provided  \u201cthe \nmeans by which users control and operate Lotus 1-2-3,\u201d it \n\n                                            \n\n9   The  Supreme  Court  granted  certiorari  in  Lotus, \nbut,  shortly  after  oral  argument,  the  Court  announced \nthat it was equally divided and that Justice Stevens took \nno  part  in  the  consideration  or  decision  of  the  case.    The \nCourt  therefore  left  the  First  Circuit\u2019s  decision  undis-\nturbed.  See Lotus, 516 U.S. at 233-34.   \n\n10   The Lotus majority cited no authority for this def-\n\ninition of \u201cmethod of operation.\u201d  \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n39 \n\nwas  deemed  unprotectable.    Id.    For  example,  if  users \nwanted  to  copy  material,  they  would  use  the  \u201cCopy\u201d \ncommand and the command terms would tell the comput-\ner what to do.  According to the Lotus court, the \u201cfact that \nLotus  developers  could  have  designed  the  Lotus  menu \ncommand  hierarchy  differently  is  immaterial  to  the \nquestion  of  whether  it  is  a  \u2018method  of  operation.\u2019\u201d    Id.  at \n816.  (noting  that  \u201cour  initial  inquiry  is  not  whether  the \nLotus menu command hierarchy incorporates any expres-\nsion\u201d).    The  court  further  indicated  that,  \u201c[i]f  specific \nwords are essential to operating something, then they are \npart  of  a  \u2018method  of  operation\u2019  and,  as  such,  are  unpro-\ntectable.\u201d  Id.  \n\nOn appeal, Oracle argues that the district court\u2019s reli-\nance  on  Lotus  is  misplaced  because  it  is  distinguishable \non  its  facts  and  is  inconsistent  with  Ninth  Circuit  law.  \nWe  agree.    First,  while  the  defendant  in  Lotus  did  not \ncopy  any  of  the  underlying  code,  Google  concedes  that  it \ncopied portions of Oracle\u2019s declaring source code verbatim.  \nSecond, the Lotus court found that the commands at issue \nthere (copy, print, etc.) were not creative, but it is undis-\nputed here that the declaring code and the structure and \norganization  of  the  API  packages  are  both  creative  and \noriginal.    Finally,  while  the  court  in  Lotus  found  the \ncommands  at  issue  were  \u201cessential  to  operating\u201d  the \nsystem,  it  is  undisputed  that\u2014other  than  perhaps  as  to \nthe three core packages\u2014Google did not need to copy the \nstructure,  sequence,  and  organization  of  the  Java  API \npackages to write programs in the Java language.   \n\nMore importantly, however, the Ninth Circuit has not \nadopted  the  court\u2019s  \u201cmethod  of  operation\u201d  reasoning  in \nLotus,  and  we  conclude  that  it  is  inconsistent  with  bind-\ning precedent.11  Specifically, we find that Lotus is incon-\n\n                                            \n\n11   As  Oracle  points  out,  the  Ninth  Circuit  has  cited \nLotus  only  one  time,  on  a  procedural  issue.    See  Danjaq \n\n\f40 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nsistent  with  Ninth  Circuit  case  law  recognizing  that  the \nstructure,  sequence,  and  organization  of  a  computer \nprogram  is  eligible  for  copyright  protection  where  it \nqualifies as an expression of an idea, rather than the idea \nitself.    See  Johnson  Controls,  886  F.2d  at  1175-76.    And, \nwhile the court in Lotus held \u201cthat expression that is part \nof a \u2018method of operation\u2019 cannot be copyrighted,\u201d 49 F.3d \nat  818,  this  court\u2014applying  Ninth  Circuit  law\u2014reached \nthe  exact  opposite  conclusion,  finding  that  copyright \nprotects \u201cthe expression of [a] process or method,\u201d  Atari, \n975 F.2d at 839.   \n\nWe  find,  moreover,  that  the  hard  and  fast  rule  set \ndown  in  Lotus  and  employed  by  the  district  court  here\u2014\ni.e., that elements which perform a function can never be \ncopyrightable\u2014is  at  odds  with  the  Ninth  Circuit\u2019s  en-\ndorsement  of  the  abstraction-filtration-comparison  analy-\nsis  discussed  earlier.    As  the  Tenth  Circuit  concluded  in \nexpressly rejecting the Lotus \u201cmethod of operation\u201d analy-\nsis,  in  favor  of  the  Second  Circuit\u2019s  abstraction-filtration-\ncomparison  test,  \u201calthough  an  element  of  a  work  may  be \ncharacterized as a method of operation, that element may \nnevertheless  contain  expression  that  is  eligible  for  copy-\nright  protection.\u201d    Mitel,  124  F.3d  at  1372.    Specifically, \nthe  court  found  that  Section 102(b)  \u201cdoes  not  extinguish \nthe protection accorded a particular expression of an idea \nmerely  because  that  expression  is  embodied  in  a  method \nof operation at a higher level of abstraction.\u201d  Id.   \n\nOther courts agree that components of a program that \ncan  be  characterized  as  a  \u201cmethod  of  operation\u201d  may \n\n                                                                                                  \n\nLLC  v.  Sony  Corp.,  263  F.3d  942,  954  (9th  Cir.  2001) \n(citing Lotus for the proposition that delay \u201chas been held \npermissible, among other reasons, when it is necessitated \nby the exhaustion of remedies through the administrative \nprocess  .  .  .  when  it  is  used  to  evaluate  and  prepare  a \ncomplicated claim\u201d).   \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n41 \n\nnevertheless  be  copyrightable.    For  example,  the  Third \nCircuit  rejected  a  defendant\u2019s  argument  that  operating \nsystem programs are \u201cper se\u201d uncopyrightable because an \noperating system is a \u201cmethod of operation\u201d for a comput-\ner.  Apple Computer, Inc. v. Franklin Computer Corp., 714 \nF.2d  1240,  1250-52  (3d  Cir.  1983).    The  court  distin-\nguished  between  the  \u201cmethod  which  instructs  the  com-\nputer  to  perform  its  operating  functions\u201d  and  \u201cthe \ninstructions  themselves,\u201d  and  found  that  the  instructions \nwere  copyrightable.    Id.  at  1250-51.    In  its  analysis,  the \ncourt  noted:  \u201c[t]hat  the  words  of  a  program  are  used \nultimately in the implementation of a process should in no \nway  affect  their  copyrightability.\u201d    Id.  at  1252  (quoting \nCONTU Report at 21).  The court focused \u201con whether the \nidea  is  capable  of  various  modes  of  expression\u201d  and  indi-\ncated that, \u201c[i]f other programs can be written or created \nwhich perform the same function as [i]n Apple\u2019s operating \nsystem  program,  then  that  program  is  an  expression  of \nthe idea and hence copyrightable.\u201d  Id. at 1253.  Notably, \nno other circuit has adopted the First Circuit\u2019s \u201cmethod of \noperation\u201d analysis. \n\nCourts have likewise found that classifying a work as \na  \u201csystem\u201d  does  not  preclude  copyright  for  the  particular \nexpression  of  that  system.    See Toro  Co.  v.  R  &  R  Prods. \nCo.,  787  F.2d  1208,  1212  (8th  Cir.  1986)  (rejecting  the \ndistrict court\u2019s decision that \u201cappellant\u2019s parts numbering \nsystem  is  not  copyrightable  because  it  is  a  \u2018system\u2019\u201d  and \nindicating  that  Section  102(b)  does  not  preclude  protec-\ntion  for  the  \u201cparticular  expression\u201d  of  that  system);  see \nalso  Am.  Dental  Ass\u2019n  v.  Delta  Dental  Plans  Ass\u2019n,  126 \nF.3d  977,  980  (7th  Cir.  1997)  (\u201cA  dictionary  cannot  be \ncalled  a  \u2018system\u2019  just  because  new  novels  are  written \nusing words, all of which appear in the dictionary.  Nor is \nword-processing  software  a  \u2018system\u2019  just  because  it  has  a \ncommand structure for producing paragraphs.\u201d). \n\nHere,  the  district  court  recognized  that  the  SSO  \u201cre-\nsembles a taxonomy,\u201d but found that \u201cit is nevertheless a \n\n\f42 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\ncommand  structure,  a  system  or  method  of  operation\u2014a \nlong  hierarchy  of  over  six  thousand  commands  to  carry \nout  pre-assigned  functions.\u201d  Copyrightability  Decision, \n872 F. Supp. 2d at 999-1000.12  In other words, the court \nconcluded  that,  although  the  SSO  is  expressive,  it  is  not \ncopyrightable  because  it  is  also  functional.    The  problem \nwith  the  district  court\u2019s  approach  is  that  computer  pro-\ngrams are by definition functional\u2014they are all designed \nto accomplish some task.  Indeed, the statutory definition \nof  \u201ccomputer  program\u201d  acknowledges  that  they  function \n\u201cto  bring  about  a  certain  result.\u201d    See  17  U.S.C.  \u00a7 101 \n(defining a \u201ccomputer program\u201d as \u201ca set of statements or \ninstructions to be used directly or indirectly in a computer \nin  order  to  bring  about  a  certain  result\u201d).    If  we  were  to \naccept  the  district  court\u2019s  suggestion  that  a  computer \nprogram  is  uncopyrightable  simply  because  it  \u201ccarr[ies] \nout  pre-assigned  functions,\u201d  no  computer  program  is \nprotectable.    That  result  contradicts  Congress\u2019s  express \nintent  to  provide  copyright  protection  to  computer  pro-\ngrams,  as  well  as  binding  Ninth  Circuit  case  law  finding \ncomputer  programs  copyrightable,  despite  their  utilitari-\nan or functional purpose.  Though the trial court did add \nthe  caveat  that  it  \u201cdoes  not  hold  that  the  structure,  se-\nquence and organization of all computer programs may be \nstolen,\u201d  Copyrightability  Decision,  872  F.  Supp.  2d  at \n1002, it is hard to see how its method of operation analy-\nsis could lead to any other conclusion.   \n\nWhile  it  does  not  appear  that  the  Ninth  Circuit  has \naddressed  the  precise  issue,  we  conclude  that  a  set  of \ncommands  to  instruct  a  computer  to  carry  out  desired \n\n                                            \n\n12   This  analogy  by  the  district  court  is  meaningful \nbecause  taxonomies,  in  varying  forms,  have  generally \nbeen deemed copyrightable.  See, e.g., Practice Mgmt. Info. \nCorp.  v.  Am.  Med.  Ass\u2019n,  121  F.3d  516,  517-20  (9th  Cir. \n1997); Am. Dental, 126 F.3d at 978-81. \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n43 \n\noperations  may  contain  expression  that  is  eligible  for \ncopyright  protection.    See  Mitel,  124  F.3d  at  1372.    We \nagree  with  Oracle  that,  under  Ninth  Circuit  law,  an \noriginal  work\u2014even  one  that  serves  a  function\u2014is  enti-\ntled  to  copyright  protection  as  long  as  the  author  had \nmultiple  ways  to  express  the  underlying  idea.    Section \n102(b) does not, as Google seems to suggest, automatically \ndeny  copyright  protection  to  elements  of  a  computer \nprogram  that  are  functional.    Instead,  as  noted,  Sec-\ntion 102(b) codifies the idea/expression dichotomy and the \nlegislative  history  confirms  that,  among  other  things, \nSection  102(b)  was  \u201cintended  to  make  clear  that  the \nexpression adopted by the programmer is the copyrighta-\nble element in a computer program.\u201d  H.R. Rep. No. 1476, \n94th  Cong.,  2d  Sess.  54,  reprinted  in  1976  U.S.C.C.A.N. \n5659, 5670.  Therefore, even if an element directs a com-\nputer  to  perform  operations,  the  court  must  nevertheless \ndetermine  whether  it  contains  any  separable  expression \nentitled to protection.   \n\nOn appeal, Oracle does not\u2014and concedes that it can-\nnot\u2014claim copyright in the idea of organizing functions of \na  computer  program  or  in  the  \u201cpackage-class-method\u201d \norganizational  structure  in  the  abstract.    Instead,  Oracle \nclaims  copyright  protection  only  in  its  particular  way  of \nnaming  and  organizing  each  of  the  37  Java  API  packag-\nes.13    Oracle  recognizes,  for  example,  that  it  \u201ccannot \ncopyright  the  idea  of  programs  that  open  an  internet \n\n                                            \n\n13   At  oral  argument,  counsel  for  Oracle  explained \nthat  it  \u201cwould  never  claim  that  anyone  who  uses  a  pack-\nage-class-method  manner  of  classifying  violates  our \ncopyright.  We don\u2019t own every conceivable way of organ-\nizing,  we  own  only  our  specific  expression\u2014our  specific \nway  of  naming  each  of  these  362  methods,  putting  them \ninto  36  classes,  and  20  subclasses.\u201d    Oral  Argument  at \n16:44.   \n\n\f44 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nconnection,\u201d  but  \u201cit  can  copyright  the  precise  strings  of \ncode  used  to  do  so,  at  least  so  long  as  \u2018other  language  is \navailable\u2019 to achieve the same function.\u201d  Appellant Reply \nBr.  13-14  (citation  omitted).    Thus,  Oracle  concedes  that \nGoogle and others could employ the Java language\u2014much \nlike anyone could employ the English language to write a \nparagraph  without  violating  the  copyrights  of  other \nEnglish  language writers.    And,  that  Google  may  employ \nthe  \u201cpackage-class-method\u201d  structure  much  like  authors \ncan  employ  the  same  rules  of  grammar  chosen  by  other \nauthors  without  fear  of  infringement.    What  Oracle  con-\ntends is that, beyond that point, Google, like any author, \nis not permitted to employ the precise phrasing or precise \nstructure  chosen  by  Oracle  to  flesh  out  the  substance  of \nits packages\u2014the details and arrangement of the prose.   \n\nAs the district court acknowledged, Google could have \nstructured  Android  differently  and  could  have  chosen \ndifferent ways to express and implement the functionality \nthat  it  copied.14    Specifically,  the  court  found  that  \u201cthe \n\n                                            \n\n14   Amici McNealy and Sutphin explain that \u201ca quick \nexamination  of  other  programming  environments  shows \nthat  creators  of  other  development  platforms  provide  the \nsame  functions  with  wholly  different  creative  choices.\u201d  \nBr. of McNealy and Sutphin 17.  For example, in Java, a \ndeveloper  setting  the  time  zone  would  call  the  \u201csetTime-\nZone\u201d  method  within  the  \u201cDateFormat\u201d  class  of  the  ja-\nva.text  package.    Id.    Apple\u2019s  iOS  platform,  on  the  other \nhand,  \u201cdevotes  an  entire  class  to  set  the  time  zone  in  an \napplication\u2014the  \u2018NSTimeZone\u2019  class\u201d  which  is  in  the \n\u201cFoundation  framework.\u201d    Id.  at  17-18  (noting  that  a \n\u201cframework is Apple\u2019s terminology for a structure concep-\ntually  similar  to  Java\u2019s  \u2018package\u2019\u201d).    Microsoft  provides \nsimilar functionality with \u201can entirely different structure, \nnaming scheme, and selection.\u201d  Id. at 18 (\u201cIn its Windows \nPhone  development  platform,  Microsoft  stores  its  time \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n45 \n\nvery  same  functionality  could  have  been  offered  in  An-\ndroid  without  duplicating  the  exact  command  structure \nused in Java.\u201d  Copyrightability Decision, 872 F. Supp. 2d \nat  976.    The  court  further  explained  that  Google  could \nhave  offered  the  same  functions  in  Android  by  \u201cre-\narranging the various methods under different groupings \namong  the  various  classes  and  packages.\u201d    Id.    The  evi-\ndence showed, moreover, that Google designed many of its \nown  API  packages  from  scratch,  and,  thus,  could  have \ndesigned  its  own  corresponding  37  API  packages  if  it \nwanted to do so.   \n\nGiven the court\u2019s findings that the SSO is original and \ncreative,  and  that  the  declaring  code  could  have  been \nwritten  and  organized  in  any  number  of  ways  and  still \nhave  achieved  the  same  functions,  we  conclude  that \nSection 102(b)  does  not  bar  the  packages  from  copyright \nprotection just because they also perform functions.   \n\n3.  Google\u2019s Interoperability Arguments  \nare Irrelevant to Copyrightability \n\nOracle  also argues  that  the  district  court  erred  in  in-\n\nvoking  interoperability  in  its  copyrightability  analysis.  \nSpecifically,  Oracle  argues  that  Google\u2019s  interoperability \narguments  are  only  relevant,  if  at  all,  to  fair  use\u2014not  to \nthe question of whether the API packages are copyrighta-\nble.  We agree.  \n\nIn  characterizing  the  SSO  of  the  Java  API  packages \nas  a  \u201cmethod  of  operation,\u201d  the  district  court  explained \nthat \u201c[d]uplication of the command structure is necessary \nfor  interoperability.\u201d    Copyrightability  Decision,  872  F. \nSupp.  2d  at  977.    The  court  found  that,  \u201c[i]n  order  for  at \n\n                                                                                                  \n\nzone programs in the \u2018TimeZoneInfo\u2019 class in its \u2018Systems\u2019 \nnamespace  (Microsoft\u2019s  version  of  a  \u2018package\u2019  or  \u2018frame-\nwork\u2019).\u201d).    Again,  this  is  consistent  with  the  evidence \npresented at trial.  \n\n\f46 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nleast  some  of  [the  pre-Android  Java]  code  to  run  on  An-\ndroid,  Google  was  required  to  provide  the  same  ja-\nva.package.Class.method()  command  system  using  the \nsame names with the same \u2018taxonomy\u2019 and with the same \nfunctional specifications.\u201d  Id. at 1000 (emphasis omitted).  \nAnd,  the  court  concluded  that  \u201cGoogle  replicated  what \nwas necessary to achieve a degree of interoperability\u2014but \nno  more,  taking  care,  as  said  before,  to  provide  its  own \nimplementations.\u201d    Id.    In  reaching  this  conclusion,  the \ncourt  relied  primarily  on  two  Ninth  Circuit  decisions: \nSega Enterprises v. Accolade, Inc., 977 F.2d 1510 (9th Cir. \n1992),  and  Sony  Computer  Entertainment,  Inc.  v.  Con-\nnectix, Corp., 203 F.3d 596 (9th Cir. 2000).   \n\nBoth Sega and Sony are fair use cases in which copy-\nrightability was addressed only tangentially.  In Sega, for \nexample,  Sega  manufactured  a  video  game  console  and \ngame  cartridges  that  contained  hidden  functional  pro-\ngram  elements  necessary  to  achieve  compatibility  with \nthe  console.    Defendant  Accolade:  (1) reverse-engineered \nSega\u2019s video game programs to discover the requirements \nfor  compatibility;  and  (2) created  its  own  games  for  the \nSega  console.    Sega, 977 F.2d  at 1514-15.   As  part  of  the \nreverse-engineering  process,  Accolade  made  intermediate \ncopies  of  object  code  from  Sega\u2019s  console.    Id.    Although \nthe  court  recognized  that  the  intermediate  copying  of \ncomputer code may infringe Sega\u2019s copyright, it concluded \nthat  \u201cdisassembly  of  copyrighted  object  code  is,  as  a \nmatter  of  law,  a  fair  use  of  the  copyrighted  work  if  such \ndisassembly  provides  the  only  means  of  access  to  those \nelements  of  the  code  that  are  not  protected  by  copyright \nand  the  copier  has  a  legitimate  reason  for  seeking  such \naccess.\u201d  Id. at 1518.  The court agreed with Accolade that \nits  copying  was  necessary  to  examine  the  unprotected \nfunctional  aspects  of  the  program.    Id.  at  1520.    And, \nbecause  Accolade  had  a  legitimate  interest  in  making  its \ncartridges compatible with Sega\u2019s console, the court found \nthat Accolade\u2019s intermediate copying was fair use.  \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n47 \n\nLikewise,  in  Sony,  the  Ninth  Circuit  found  that  the \ndefendant\u2019s reverse engineering and intermediate copying \nof Sony\u2019s copyrighted software program \u201cwas a fair use for \nthe purpose of gaining access to the unprotected elements \nof  Sony\u2019s  software.\u201d    Sony,  203  F.3d  at  602.    The  court \nexplained that Sony\u2019s software program contained unpro-\ntected  functional  elements  and  that  the  defendant  could \nonly  access  those  elements  through  reverse  engineering.  \nId. at 603.  The defendant used that information to create \na  software  program  that  let  consumers  play  games  de-\nsigned for Sony\u2019s PlayStation console on their computers.  \nNotably,  the  defendant\u2019s  software  program  did  not  con-\ntain any of Sony\u2019s copyrighted material.  Id. at 598.   \n\nThe  district  court  characterized  Sony  and  Sega  as \n\u201cclose  analogies\u201d  to  this  case.    Copyrightability  Decision, \n872  F.  Supp.  2d  at  1000.    According  to  the  court,  both \ndecisions \u201cheld that interface procedures that were neces-\nsary to duplicate in order to achieve interoperability were \nfunctional  aspects  not  copyrightable  under  Section \n102(b).\u201d    Id.    The  district  court\u2019s  reliance  on  Sega  and \nSony  in  the  copyrightability  context  is  misplaced,  howev-\ner.   \n\nAs noted, both cases were focused on fair use, not cop-\nyrightability.  In Sega, for example, the only question was \nwhether  Accolade\u2019s  intermediate  copying  was  fair  use.  \nThe court never addressed the question of whether Sega\u2019s \nsoftware  code,  which  had  functional  elements,  also  con-\ntained  separable  creative  expression  entitled  to  protec-\ntion.    Likewise,  although  the  court  in  Sony  determined \nthat Sony\u2019s computer program had functional elements, it \nnever addressed whether it also had expressive elements.  \nSega and Sony are also factually distinguishable because \nthe defendants in those cases made intermediate copies to \nunderstand  the  functional  aspects  of  the  copyrighted \nworks and then created new products.  See Sony, 203 F.3d \nat  606-07;  Sega,  977  F.2d  at  1522-23.    This  is  not  a  case \nwhere  Google  reverse-engineered  Oracle\u2019s  Java  packages \n\n\f48 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nto  gain  access  to  unprotected  functional  elements  con-\ntained  therein.    As  the  former  Register  of  Copyrights  of \nthe  United  States  pointed  out  in  his  brief  amicus  curiae, \n\u201c[h]ad  Google  reverse  engineered  the  programming  pack-\nages to figure out the ideas and functionality of the origi-\nnal, and then created its own structure and its own literal \ncode,  Oracle  would  have  no  remedy  under  copyright \nwhatsoever.\u201d    Br.  for  Amicus  Curiae  Ralph  Oman  29.  \nInstead, Google chose to copy both the declaring code and \nthe overall SSO of the 37 Java API packages at issue.   \n\nWe  disagree  with  Google\u2019s  suggestion  that  Sony  and \nSega created an \u201cinteroperability exception\u201d to copyright-\nability.  See Appellee Br. 39 (citing Sony and Sega for the \nproposition  that  \u201ccompatibility  elements  are  not  copy-\nrightable  under  section  102(b)\u201d  (emphasis  omitted)).  \nAlthough  both  cases  recognized  that  the  software  pro-\ngrams  at  issue  there  contained  unprotected  functional \nelements, a determination that some elements are unpro-\ntected is not the same as saying that the entire work loses \ncopyright  protection.    To  accept  Google\u2019s  reading  would \ncontradict  Ninth  Circuit  case  law  recognizing  that  both \nthe  literal  and  non-literal  components  of  a  software \nprogram  are  eligible  for  copyright  protection.    See  John-\nson  Controls,  886  F.2d  at  1175.    And  it  would  ignore  the \nfact  that  the  Ninth  Circuit  endorsed  the  abstraction-\nfiltration-comparison inquiry in Sega itself. \n\nAs  previously  discussed,  a  court  must  examine  the \nsoftware  program  to  determine  whether  it  contains  crea-\ntive expression that can be separated from the underlying \nfunction.  See Sega, 977 F.2d at 1524-25.  In doing so, the \ncourt  filters  out  the  elements  of  the  program  that  are \n\u201cideas\u201d as well as elements that are \u201cdictated by consider-\nations  of  efficiency,  so  as  to  be  necessarily  incidental  to \nthat  idea;  required  by  factors  external  to  the  program \nitself.\u201d  Altai, 982 F.2d at 707.   \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n49 \n\nTo determine \u201cwhether certain aspects of an allegedly \ninfringed software are not protected by copyright law, the \nfocus  is  on  external  factors  that  influenced  the  choice  of \nthe  creator  of  the  infringed  product.\u201d    Dun  &  Bradstreet \nSoftware  Servs.,  Inc.  v.  Grace  Consulting,  Inc.,  307  F.3d \n197,  215  (3d  Cir.  2002)  (citing  Altai,  982  F.2d  at  714; \nMitel, 124 F.3d at 1375).  The Second Circuit, for example, \nhas  noted  that  programmers  are  often  constrained  in \ntheir  design  choices  by  \u201cextrinsic  considerations\u201d  includ-\ning  \u201cthe  mechanical  specifications  of  the  computer  on \nwhich a particular program is intended to run\u201d and \u201ccom-\npatibility  requirements  of  other  programs  with  which  a \nprogram is designed to operate in conjunction.\u201d  Altai, 982 \nF.2d  at  709-10  (citing  3  Melville  B.  Nimmer  &  David \nNimmer,  Nimmer  on  Copyright  \u00a7 13.01  at  13-66-71 \n(1991)).    The  Ninth  Circuit  has  likewise  recognized  that: \n(1) computer  programs  \u201ccontain  many  logical,  structural, \nand  visual  display  elements  that  are  dictated  by  .  .  . \nexternal  factors  such  as  compatibility  requirements  and \nindustry  demands\u201d;  and  (2) \u201c[i]n  some  circumstances, \neven the exact set of commands used by the programmer \nis deemed functional rather than creative for purposes of \ncopyright.\u201d    Sega,  977  F.2d  at  1524  (internal  citation \nomitted).  \n\nBecause  copyrightability  is  focused  on  the  choices \navailable  to  the  plaintiff  at  the  time  the  computer  pro-\ngram was created, the relevant compatibility inquiry asks \nwhether the plaintiff\u2019s choices were dictated by a need to \nensure that its program worked with existing third-party \nprograms.    Dun  &  Bradstreet,  307  F.3d  at  215;  see  also \nAtari,  975  F.2d  at  840  (\u201cExternal  factors  did  not  dictate \nthe  design  of  the  10NES  program.\u201d).    Whether  a  defend-\nant  later  seeks  to  make  its  program  interoperable  with \nthe  plaintiff\u2019s  program  has  no  bearing  on  whether  the \nsoftware  the  plaintiff  created  had  any  design  limitations \ndictated  by  external  factors.    See  Dun  &  Bradstreet,  307 \nF.3d  at  215  (finding an  expert\u2019s  testimony  on  interopera-\n\n\f50 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nbility \u201cwholly misplaced\u201d because he \u201clooked at externali-\nties  from  the  eyes  of  the  plagiarist,  not  the  eyes  of  the \nprogram\u2019s creator\u201d).  Stated differently, the focus is on the \ncompatibility needs and programming choices of the party \nclaiming  copyright  protection\u2014not  the  choices  the  de-\nfendant made to achieve compatibility with the plaintiff\u2019s \nprogram.    Consistent  with  this  approach,  courts  have \nrecognized that, once the plaintiff creates a copyrightable \nwork,  a  defendant\u2019s  desire  \u201cto  achieve  total  compatibil-\nity . . .  is  a  commercial  and  competitive  objective  which \ndoes  not  enter  into  the  .  .  .  issue  of  whether  particular \nideas  and  expressions  have  merged.\u201d    Apple  Computer, \n714 F.2d at 1253. \n\nGiven  this  precedent,  we  conclude  that  the  district \ncourt  erred  in  focusing  its  interoperability  analysis  on \nGoogle\u2019s desires for its Android software.  See Copyrighta-\nbility Decision, 872 F. Supp. 2d at 1000 (\u201cGoogle replicat-\nto  achieve  a  degree  of \ned  what  was  necessary \ninteroperability\u201d  with  Java.).    Whether  Google\u2019s  software \nis  \u201cinteroperable\u201d  in  some  sense  with  any  aspect  of  the \nJava platform (although as Google concedes, certainly not \nwith the JVM) has no bearing on the threshold question of \nwhether  Oracle\u2019s  software  is  copyrightable.    It  is  the \ninteroperability  and  other  needs  of  Oracle\u2014not  those  of \nGoogle\u2014that  apply  in  the  copyrightability  context,  and \nthere  is  no  evidence  that  when  Oracle  created  the  Java \nAPI  packages  at  issue  it  did  so  to  meet  compatibility \nrequirements of other pre-existing programs.   \n\nGoogle  maintains  on  appeal  that  its  use  of  the  \u201cJava \nclass  and  method  names  and  declarations  was  \u2018the  only \nand  essential  means\u2019  of  achieving  a  degree  of  interopera-\nbility  with  existing  programs  written  in  the  [Java  lan-\nguage].\u201d    Appellee  Br.  49.    Indeed,  given  the  record \nevidence  that  Google  designed  Android  so  that  it  would \nnot  be  compatible  with  the  Java  platform,  or  the  JVM \nspecifically,  we  find  Google\u2019s  interoperability  argument \nconfusing.    While  Google  repeatedly  cites  to  the  district \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n51 \n\ncourt\u2019s  finding  that  Google  had  to  copy  the  packages  so \nthat an app written in Java could run on Android, it cites \nto no evidence in the record that any such app exists and \npoints to no Java apps that either pre-dated or post-dated \nAndroid  that  could  run  on  the  Android  platform.15    The \ncompatibility  Google  sought  to  foster  was  not  with  Ora-\ncle\u2019s  Java  platform  or  with  the  JVM  central  to  that  plat-\nform.    Instead,  Google  wanted  to  capitalize  on  the  fact \nthat software developers were already trained and experi-\nenced  in  using  the  Java  API  packages  at  issue.    The \ndistrict  court  agreed,  finding  that,  as  to  the  37  Java  API \npackages, \u201cGoogle believed Java application programmers \nwould  want  to  find  the  same  37  sets  of  functionalities  in \nthe  new  Android  system  callable  by  the  same  names  as \nused in Java.\u201d  Copyrightability Decision, 872 F. Supp. 2d \nat  978.   Google\u2019s  interest  was  in  accelerating  its  develop-\nment process by \u201cleverag[ing] Java for its existing base of \ndevelopers.\u201d    J.A.  2033,  2092.    Although  this  competitive \nobjective  might  be  relevant  to  the  fair  use  inquiry,  we \nconclude  that  it  is  irrelevant  to  the  copyrightability  of \nOracle\u2019s declaring code and organization of the API pack-\nages.   \n\nFinally, to the extent Google suggests that it was enti-\ntled  to  copy  the  Java  API  packages  because  they  had \n\n                                            \n\n15   During  oral  argument,  Google\u2019s  counsel  stated \nthat \u201ca program written in the Java language can run on \nAndroid  if  it\u2019s  only  using  packages  within  the  37.    So  if \nI\u2019m a developer and I have written a program, I\u2019ve written \nit in Java, I can stick an Android header on it and it will \nrun in Android because it is using the identical names of \nthe  classes,  methods,  and  packages.\u201d    Oral  Argument  at \n31:31.    Counsel  did  not  identify  any  programs  that  use \nonly  the  37  API  packages  at  issue,  however,  and  did  not \nattest  that  any  such  program  would  be  useful.    Nor  did \nGoogle cite to any record evidence to support this claim.  \n\n\f52 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nbecome  the  effective  industry  standard,  we  are  unper-\nsuaded.    Google  cites  no  authority  for  its  suggestion  that \ncopyrighted  works  lose  protection  when  they  become \npopular,  and  we  have  found  none.16    In  fact,  the  Ninth \nCircuit  has  rejected  the  argument  that  a  work  that  later \nbecomes  the  industry  standard  is  uncopyrightable.    See \nPractice  Mgmt.  Info.  Corp.  v.  Am.  Med.  Ass\u2019n,  121  F.3d \n516, 520 n.8 (9th Cir. 1997) (noting that the district court \nfound  plaintiff\u2019s  medical  coding  system  entitled  to  copy-\nright  protection,  and  that,  although  the  system  had \nbecome the industry standard, plaintiff\u2019s copyright did not \nprevent  competitors  \u201cfrom  developing  comparative  or \nbetter  coding  systems  and  lobbying  the  federal  govern-\nment  and  private  actors  to  adopt  them.    It  simply  pre-\nvents  wholesale  copying  of  an  existing  system.\u201d).    Google \nwas  free  to  develop  its  own  API  packages  and  to  \u201clobby\u201d \nprogrammers  to  adopt  them.    Instead,  it  chose  to  copy \n\n                                            \n\n16   Google  argues  that,  in  the  same  way  a  formerly \ndistinctive  trademark  can  become  generic  over  time,  a \nprogram  element  can  lose  copyright  protection  when  it \nbecomes  an  industry  standard.    But  \u201cit  is  to  be  expected \nthat  phrases  and  other  fragments  of  expression  in  a \nhighly successful copyrighted work will become part of the \nlanguage.  That does not mean they lose all protection in \nthe  manner  of  a  trade  name  that  has  become  generic.\u201d  \nWarner  Bros.,  Inc.  v.  Am.  Broadcasting  Cos.,  720  F.2d \n231,  242  (2d  Cir.  1983)  (\u201cNo  matter  how  well  known  a \ncopyrighted  phrase  becomes,  its  author  is  entitled  to \nguard  against  its  appropriation  to  promote  the  sale  of \ncommercial  products.\u201d).    Notably,  even  when  a  patented \nmethod  or  system  becomes  an  acknowledged  industry \nstandard  with  acquiescence  of  the  patent  owner,  any \npermissible use generally requires payment of a reasona-\nble royalty, which Google refused to do here.  See general-\nly In re Innovatio IP Ventures, LLC, No. 11-C-9308, 2013 \nU.S. Dist. LEXIS 144061 (N.D. Ill. Sept. 27, 2013).  \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n53 \n\nOracle\u2019s  declaring  code  and  the  SSO  to  capitalize  on  the \npreexisting  community  of  programmers  who  were  accus-\ntomed  to  using  the  Java  API  packages.    That  desire  has \nnothing to do with copyrightability.  For these reasons, we \nfind  that  Google\u2019s  industry  standard  argument  has  no \nbearing on the copyrightability of Oracle\u2019s work.  \n\nB.  Fair Use  \n\nAs  noted,  the  jury  hung  on  Google\u2019s  fair  use  defense, \nand  the  district  court  declined  to  order  a  new  trial  given \nits  conclusion  that  the  code  and  structure  Google  copied \nwere  not  entitled  to  copyright  protection.    On  appeal, \nOracle  argues  that:  (1) a  remand  to  decide  fair  use  \u201cis \npointless\u201d;  and  (2) this  court  should  find,  as  a  matter  of \nlaw,  that  \u201cGoogle\u2019s  commercial  use  of  Oracle\u2019s  work  in  a \nmarket where Oracle already competed was not fair use.\u201d  \nAppellant Br. 68. \n\nFair  use  is  an  affirmative  defense  to  copyright  in-\nfringement and is codified in Section 107 of the Copyright \nAct.    Golan,  132  S.  Ct.  at  890  (\u201c[T]he  fair  use  defense,  is \ncodified at 17 U.S.C. \u00a7 107.\u201d).  Section 107 permits use of \ncopyrighted  work  if  it  is  \u201cfor  purposes  such  as  criticism, \ncomment,  news  reporting,  teaching  (including  multiple \ncopies  for  classroom  use),  scholarship,  or  research.\u201d    17 \nU.S.C.  \u00a7 107.    The  fair  use  doctrine  has  been  referred  to \nas \u201c\u2018the most troublesome in the whole law of copyright.\u2019\u201d  \nMonge v. Maya Magazines, Inc., 688 F.3d 1164, 1170 (9th \nCir.  2012)  (quoting  Dellar  v.  Samuel  Goldwyn,  Inc.,  104 \nF.2d  661,  662  (2d  Cir.  1939)  (per  curiam)).    It  both  per-\nmits and requires \u201ccourts to avoid rigid application of the \ncopyright  statute  when,  on  occasion,  it  would  stifle  the \nvery  creativity  which  that  law  is  designed  to  foster.\u201d \nCampbell  v.  Acuff-Rose  Music,  Inc.,  510  U.S.  569,  577 \n(1994)  (quoting  Stewart  v.  Abend,  495  U.S.  207,  236 \n(1990)).   \n\n\u201cSection  107  requires  a  case-by-case  determination \nwhether a particular use is fair, and the statute notes four \n\n\f54 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nnonexclusive  factors  to  be  considered.\u201d    Harper  &  Row \nPublishers,  Inc.  v.  Nation  Enters.,  471  U.S.  539,  549 \n(1985).    Those  factors  are:  (1) \u201cthe  purpose  and  character \nof the use, including whether such use is of a commercial \nnature  or  is  for  nonprofit  educational  purposes;\u201d  (2) \u201cthe \nnature  of  the  copyrighted  work;\u201d  (3) \u201cthe  amount  and \nsubstantiality  of  the portion  used  in  relation  to  the  copy-\nrighted  work  as  a  whole;\u201d  and  (4) \u201cthe  effect  of  the  use \nupon the potential market for or value of the copyrighted \nwork.\u201d    17  U.S.C.  \u00a7 107.    The  Supreme  Court  has  ex-\nplained  that  all  of  the  statutory  factors  \u201care  to  be  ex-\nplored,  and  the  results  weighed  together,  in  light  of  the \npurpose[]  of  copyright,\u201d  which  is  \u201c[t]o  promote  the  Pro-\ngress  of  Science  and useful  Arts.\u201d    Campbell,  510  U.S. at \n578, 575 (internal citations omitted).   \n\n\u201cFair use is a mixed question of law and fact.\u201d  Harper \n&  Row,  471  U.S.  at  560.    Thus,  while  subsidiary  and \ncontroverted  findings  of  fact  must  be  reviewed  for  clear \nerror  under  Rule  52  of  the  Federal  Rules  of  Civil  Proce-\ndure,  the  Ninth  Circuit  reviews  the  ultimate  application \nof those facts de novo.  See Seltzer v. Green Day, Inc., 725 \nF.3d 1170, 1175 (9th Cir. 2013) (citing SOFA Entm\u2019t, Inc. \nv.  Dodger  Prods.,  Inc.,  709  F.3d  1273,  1277  (9th  Cir. \n2013)).    Where  there  are  no  material  facts  at  issue  and \n\u201cthe  parties  dispute  only  the  ultimate  conclusions  to  be \ndrawn  from  those  facts,  we  may  draw  those  conclusions \nwithout  usurping  the  function  of  the  jury.\u201d    Id.  (citing \nFisher v. Dees, 794 F.2d 432, 436 (9th Cir. 1986)).  Indeed, \nthe  Supreme  Court  has  specifically  recognized  that, \n\u201c[w]here  the  district  court  has  found  facts  sufficient  to \nevaluate  each  of  the  statutory  factors,  an  appellate  court \n\u2018need  not  remand  for  further  factfinding  .  .  .  [but]  may \nconclude  as  a  matter  of  law  that  [the  challenged  use] \n[does]  not  qualify  as  a  fair  use  of  the  copyrighted  work.\u2019\u201d  \nHarper & Row, 471 U.S. at 560 (citation omitted). \n\nOf course, the corollary to this point is true as well\u2014\nwhere there are material facts in dispute and those facts \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n55 \n\nhave  not  yet  been  resolved  by  the  trier  of  fact,  appellate \ncourts may not make findings of fact in the first instance.  \nSee  Shawmut  Bank,  N.A.  v.  Kress  Assocs.,  33  F.3d  1477, \n1504 (9th Cir. 1994) (\u201c[W]e must avoid finding facts in the \nfirst  instance.\u201d);  see  also  Golden  Bridge  Tech.,  Inc.  v. \nNokia, Inc., 527 F.3d 1318, 1323 (Fed. Cir. 2008) (\u201cAppel-\nlate courts review district court judgments; we do not find \nfacts.\u201d).    Here,  it  is  undisputed  that  neither  the  jury  nor \nthe  district  court  made  findings  of  fact  to  which  we  can \nrefer in assessing the question of whether Google\u2019s use of \nthe  API  packages  at  issue  was  a  \u201cfair  use\u201d  within  the \nmeaning  of  Section  107.    Oracle  urges  resolution  of  the \nfair  use  question  by  arguing  that  the  trial  court  should \nhave decided the question as a matter of law based on the \nundisputed facts developed at trial, and that we can do so \nas  well.    Google,  on  the  other  hand,  argues  that  many \ncritical facts regarding fair use are in dispute.  It asserts \nthat the fact that the jury could not reach a resolution on \nthe fair use defense indicates that at least some presuma-\nbly reasonable jurors found its use to be fair.  And, Google \nasserts that, even if it is true that the district court erred \nin discussing concepts of \u201cinteroperability\u201d when consider-\ning copyrightability, those concepts are still relevant to its \nfair use defense.  We turn first to a more detailed exami-\nnation of fair use.   \n\nThe  first  factor  in  the  fair  use  inquiry  involves  \u201cthe \npurpose and character of the use, including whether such \nuse  is  of  a  commercial  nature  or  is  for  nonprofit  educa-\ntional purposes.\u201d  17 U.S.C. \u00a7 107(1).  This factor involves \ntwo  sub-issues:  (1) \u201cwhether  and  to  what  extent  the  new \nwork is transformative,\u201d Campbell, 510 U.S. at 579 (cita-\ntion  and \ninternal  quotation  marks  omitted);  and \n(2) whether the use serves a commercial purpose.   \n\nA  use  is  \u201ctransformative\u201d  if  it  \u201cadds  something  new, \nwith a further purpose or different character, altering the \nfirst with new expression, meaning or message.\u201d Id.   The \ncritical  question  is  \u201cwhether  the  new  work  merely  super-\n\n\f56 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nsede[s]  the  objects  of  the  original  creation  .  .  .  or  instead \nadds  something  new.\u201d    Id.  (citations  and  internal  quota-\ntion marks omitted).  This inquiry \u201cmay be guided by the \nexamples  given  in  the  preamble  to  \u00a7 107,  looking  to \nwhether  the  use  is  for  criticism,  or  comment,  or  news \nreporting,  and  the  like.\u201d    Id.  at  578-79.    \u201cThe  Supreme \nCourt has recognized that parodic works, like other works \nthat  comment  and  criticize,  are  by  their  nature  often \nsufficiently transformative to fit clearly under the fair use \nexception.\u201d    Mattel  Inc.  v.  Walking  Mountain  Prods.,  353 \nF.3d 792, 800 (9th Cir. 2003) (citing Campbell, 510 U.S. at \n579). \n\nCourts have described new works as \u201ctransformative\u201d \nwhen  \u201cthe  works  use  copy-righted  material  for  purposes \ndistinct from the purpose of the original material.\u201d  Elvis \nPresley  Enters.,  Inc.  v.  Passport  Video,  349  F.3d  622, 629 \n(9th  Cir.  2003)  (\u201cHere,  Passport\u2019s  use  of  many  of  the \ntelevision clips is transformative because they are cited as \nhistorical  reference  points  in  the  life  of  a  remarkable \nentertainer.\u201d),  overruled  on  other  grounds  by  Flexible \nLifeline Sys., Inc. v. Precision Lift, Inc., 654 F.3d 989, 995 \n(9th Cir. 2011) (per curiam); see also Bouchat v. Baltimore \nRavens  Ltd.  P\u2019ship,  619  F.3d  301,  309-10  (4th  Cir.  2010) \n(quoting A.V. ex rel. Vanderhyge v. iParadigms, LLC, 562 \nF.3d  630,  638  (4th  Cir.  2009)  (\u201c[A]  transformative  use  is \none that \u2018employ[s] the quoted matter in a different man-\nner or for a different purpose from the original.\u2019\u201d)).  \u201cA use \nis  considered  transformative  only  where  a  defendant \nchanges  a  plaintiff\u2019s  copyrighted  work  or  uses  the  plain-\ntiff\u2019s copyrighted work in a different context such that the \nplaintiff\u2019s  work  is  transformed  into  a  new  creation.\u201d  \nPerfect 10, Inc. v. Amazon.com, Inc., 508 F.3d 1146, 1165 \n(9th  Cir.  2007)  (quoting  Wall  Data  Inc.  v.  L.A.  County \nSheriff\u2019s  Dep\u2019t,  447  F.3d  769,  778  (9th  Cir.  2006),  and \nfinding  that  Google\u2019s  use  of  thumbnail  images  in  its \nsearch engine was \u201chighly transformative\u201d).   \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n57 \n\nA  work  is  not  transformative  where  the  user  \u201cmakes \nno  alteration  to  the  expressive  content  or  message  of  the \noriginal  work.\u201d    Seltzer,  725  F.3d  at  1177;  see  also  Wall \nData, 447 F.3d at 778 (\u201cThe Sheriff\u2019s Department created \nexact  copies  of  RUMBA\u2019s  software.    It  then  put  those \ncopies  to  the  identical  purpose  as  the  original  software.  \nSuch a use cannot be considered transformative.\u201d); Monge, \n688 F.3d at 1176 (finding that a magazine\u2019s publication of \nphotographs of a secret celebrity wedding \u201csprinkled with \nwritten commentary\u201d was \u201cat best minimally transforma-\ntive\u201d  where  the  magazine  \u201cdid  not  transform  the  photos \ninto a new work . . . or incorporate the photos as part of a \nbroader  work\u201d);  Elvis  Presley  Enters.,  349  F.3d  at  629 \n(finding  that  use  of  copyrighted  clips  of  Elvis\u2019s  television \nappearances  was  not  transformative  where  \u201csome  of  the \nclips [we]re played without much interruption, if any . . . \n[and]  instead  serve[d]  the  same  intrinsic  entertainment \nvalue that is protected by Plaintiffs\u2019 copyrights.\u201d).  Where \nthe use \u201cis for the same intrinsic purpose as [the copyright \nholder\u2019s]  .  .  .  such  use  seriously  weakens  a  claimed  fair \nuse.\u201d  Worldwide Church of God v. Phila. Church of God, \nInc.,  227  F.3d  1110,  1117  (9th  Cir.  2000)  (quoting  Weiss-\nmann v. Freeman, 868 F.2d 1313, 1324 (2d Cir. 1989)).  \n\nAnalysis  of  the  first  factor  also  requires  inquiry  into \nthe commercial nature of the use.  Use of the copyrighted \nwork that is commercial \u201ctends to weigh against a finding \nof fair use.\u201d  Harper & Row, 471 U.S. at 562 (\u201cThe crux of \nthe  profit/nonprofit  distinction  is  not  whether  the  sole \nmotive  of  the  use  is  monetary  gain  but  whether  the  user \nstands  to  profit  from  exploitation  of  the  copyrighted \nmaterial  without  paying  the  customary  price.\u201d).    \u201c[T]he \nmore  transformative  the  new  work,  the  less  will  be  the \nsignificance of other factors, like commercialism, that may \nweigh  against  a  finding  of  fair  use.\u201d    Campbell,  510  U.S. \nat 579.   \n\nThe  second  factor\u2014the  nature  of  the  copyrighted \nwork\u2014\u201ccalls for recognition that some works are closer to \n\n\f58 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nthe core of intended copyright protection than others, with \nthe consequence that fair use is more difficult to establish \nwhen  the  former  works  are  copied.\u201d    Id.  at  586.    This \nfactor  \u201cturns  on  whether  the  work  is  informational  or \ncreative.\u201d    Worldwide  Church  of  God,  227  F.3d  at  1118; \nsee also Harper & Row, 471 U.S. at 563 (\u201cThe law general-\nly recognizes a greater need to disseminate factual works \nthan  works  of  fiction  or  fantasy.\u201d).    Creative  expression \n\u201cfalls within the core of the copyright\u2019s protective purpos-\nes.\u201d    Campbell,  510  U.S.  at  586.    Because  computer  pro-\ngrams  have  both  functional  and  expressive  components, \nhowever, where the functional components are themselves \nunprotected (because, e.g., they are dictated by considera-\ntions  of  efficiency  or  other  external  factors),  those  ele-\nments  should  be  afforded  \u201ca  lower  degree  of  protection \nthan  more  traditional  literary works.\u201d    Sega,  977 F.2d  at \n1526.    Thus,  where  the  nature  of  the  work  is  such  that \npurely  functional  elements  exist  in  the  work  and  it  is \nnecessary  to  copy  the  expressive  elements  in  order  to \nperform  those  functions,  consideration  of  this  second \nfactor arguably supports a finding that the use is fair.   \n\nThe  third  factor  asks  the  court  to  examine  \u201cthe \namount and substantiality of the portion used in relation \nto  the  copyrighted  work  as  a  whole.\u201d    17  U.S.C.  \u00a7 107(3).  \nAnalysis  of  this  factor  is  viewed  in  the  context  of  the \ncopyrighted  work,  not  the  infringing  work.    Indeed,  the \nstatutory language makes clear that \u201ca taking may not be \nexcused merely because it is insubstantial with respect to \nthe  infringing  work.\u201d    Harper  &  Row,  471  U.S.  at  565.  \n\u201cAs  Judge  Learned  Hand  cogently  remarked,  \u2018no  plagia-\nrist  can  excuse  the  wrong  by  showing  how  much  of  his \nwork  he  did  not  pirate.\u2019\u201d  Id.  (quoting  Sheldon  v.  Metro-\nGoldwyn Pictures Corp., 81 F.2d 49, 56 (2d Cir. 1936)).  In \ncontrast,  \u201cthe  fact  that  a  substantial  portion  of  the  in-\nfringing  work  was  copied  verbatim  is  evidence  of  the \nqualitative value of the copied material, both to the origi-\nnator and to the plagiarist who seeks to profit from mar-\n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n59 \n\nketing  someone  else\u2019s  copyrighted  expression.\u201d    Id.    The \nNinth  Circuit  has  recognized  that,  while  \u201cwholesale \ncopying  does  not  preclude  fair  use  per  se,  copying  an \nentire  work  militates  against  a  finding  of  fair  use.\u201d  \nWorldwide  Church  of  God,  227  F.3d  at  1118  (internal \ncitation  and  quotation  omitted).    \u201cIf  the  secondary  user \nonly copies as much as is necessary for his or her intended \nuse,  then  this  factor  will  not  weigh  against  him  or  her.\u201d  \nKelly v. Arriba Soft Corp., 336 F.3d 811, 820-21 (9th Cir. \n2003).    Under  this  factor,  \u201cattention  turns  to  the  persua-\nsiveness  of  a  parodist\u2019s  justification  for  the  particular \ncopying  done,  and  the  enquiry  will  harken  back  to  the \nfirst  of  the  statutory  factors  .  .  .  [because]  the  extent  of \npermissible copying varies with the purpose and character \nof the use.\u201d  Campbell, 510 U.S. at 586-87.   \n\nThe fourth and final factor focuses on \u201cthe effect of the \nuse  upon  the  potential  market  for  or  value  of  the  copy-\nrighted  work.\u201d    Harper  &  Row,  471  U.S.  at  566.    This \nfactor reflects the idea that fair use \u201cis limited to copying \nby  others  which  does  not  materially  impair  the  marketa-\nbility  of  the  work  which  is  copied.\u201d    Id.  at  566-67.    The \nSupreme  Court  has  said  that  this  factor  is  \u201cundoubtedly \nthe single most important element of fair use.\u201d  Id. at 566.   \nIt  requires  that  courts  \u201cconsider  not  only  the  extent  of \nmarket  harm  caused  by  the  particular  actions  of  the \nalleged  infringer,  but  also  whether  unrestricted  and \nwidespread conduct of the sort engaged in by the defend-\nant . . . would result in a substantially adverse impact on \nthe potential market for the original.\u201d  Campbell, 510 U.S. \nat  590  (citation  and  quotation  marks  omitted).    \u201cMarket \nharm  is  a  matter  of  degree,  and  the  importance  of  this \nfactor  will  vary,  not  only  with  the  amount  of  harm,  but \nalso with the relative strength of the showing on the other \nfactors.\u201d  Id. at 590 n.21.   \n\nOracle asserts that all of these factors support its po-\nsition that Google\u2019s use was not \u201cfair use\u201d\u2014Google know-\ningly and illicitly copied a creative work to further its own \n\n\f60 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\ncommercial  purposes,  did  so  verbatim,  and  did  so  to  the \ndetriment  of  Oracle\u2019s  market  position.    These  undisputa-\nble  facts,  according  to  Oracle,  should  end  the  fair  use \ninquiry.  Oracle\u2019s position is not without force.  On many \nof these points, Google does not debate Oracle\u2019s character-\nization of its conduct, nor could it on the record evidence.   \n\nGoogle contends, however, that, although it admitted-\nly copied portions of the API packages and did so for what \nwere purely commercial purposes, a reasonable juror still \ncould  find  that:  (1) Google\u2019s  use  was  transformative; \n(2) the  Java  API  packages  are  entitled  only  to  weak \nprotection;  (3) Google\u2019s  use  was  necessary  to  work  within \na  language  that  had  become  an  industry  standard;  and \n(4) the market impact on Oracle was not substantial.   \n\nits  use \n\nincorporated \n\nthe  packages \n\nOn  balance,  we  find  that  due  respect  for  the  limit  of \nour  appellate  function  requires  that  we  remand  the  fair \nuse  question  for  a  new  trial.    First,  although  it  is  undis-\nputed  that  Google\u2019s  use  of  the  API  packages  is  commer-\ncial,  the  parties  disagree  on  whether \nis \n\u201ctransformative.\u201d    Google  argues  that  it  is,  because  it \nwrote its own implementing code, created its own virtual \ninto  a \nmachine,  and \nsmartphone platform.  For its part, Oracle maintains that \nGoogle\u2019s use is not transformative because: (1) \u201c[t]he same \ncode  in  Android  .  .  .  enables  programmers  to  invoke  the \nsame  pre-programmed  functions  in  exactly  the  same \nway;\u201d  and  (2) Google\u2019s  use  of  the  declaring  code  and \npackages  does  not  serve  a  different  function  from  Java.  \nAppellant  Reply  Br.  47.    While  Google  overstates  what \nactivities  can  be  deemed  transformative  under  a  correct \napplication  of  the  law,  we  cannot  say  that  there  are  no \nmaterial  facts  in  dispute  on  the  question  of  whether \nGoogle\u2019s  use  is  \u201ctransformative,\u201d  even  under  a  correct \nreading of the law.  As such, we are unable to resolve this \nissue on appeal.  \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n61 \n\nNext,  while  we  have  concluded  that  it  was  error  for \nthe trial court to focus unduly on the functional aspects of \nthe  packages,  and  on  Google\u2019s  competitive  desire  to \nachieve  commercial  \u201cinteroperability\u201d  when  deciding \nwhether  Oracle\u2019s  API  packages  are  entitled  to  copyright \nprotection,  we  expressly  noted  that  these  factors  may  be \nrelevant to a fair use analysis.  While the trial court erred \nin  concluding  that  these  factors  were  sufficient  to  over-\ncome Oracle\u2019s threshold claim of copyrightability, reason-\nable  jurors  might  find  that  they  are  relevant  to  Google\u2019s \nfair use defense under the second and third factors of the \ninquiry.    See  Sega,  977  F.2d  at  1524-25  (discussing  the \nSecond Circuit\u2019s approach to \u201cbreak[ing] down a computer \nprogram \nits  component  subroutines  and  sub-\nsubroutines  and  then  identif[ying]  the  idea  or  core  func-\ntional  element  of  each\u201d  in  the  context  of  the  second  fair \nuse  factor:  the  nature  of  the  copyrighted  work).    We  find \nthis particularly true with respect to those core packages \nwhich  it  seems  may  be  necessary  for  anyone  to  copy  if \nthey are to write programs in the Java language.  And, it \nmay be that others of the packages were similarly essen-\ntial components of any Java language-based program.  So \nfar, that type of filtration analysis has not occurred.  \n\ninto \n\nFinally,  as  to  market  impact,  the  district  court  found \nthat \u201cSun and Oracle never successfully developed its own \nsmartphone platform using Java technology.\u201d  Copyright-\nability  Decision,  872  F.  Supp.  2d  at  978.    But  Oracle \nargues that, when Google copied the API packages, Oracle \nwas licensing in the mobile and smartphone markets, and \nthat  Android\u2019s  release  substantially  harmed  those  com-\nmercial opportunities as well as the potential market for a \nJava  smartphone  device.    Because  there  are  material \nfacts  in  dispute  on  this  factor  as  well,  remand  is  neces-\nsary.   \n\nUltimately,  we  conclude  that  this  is  not  a  case  in \nwhich the record contains sufficient factual findings upon \nwhich  we  could  base  a  de  novo  assessment  of  Google\u2019s \n\n\f62 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\naffirmative  defense  of  fair  use.    Accordingly,  we  remand \nthis question to the district court for further proceedings.  \nOn remand, the district court should revisit and revise its \njury  instructions  on  fair  use  consistent  with  this  opinion \nso  as  to  provide  the  jury  with  a  clear  and  appropriate \npicture of the fair use defense.17 \n\nII.  GOOGLE\u2019S CROSS-APPEAL  \n\nGoogle  cross-appeals  from  the  portion  of  the  district \ncourt\u2019s  final  judgment  entered  in  favor  of  Oracle  on  its \nclaim  for  copyright  infringement  as  to  the  nine  lines  of \n\n                                            \n\n17  Google  argues  that,  if  we  allow  it  to  retry  its  fair \nuse  defense  on  remand,  it  is  entitled  to  a  retrial  on  in-\nfringement as well.  We disagree.  The question of wheth-\ner  Google\u2019s  copying  constituted \ninfringement  of  a \ncopyrighted  work  is  \u201cdistinct  and  separable\u201d  from  the \nquestion  of  whether  Google  can  establish  a  fair  use  de-\nfense to its copying.  See Gasoline Prods. Co. v. Champlin \nRefining  Co.,  283  U.S.  494,  500  (1931)  (\u201cWhere  the  prac-\ntice  permits  a  partial  new  trial,  it  may  not  properly  be \nresorted  to  unless  it  clearly  appears  that  the  issue  to  be \nretried is so distinct and separable from the others that a \ntrial  of  it  alone  may  be  had  without  injustice.\u201d).    Indeed, \nwe  have  emphasized  more  than  once  in  this  opinion  the \nextent  to  which  the  questions  are  separable,  and  the \nconfusion  and  error  caused  when  they  are  blurred.    The \nissues  are  not  \u201cinterwoven\u201d  and it  would  not  create  \u201ccon-\nfusion  and  uncertainty\u201d  to  reinstate  the  infringement \nverdict  and  submit  fair  use  to  a  different  jury.    Id.    We \nnote,  moreover,  that,  because  Google  only  mentions  this \npoint in passing, with no development of  an argument in \nsupport of it, under our case law, it has not been properly \nraised.    See  SmithKline  Beecham  Corp.  v.  Apotex  Corp., \n439  F.3d  1312,  1320  (Fed.  Cir.  2006)  (when  a  party  pro-\nvides  no  developed  argument  on  a  point,  we  treat  that \nargument as waived) (collecting cases).   \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n63 \n\nrangeCheck  code  and  the  eight  decompiled  files.    Final \nJudgment,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-\n3561 (N.D. Cal. June 20, 2012), ECF No. 1211.  Specifical-\nly,  Google  appeals  from  the  district  court\u2019s  decisions: \n(1) granting Oracle\u2019s motion for JMOL of infringement as \nto the eight decompiled Java files that Google copied into \nAndroid;  and  (2) denying  Google\u2019s  motion  for  JMOL  with \nrespect to rangeCheck.   \n\nWhen reviewing a district court\u2019s grant or denial of a \nmotion  for  JMOL,  we  apply  the  procedural  law  of  the \nrelevant regional circuit, here the Ninth Circuit.  Trading \nTechs. Int\u2019l, Inc. v. eSpeed, Inc., 595 F.3d 1340, 1357 (Fed. \nCir.  2010).    The  Ninth  Circuit  reviews  a  district  court\u2019s \nJMOL  decision  de  novo,  applying  the  same  standard  as \nthe  district  court.    Mangum  v.  Action  Collection  Serv., \nInc.,  575  F.3d  935,  938  (9th  Cir.  2009).    To  grant  judg-\nment  as  a  matter  of  law,  the  court  must  find  that  \u201cthe \nevidence  presented  at  trial  permits  only  one  reasonable \nconclusion\u201d and that \u201cno reasonable juror could find in the \nnon-moving  party\u2019s  favor.\u201d    Id.  at  938-39  (citation  and \ninternal quotation marks omitted).  \n\nOracle  explains  that  the  eight  decompiled  files  at  is-\nsue  \u201ccontain  security  functions  governing  access  to  net-\nwork  files\u201d  while  rangeCheck  \u201cfacilitates  an  important \nsorting function, frequently called upon during the opera-\ntion  of  Java  and  Android.\u201d    Oracle  Response  to  Cross-\nAppeal 60-61.  At trial, Google conceded that it copied the \neight decompiled Java code files and the nine lines of code \nreferred to as rangeCheck into Android.  Its only defense \nwas  that  the  copying  was  de  minimis.    Accordingly,  the \ndistrict  court  instructed  the  jury  that,  \u201c[w]ith  respect  to \nthe  infringement  issues  concerning  the  rangeCheck  and \nother similar files, Google agrees that the accused lines of \ncode  and  comments  came  from  the  copyrighted  materials \nbut contends that the amounts involved were so negligible \nas to be de minimis and thus should be excluded.\u201d  Final \nCharge  to  the  Jury  (Phase  One),  Oracle  Am.,  Inc.  v. \n\n\f64 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nGoogle,  Inc.,  No.  3:10-cv-3561  (N.D.  Cal.  Apr.  30,  2012), \nECF No. 1018, at 14.   \n\nAlthough  the  jury  found  that  Google  infringed  Ora-\ncle\u2019s  copyright  in  the  nine  lines  of  code  comprising \nrangeCheck,  it  returned  a  noninfringement  verdict  as  to \neight  decompiled  security  files.    But  because  the  trial \ntestimony  was  that  Google\u2019s  use  of  the  decompiled  files \nwas  significant\u2014and  there  was  no  testimony  to  the  con-\ntrary\u2014the  district  court  concluded  that  \u201c[n]o  reasonable \njury could find that this copying was de minimis.\u201d  Order \nGranting  JMOL  on  Decompiled  Files,  2012  U.S.  Dist. \nLEXIS  66417, at  *6.   As  such,  the  court  granted  Oracle\u2019s \nmotion  for  JMOL  of  infringement  as  to  the  decompiled \nsecurity files.  \n\nOn  appeal,  Google  maintains  that  its  copying  of \nrangeCheck  and  the  decompiled  security  files  was  de \nminimis  and  thus  did  not  infringe  any  of  Oracle\u2019s  copy-\nrights.    According  to  Google,  the  district  court  should \nhave denied  Oracle\u2019s  motion  for  JMOL  \u201cbecause  substan-\ntial evidence supported the jury\u2019s verdict that Google\u2019s use \nof  eight  decompiled  test  files  was  de  minimis.\u201d    Cross-\nAppellant  Br.  76.    Google  further  argues  that  the  court \nshould  have  granted \nfor  JMOL  as  to \nrangeCheck because  the \u201ctrial evidence revealed that the \nnine  lines  of  rangeCheck  code  were  both  quantitatively \nand  qualitatively  insignificant  in  relation  to  the  [Java] \nplatform.\u201d  Id. at 78.   \n\nits  motion \n\nIn response, Oracle argues that the Ninth Circuit does \nnot  recognize  a  de  minimis  defense  to  copyright  infringe-\nment and that, even if it does, we should affirm the judg-\nments  of  infringement  on  grounds  that  Google\u2019s  copying \nwas  significant.    Because  we  agree  with  Oracle  on  its \nsecond point, we need not address the first, except to note \nthat  there  is  some  conflicting Ninth  Circuit  precedent  on \nthe  question  of  whether  there  is  a  free-standing  de  mini-\nmis  defense  to  copyright  infringement  or  whether  the \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n65 \n\nsubstantiality  of  the  alleged  copying is  best  addressed  as \npart of a fair use defense.  Compare Norse v. Henry Holt & \nCo.,  991  F.2d  563,  566  (9th  Cir.  1993)  (indicating  that \n\u201ceven  a  small  taking  may  sometimes  be  actionable\u201d  and \nthe  \u201cquestion  of  whether  a  copying  is  substantial  enough \nto be actionable may be best resolved through the fair use \ndoctrine\u201d), with Newton v. Diamond, 388 F.3d 1189, 1192-\n93  (9th  Cir.  2003)  (\u201cFor  an  unauthorized  use  of  a  copy-\nrighted work to be actionable, the use must be significant \nenough to constitute infringement.  This means that even \nwhere  the  fact  of  copying  is  conceded,  no  legal  conse-\nquences  will  follow  from  that  fact  unless  the  copying  is \nsubstantial.\u201d) (internal citation omitted)).18   \n\nEven  assuming  that  the  Ninth  Circuit  recognizes  a \nstand-alone de minimis defense to copyright infringement, \nhowever,  we  conclude  that:  (1) the  jury  reasonably  found \nthat  Google\u2019s  copying  of  the  rangeCheck  files  was  more \nthan  de  minimis;  and  (2) the  district  court  correctly \nconcluded that the defense failed as a matter of law with \nrespect to the decompiled security files.   \n\nFirst, the unrebutted testimony at trial revealed that \nrangeCheck and the decompiled security files were signif-\nicant to both Oracle and Google.  Oracle\u2019s expert, Dr. John \nthe \nMitchell, \n\nthat  Android  devices  call \n\ntestified \n\n                                            \n\n18   At least one recent district court decision has rec-\n\nognized  uncertainty  in  Ninth  Circuit  law  on  this  point.  \nSee Brocade Commc\u2019ns Sys. v. A10 Networks, Inc., No. 10-\ncv-3428,  2013  U.S.  Dist.  LEXIS  8113,  at  *33  (N.D.  Cal. \nJan. 10, 2013) (\u201cThe Ninth Circuit has been unclear about \nwhether the de minimis use doctrine serves as an affirma-\ntive defense under the Copyright Act\u2019s fair use exceptions \nor  whether  the  doctrine  merely  highlights  plaintiffs\u2019 \nobligation  to  show  that  \u2018the  use  must  be  significant \nenough  to  constitute  infringement.\u2019\u201d)  (citing  Newton,  388 \nF.2d at 1193; Norse, 991 F.2d at 566).   \n\n\f66 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\nrangeCheck  function  2,600  times  just  in  powering  on  the \ndevice.  Although Google argues that the eight decompiled \nfiles  were  insignificant  because  they  were  used  only  to \ntest  the  Android  platform,  Dr.  Mitchell  testified  that \n\u201cusing  the  copied  files  even  as  test  files would  have been \nsignificant  use\u201d  and  the  district  court  specifically  found \nthat  \u201c[t]here  was  no  testimony  to  the  contrary.\u201d    Order \nGranting  JMOL  on  Decompiled  Files,  2012  U.S.  Dist. \nLEXIS  66417,  at  *6.    Given  this  testimony,  a  reasonable \njury could not have found Google\u2019s copying de minimis.     \n\nGoogle  emphasizes  that  the  nine  lines  of  rangeCheck \ncode  \u201crepresented  an  infinitesimal  percentage  of  the  2.8 \nmillion  lines  of  code  in  the  166  Java  packages\u2014let  alone \nthe millions of lines of code in the entire [Java] platform.\u201d  \nGoogle  Cross-Appeal  Br.  78-79.    To  the  extent  Google  is \narguing  that  a  certain  minimum  number  of  lines  of  code \nmust be copied before a court can find infringement, that \nargument is without merit.  See Baxter v. MCA, Inc., 812 \nF.2d 421, 425 (9th Cir. 1987) (\u201c[N]o bright line rule exists \nas  to  what  quantum  of  similarity  is  permitted.\u201d).    And, \ngiven  the  trial  testimony  that  both  rangeCheck  and  the \ndecompiled security files are qualitatively significant and \nGoogle copied them in their entirety, Google cannot show \nthat  the  district  court  erred  in  denying  its  motion  for \nJMOL. \n\nWe  have  considered  Google\u2019s  remaining  arguments \nand find them unpersuasive.  Accordingly, we affirm both \nof the JMOL decisions at issue in Google\u2019s cross-appeal. \n\nIII. GOOGLE\u2019S POLICY-BASED ARGUMENTS \n\nMany of Google\u2019s arguments, and those of some amici, \nappear  premised  on  the  belief  that  copyright  is  not  the \ncorrect  legal  ground  upon  which  to  protect  intellectual \nproperty  rights  to  software  programs;  they  opine  that \npatent protection for such programs, with its insistence on \nnon-obviousness,  and  shorter  terms  of  protection,  might \nbe  more  applicable,  and  sufficient.    Indeed,  the  district \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n67 \n\ncourt\u2019s  method  of  operation  analysis  seemed  to  say  as \nmuch.    Copyrightability  Decision,  872  F.  Supp.  2d  at 984 \n(stating that this case raises the question of \u201cwhether the \ncopyright  holder  is  more  appropriately  asserting  an \nexclusive right to a functional system, process, or method \nof  operation  that  belongs  in  the  realm  of  patents,  not \ncopyrights\u201d).  Google argues that \u201c[a]fter Sega, developers \ncould  no  longer  hope  to  protect  [software]  interfaces  by \ncopyright  .  .  .  Sega  signaled  that  the  only reliable  means \nfor  protecting  the  functional  requirements  for  achieving \ninteroperability was by patenting them.\u201d  Appellee Br. 40 \n(quoting  Pamela  Samuelson,  Are  Patents  on  Interfaces \nImpeding  Interoperability?  93  Minn.  L.  Rev.  1943,  1959 \n(2009)).  And, Google relies heavily on articles written by \nProfessor  Pamela  Samuelson,  who  has  argued  that  \u201cit \nwould  be  best  for  a  commission  of  computer  program \nexperts to draft a new form of intellectual property law for \nmachine-readable  programs.\u201d \n  Pamela  Samuelson, \nCONTU Revisited: The Case Against Copyright Protection \nfor Computer Programs in Machine-Readable Form, 1984 \nDuke L.J. 663, 764 (1984).  Professor Samuelson has more \nrecently  argued  that  \u201cAltai  and  Sega  contributed  to  the \neventual  shift  away  from  claims  of  copyright  in  program \ninterfaces  and  toward  reliance  on  patent  protection.  \nPatent protection also became more plausible and attrac-\ntive  as  the  courts  became  more  receptive  to  software \npatents.\u201d  Samuelson, 93 Minn. L. Rev. at 1959.   \n\nAlthough Google, and the authority on which it relies, \nseem  to  suggest  that  software  is  or  should  be  entitled  to \nprotection  only  under  patent  law\u2014not  copyright  law\u2014\nseveral  commentators  have  recently  argued  the  exact \nopposite. \nTechnology  Quarterly, Stalking \nTrolls, ECONOMIST,  Mar.  8,  2014,  http://www.economist. \ncom/news/technology-quarterly/21598321-intellectual-\nproperty-after-being-blamed-stymying-innovation-\namerica-vague  (\u201c[M]any  innovators  have  argued  that  the \nelectronics  and  software  industries  would  flourish  if \n\nSee \n\n \n\n\f68 \n \n\n  ORACLE AMERICA, INC. v. GOOGLE INC. \n\ncompanies  trying  to  bring  new  technology  (software \ninnovations  included)  to  market  did  not  have  to  worry \nabout  being  sued  for  infringing  thousands  of  absurd \npatents  at  every  turn.    A  perfectly  adequate  means  of \nprotecting  and  rewarding  software  developers  for  their \ningenuity  has  existed  for  over  300  years.    It  is  called \ncopyright.\u201d);  Timothy B. Lee, Will the Supreme Court save \nus from software patents?, WASH. POST, Feb. 26, 2014, 1:13 \nPM,  http://www.washingtonpost.com/blogs/the-switch/wp/ \n2014/02/26/will-the-supreme-court-save-us-from-software-\npatents/ (\u201cIf you write a book or a song, you can get copy-\nright protection for it.  If you invent a new pill or a better \nmousetrap,  you  can  get  a  patent  on  it.    But  for  the  last \ntwo  decades,  software  has  had  the  distinction  of  being \npotentially  eligible  for  both  copyright  and  patent  protec-\ntion.    Critics  say  that\u2019s  a  mistake.    They  argue  that  the \ncomplex  and  expensive  patent  system  is  a  terrible  fit  for \nthe  fast-moving  software  industry.    And  they  argue  that \npatent protection is unnecessary because software innova-\ntors already have copyright protection available.\u201d).  \n\nImportantly for our purposes, the Supreme Court has \nmade  clear  that  \u201c[n]either  the  Copyright  Statute  nor  any \nother  says  that  because  a  thing  is  patentable  it  may  not \nbe copyrighted.\u201d  Mazer v. Stein, 347 U.S. 201, 217 (1954).  \nIndeed, the thrust of the CONTU Report is that copyright \nis \u201cthe most suitable mode of legal protection for computer \nsoftware.\u201d    Peter  S.  Menell,  An  Analysis  of  the  Scope  of \nCopyright  Protection  for  Application  Programs,  41  Stan. \nL.  Rev.  1045,  1072  (1989);  see  also  CONTU  Report  at  1 \n(recommending  that  copyright  law  be  amended  \u201cto  make \nit explicit that computer programs, to the extent that they \nembody  an  author\u2019s  original  creation,  are  proper  subject \nmatter of copyright\u201d).  Until either the Supreme Court or \nCongress  tells  us  otherwise,  we  are  bound  to  respect  the \nNinth  Circuit\u2019s  decision  to  afford  software  programs \nprotection under the copyright laws.  We thus decline any \n\n\fORACLE AMERICA, INC. v. GOOGLE INC. \n\n69 \n\ninvitation to declare that protection of software programs \nshould be the domain of patent law, and only patent law. \n\nCONCLUSION \n\nFor  the  foregoing  reasons,  we  conclude  that  the  de-\nclaring  code  and  the  structure,  sequence,  and  organiza-\ntion  of  the  37  Java  API  packages  at  issue  are  entitled  to \ncopyright  protection.    We  therefore  reverse  the  district \ncourt\u2019s copyrightability determination with instructions to \nreinstate  the  jury\u2019s  infringement  verdict.    Because  the \njury hung on fair use, we remand Google\u2019s fair use defense \nfor further proceedings consistent with this decision.   \n\nWith  respect  to  Google\u2019s  cross-appeal,  we  affirm  the \ndistrict  court\u2019s  decisions:  (1)  granting  Oracle\u2019s  motion  for \nJMOL  as  to  the  eight  decompiled  Java  files  that  Google \ncopied  into  Android;  and  (2)  denying  Google\u2019s  motion  for \nJMOL  with  respect  to  the  rangeCheck  function.    Accord-\ningly,  we  affirm-in-part,  reverse-in-part,  and  remand  for \nfurther proceedings.  \n\nAFFIRMED-IN-PART, REVERSED-IN-PART,  \nAND REMANDED \n\n\f"