United States Court of Appeals 
for the Federal Circuit 

 

 

 

 

______________________ 

 

 

 

 

 

 

 
 
ORACLE AMERICA, INC., 
Plaintiff-Appellant, 
 
v. 
 
GOOGLE INC., 
Defendant-Cross-Appellant. 
______________________ 
 
2013-1021, -1022 
______________________ 
 

______________________ 
 
Decided: May 9, 2014  
______________________ 

Appeals from the United States District Court for the 
Northern  District  of California  in  No.  10-CV-3561, Judge 
William H. Alsup. 

 
E.  JOSHUA  ROSENKRANZ,  Orrick,  Herrington  &  Sut-
cliffe  LLP,  of  New  York,  New  York,  argued  for  plaintiff-
appellant.    With  him  on  the  brief  were  MARK  S.  DAVIES, 
ANDREW D. SILVERMAN, KELLY M. DALEY; and ANNETTE L. 
HURST, GABRIEL M. RAMSEY, and ELIZABETH C. MCBRIDE, 
of San Francisco, California.  Of counsel on the brief were 
DORIAN  E.  DALEY,  DEBORAH  K.  MILLER,  MATTHEW 
SARBORARIA,  and  ANDREW  C.  TEMKIN,  Oracle  America, 
Inc.,  of  Redwood  Shores,  California;  and  DALE  M. 
CENDALI,  DIANA  M.  TORRES,  SEAN  B.  FERNANDES,  and 
JOSHUA L. SIMMONS, Kirkland & Ellis LLP, of New York, 
New York.  Of counsel were SUSAN M. DAVIES, Kirkland & 

2 

 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

Ellis  LLP,  of  New  York,  New  York;  MICHAEL  A.  JACOBS, 
Morrison  &  Foerster  LLP,  of  San  Francisco,  California; 
and KENNETH A. KUWAYTI, of Palo Alto, California.   

 
ROBERT A. VAN NEST, Keker & Van Nest LLP, of San 
Francisco,  California,  argued 
for  defendant-cross-
appellant.    With  him  on  the  brief  were  CHRISTA  M. 
ANDERSON,  STEVEN  A.  HIRSCH,  MICHAEL  S.  KWUN,  and 
DANIEL  E.  JACKSON.    Of  counsel  on  the  brief  were  IAN  C. 
BALLON  and  HEATHER  MEEKER,  Greenberg  Traurig, LLP, 
of East Palo Alto, California; RENNY HWANG, Google Inc., 
of Mountain View, California; and DARYL L. JOSEFFER and 
BRUCE  W.  BABER,  King  &  Spalding  LLP,  of  Washington, 
DC.   

 
MARCIA B. PAUL, Davis Wright Tremaine LLP, of New 
York,  New  York,  for  amicus  curiae  Ralph  Oman.    With 
her  on  the  brief  were  LACY  H.  KOONCE,  III  and  DEBORAH 
A. ADLER.   

 
WILLIAM  A.  RUDY,  Lathrop  &  Gage  LLP,  of  Kansas 
City, Missouri, for amici curiae Picture Archive Council of 
America,  Inc.,  et  al.   With  him  on  the  brief  were  CAROLE 
E.  HANDLER  and  BRIANNA  E.  DAHLBERG,  of  Los  Angeles, 
California.   

 
GREGORY  G.  GARRE,  Latham  &  Watkins,  LLP,  of 
Washington,  DC,  for  amici  curiae  Microsoft  Corporation, 
et al.  With him on the brief was LORI ALVINO MCGILL.  Of 
counsel  on  the  brief  were  PAUL  T.  DACIER,  KRISHNENDU 
GUPTA,  EMC  Corporation,  of  Hopkinton,  Massachusetts; 
and  DOUGLAS  LUFTMAN,  NETAPP,  Inc.,  of  Sunnyvale, 
California.   

 
JARED  BOBROW,  Weil,  Gotshal  &  Manges  LLP,  of 
Redwood  Shores,  California,  for  amici  curiae  Eugene  H. 
Spafford, Ph.D., et al.  With him on the brief was AARON 
Y. HUANG.   

ORACLE AMERICA, INC. v. GOOGLE INC. 

3 

 
MATTHEW S. HELLMAN, Jenner & Block LLP, of Wash-

ington, DC, for amicus curiae BSA/The Software Alliance.  
With him on the brief was PAUL M. SMITH.   

 
STEVEN  T.  COTTREAU,  Clifford  Chance  US  LLP,  of 

Washington, DC, for amici curiae, Scott McNealy, et al.   

 
MEREDITH  JACOB,  Program  on  Information  Justice 
and Intellectual Property, American University, Washing-
ton  College  of  Law,  of  Washington,  DC,  for  amici  curiae 
Intellectual Property Law Professors.  

 
JULIE  P.  SAMUELS,  Electronic  Frontier  Foundation,  of 
San  Francisco,  California,  for  amici  curiae  Computer 
Scientists.  With her on the brief was MICHAEL BARCLAY.  
Of  counsel  on  the  brief  was  JASON  M.  SCHULTZ,  NYU 
Technology Law and Policy Clinic, NYU School of Law, of 
New York, New York.   

 
JONATHAN  BAND,  Jonathan  Band  PLLC,  of  Washing-
ton, DC, filed a brief for amicus curiae Computer & Com-
munications Industry Association.  With him on the brief 
was  MATTHEW  SCHRUERS,  Computer  &  Communications 
Industry Association, of Washington, DC.   

 
CHAD RUBACK, The Ruback Law Firm, of Dallas, Tex-
as, filed a brief for amici curiae Rackspace US, Inc., et al.  

 
JENNIFER M. URBAN, Samuelson Law, Technology and 
Public  Policy  Clinic,  U.C.  Berkeley  School  of  Law,  of 
Berkeley, California for amici curiae Software Innovators, 
et al.   

______________________ 
 
Before O’MALLEY, PLAGER, and TARANTO, Circuit Judges. 

4 

 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

O’MALLEY, Circuit Judge. 

This  copyright  dispute  involves  37  packages  of  com-
puter  source  code.    The  parties  have  often  referred  to 
these groups of computer programs, individually or collec-
tively,  as  “application  programming  interfaces,”  or  API 
packages,  but  it  is  their  content,  not  their  name,  that 
matters.    The  predecessor  of  Oracle  America,  Inc.  (“Ora-
cle”)  wrote  these  and  other  API  packages  in  the  Java 
programming  language,  and  Oracle  licenses  them  on 
various  terms  for  others  to  use.    Many  software  develop-
ers  use  the  Java  language,  as  well  as  Oracle’s  API  pack-
ages,  to  write  applications  (commonly  referred  to  as 
“apps”) 
laptop  computers,  tablets, 
smartphones, and other devices.   

for  desktop  and 

Oracle  filed  suit  against  Google  Inc.  (“Google”)  in  the 
United  States  District  Court  for  the  Northern  District  of 
California,  alleging  that  Google’s  Android  mobile  operat-
ing system infringed Oracle’s patents and copyrights.  The 
jury found no patent infringement, and the patent claims 
are not at issue in this appeal.  As to the copyright claims, 
the  parties  agreed  that  the  jury  would  decide  infringe-
ment, fair use, and whether any copying was de minimis, 
while the district judge would decide copyrightability and 
Google’s  equitable  defenses.    The  jury  found  that  Google 
infringed Oracle’s copyrights in the 37 Java packages and 
a  specific  computer  routine  called  “rangeCheck,”  but 
returned a noninfringement verdict as to eight decompiled 
security  files.    The  jury  deadlocked  on  Google’s  fair  use 
defense.   

After  the  jury  verdict,  the  district  court  denied  Ora-
cle’s  motion  for  judgment  as  a  matter  of  law  (“JMOL”) 
regarding  fair  use  as  well  as  Google’s  motion  for  JMOL 
with  respect  to  the  rangeCheck  files.    Order  on  Motions 
for  Judgment  as  a  Matter  of  Law,  Oracle  Am.,  Inc.  v. 
Google  Inc.,  No.  3:10-cv-3561  (N.D.  Cal.  May  10,  2012), 
ECF  No.  1119.    Oracle  also  moved  for  JMOL  of  infringe-

ORACLE AMERICA, INC. v. GOOGLE INC. 

5 

ment  with  respect  to  the  eight  decompiled  security  files.  
In  granting  that  motion,  the  court  found  that:  (1)  Google 
admitted to copying the eight files; and (2) no reasonable 
jury  could  find  that  the  copying  was  de  minimis.    Oracle 
Am.,  Inc.  v.  Google  Inc.,  No.  C  10-3561,  2012  U.S.  Dist. 
LEXIS  66417  (N.D.  Cal.  May  11,  2012)  (“Order  Granting 
JMOL on Decompiled Files”).  

Shortly  thereafter,  the  district  court  issued  its  deci-
sion  on  copyrightability,  finding  that  the  replicated  ele-
ments  of  the  37  API  packages—including  the  declaring 
code and the structure, sequence, and organization—were 
not  subject  to  copyright  protection.    Oracle  Am.,  Inc.  v. 
Google Inc., 872 F. Supp. 2d 974 (N.D. Cal. 2012) (“Copy-
rightability  Decision”).    Accordingly,  the  district  court 
entered  final  judgment  in  favor  of  Google  on  Oracle’s 
copyright infringement claims, except with respect to the 
rangeCheck  code  and  the  eight  decompiled  files.    Final 
Judgment,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-
3561  (N.D.  Cal.  June  20,  2012),  ECF  No.  1211.    Oracle 
appeals  from  the  portion  of  the  final  judgment  entered 
against  it,  and  Google  cross-appeals  from  the  portion  of 
that  same  judgment  entered  in  favor  of  Oracle  as  to  the 
rangeCheck code and eight decompiled files.   

Because  we  conclude  that  the  declaring  code  and  the 
structure, sequence, and organization of the API packages 
are entitled to copyright protection, we reverse the district 
court’s copyrightability determination with instructions to 
reinstate the jury’s infringement finding as to the 37 Java 
packages.    Because  the  jury  deadlocked  on  fair  use,  we 
remand  for  further  consideration  of  Google’s  fair  use 
defense in light of this decision.  With respect to Google’s 
cross-appeal,  we  affirm  the  district  court’s  decisions: 
(1) granting  Oracle’s  motion  for  JMOL  as  to  the  eight 
decompiled  Java  files  that  Google  copied  into  Android; 
and (2) denying Google’s motion for JMOL with respect to 
the rangeCheck function.  Accordingly, we affirm-in-part, 
reverse-in-part, and remand for further proceedings.  

6 

 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

BACKGROUND 

A.  The Technology  

Sun  Microsystems,  Inc.  (“Sun”)  developed  the  Java 
“platform”  for  computer  programming  and  released  it  in 
1996.1    The  aim  was  to  relieve  programmers  from  the 
burden  of  writing  different  versions  of  their  computer 
programs for different operating systems or devices.  “The 
Java  platform,  through  the  use  of  a  virtual  machine, 
enable[d]  software  developers  to  write  programs  that 
[we]re  able  to  run  on  different  types  of  computer  hard-
ware  without  having  to  rewrite  them  for  each  different 
type.”  Copyrightability Decision, 872 F. Supp. 2d at 977.  
With Java, a software programmer could “write once, run 
anywhere.”   

The Java virtual machine (“JVM”) plays a central role 
in  the  overall  Java  platform.    The  Java  programming 
language  itself—which  includes  words,  symbols,  and 
other  units,  together  with  syntax  rules  for  using  them  to 
create  instructions—is  the  language  in  which  a  Java 
programmer writes source code, the version of a program 
that  is  “in  a  human-readable  language.”    Id.    For  the 
instructions  to  be  executed,  they  must  be  converted  (or 
compiled)  into  binary  machine  code  (object  code)  consist-
ing of 0s and 1s understandable by the particular compu-
ting  device.    In  the  Java  system,  “source  code  is  first 
converted  into  ‘bytecode,’  an  intermediate  form,  before  it 
is  then  converted  into  binary  machine  code  by  the  Java 
virtual  machine”  that  has  been  designed  for  that  device.  
Id.  The Java platform includes the “Java development kit 
(JDK),  javac  compiler,  tools  and  utilities,  runtime  pro-
grams, class libraries (API packages), and the Java virtu-
al machine.”  Id. at 977 n.2.    

                                            

1   Oracle acquired Sun in 2010. 

ORACLE AMERICA, INC. v. GOOGLE INC. 

7 

Sun wrote a number of ready-to-use Java programs to 
perform common computer functions and organized those 
programs into groups it called “packages.”  These packag-
es,  which  are  the  application  programming  interfaces  at 
issue  in  this  appeal,  allow  programmers  to  use  the  pre-
written  code  to  build  certain  functions  into  their  own 
programs,  rather  than  write  their  own  code  to  perform 
those  functions  from  scratch.    They  are  shortcuts.    Sun 
called the code for a specific operation (function) a “meth-
od.”    It  defined  “classes”  so  that  each  class  consists  of 
specified  methods  plus  variables  and  other  elements  on 
which  the  methods  operate.    To  organize  the  classes  for 
users, then, it grouped classes (along with certain related 
“interfaces”)  into  “packages.”    See  id.  at  982  (describing 
organization: “[e]ach package [i]s broken into classes and 
those  in  turn  [are]  broken  into  methods”).    The  parties 
have  not  disputed  the  district  court’s  analogy:  Oracle’s 
collection  of  API  packages  is  like  a  library,  each  package 
is like a bookshelf in the library, each class is like a book 
on the shelf, and each method is like a how-to chapter in a 
book.  Id. at 977.  

The  original  Java  Standard  Edition  Platform  (“Java 
SE”)  included  “eight  packages  of  pre-written  programs.”  
Id.  at  982.  The  district  court  found,  and  Oracle  concedes 
to  some  extent,  that  three  of  those  packages—java.lang, 
java.io, and java.util—were “core” packages, meaning that 
programmers  using  the  Java  language  had  to  use  them 
“in  order  to  make  any  worthwhile  use  of  the  language.”  
Id.    By  2008,  the  Java  platform  had  more  than  6,000 
methods  making  up  more  than  600  classes  grouped  into 
166  API  packages.    There  are  37  Java  API  packages  at 
issue in this appeal, three of which are the core packages 
identified  by  the  district  court.2    These  packages  contain 

                                            

2   The  37  API  packages  involved  in  this  appeal  are: 
ja-

java.beans, 

java.lang, 

java.io, 

java.awt.font, 

8 

 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

thousands  of  individual  elements,  including  classes, 
subclasses, methods, and interfaces.   

call 

code; 

(1) declaring 

the  parties 

Every  package  consists  of  two  types  of  source  code—
and 
what 
(2) implementing  code.    Declaring  code  is  the  expression 
that  identifies  the  prewritten  function  and  is  sometimes 
referred  to  as  the  “declaration”  or  “header.”    As  the  dis-
trict  court  explained,  the  “main  point  is  that  this  header 
line of code introduces the method body and specifies very 
precisely the inputs, name and other functionality.”  Id. at 
979-80.    The  expressions  used  by  the  programmer  from 
the  declaring  code  command the  computer  to  execute  the 
associated  implementing  code,  which  gives  the  computer 
the step-by-step instructions for carrying out the declared 
function.   

To  use  the  district  court’s  example,  one  of  the  Java 
API packages at issue is “java.lang.”  Within that package 
is  a  class  called  “math,”  and  within  “math”  there  are 
several methods, including one that is designed to find the 
larger  of  two  numbers:  “max.”    The  declaration  for  the 
“max” method, as defined for integers, is: “public static int 
max(int x, int y),” where the word “public” means that the 
method  is  generally  accessible,  “static”  means  that  no 

                                                                                                  

java.sql, 

java.security, 

java.lang.reflect, 

va.lang.annotation, 
ja-
java.lang.ref, 
va.net,  java.nio,  java.nio.channels,  java.nio.channels.spi, 
ja-
java.nio.charset.spi, 
java.nio.charset, 
va.security.acl,  java.security.cert,  java.security.interfaces, 
ja-
java.security.spec, 
va.util.jar, 
ja-
javax.crypto, 
va.util.regex, 
javax.net, 
javax.crypto.interfaces, 
javax.net.ssl, 
ja-
javax.security.auth.login, 
vax.security.auth.callback, 
javax.security.auth.x500, 
ja-
vax.sql.   

javax.crypto.spec, 
javax.security.auth, 

javax.security.cert,  and 

java.util.logging, 

java.util.prefs, 

java.util.zip, 

java.text, 

java.util, 

ORACLE AMERICA, INC. v. GOOGLE INC. 

9 

specific instance of the class is needed to call the method, 
the  first  “int”  indicates  that  the  method  returns  an  inte-
ger,  and  “int  x”  and  “int  y”  are  the  two  numbers  (inputs) 
being  compared.    Copyrightability  Decision,  872  F.  Supp. 
2d  at  980-82.    A  programmer  calls  the  “max”  method  by 
typing  the  name  of  the  method  stated  in  the  declaring 
code and providing unique inputs for the variables “x” and 
“y.”    The  expressions  used  command  the  computer  to 
execute the implementing code that carries out the opera-
tion of returning the larger number. 

Although  Oracle  owns  the  copyright  on  Java  SE  and 
the API packages, it offers three different licenses to those 
who  want  to  make  use  of  them.    The  first  is  the  General 
Public  License,  which  is  free  of  charge  and  provides  that 
the licensee can use the packages—both the declaring and 
implementing  code—but  must  “contribute  back”  its  inno-
vations to the public.  This arrangement is referred to as 
an “open source” license.  The second option is the Specifi-
cation  License,  which  provides  that  the  licensee  can  use 
the declaring code and organization of Oracle’s API pack-
ages  but  must  write  its  own  implementing  code.    The 
third  option  is  the  Commercial  License,  which  is  for 
businesses that “want to use and customize the full Java 
code  in  their  commercial  products  and  keep  their  code 
secret.”    Appellant  Br.  14.    Oracle  offers  the  Commercial 
License  in  exchange  for  royalties.    To  maintain  Java’s 
“write  once,  run  anywhere”  motto,  the  Specification  and 
Commercial Licenses require that the licensees’ programs 
pass  certain  tests  to  ensure  compatibility  with  the  Java 
platform.   

The  testimony  at  trial  also  revealed  that  Sun  was  li-
censing  a  derivative  version  of  the  Java  platform  for  use 
on  mobile  devices:  the  Java  Micro  Edition  (“Java  ME”).    
Oracle  licensed  Java  ME  for  use  on  feature  phones  and 
smartphones.    Sun/Oracle  has  never  successfully  devel-
oped its own smartphone platform using Java.  

10 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

B.  Google’s Accused Product: Android  

The  accused  product  is  Android,  a  software  platform 
that  was  designed  for  mobile  devices  and  competes  with 
Java  in  that  market.    Google  acquired  Android,  Inc.  in 
2005 as part of a plan to develop a smartphone platform.  
Later  that  same  year,  Google  and  Sun  began  discussing 
the  possibility  of  Google  “taking  a  license  to  use  and  to 
adapt the entire Java platform for mobile devices.”  Copy-
rightability  Decision,  872  F.  Supp.  2d  at  978.    They  also 
discussed  a  “possible  co-development  partnership  deal 
with  Sun  under  which  Java  technology  would  become  an 
open-source  part  of  the  Android  platform,  adapted  for 
mobile  devices.”    Id.    The  parties  negotiated  for  months 
but  were  unable  to  reach  an  agreement.    The  point  of 
contention  between  the  parties  was  Google’s  refusal  to 
make the implementation of its programs compatible with 
the Java virtual machine or interoperable with other Java 
programs.    Because  Sun/Oracle  found  that  position  to  be 
anathema  to  the  “write  once,  run  anywhere”  philosophy, 
it  did  not  grant  Google  a  license  to  use  the  Java  API 
packages.   

When  the  parties’  negotiations  reached  an  impasse, 
Google decided to use the Java programming language to 
design  its  own  virtual  machine—the  Dalvik  virtual  ma-
chine  (“Dalvik  VM”)—and  “to  write  its  own  implementa-
tions  for  the  functions  in  the  Java  API  that  were  key  to 
mobile  devices.”    Id.    Google  developed  the  Android  plat-
form,  which  grew  to  include  168  API  packages—37  of 
which  correspond  to  the  Java  API  packages  at  issue  in 
this appeal.   

With  respect  to  the  37  packages  at  issue, “Google be-
lieved  Java  application  programmers  would  want  to  find 
the  same  37  sets  of  functionalities  in  the  new  Android 
system callable by the same names as used in Java.”  Id.  
To achieve this result, Google copied the declaring source 
code  from  the  37  Java  API  packages  verbatim,  inserting 

ORACLE AMERICA, INC. v. GOOGLE INC. 

11 

that code into parts of its Android software.  In doing so, 
Google  copied  the  elaborately  organized  taxonomy  of  all 
the names of methods, classes, interfaces, and packages—
the  “overall  system  of  organized  names—covering  37 
packages,  with  over  six  hundred  classes,  with  over  six 
thousand  methods.”    Copyrightability  Decision,  872  F. 
Supp. 2d at 999.   The parties and district court  referred 
to  this  taxonomy  of  expressions  as  the  “structure,  se-
quence, and organization” or “SSO” of the 37 packages.  It 
is undisputed, however, that Google wrote its own imple-
menting  code,  except  with  respect  to:  (1)  the  rangeCheck 
function,  which  consisted  of  nine  lines  of  code;  and 
(2) eight decompiled security files.   

As to rangeCheck, the court found that the Sun engi-
neer who wrote it later worked for Google and contributed 
two files he created containing the rangeCheck function—
“Timsort.java” and “ComparableTimsort”—to the Android 
platform.   In  doing  so,  the  nine-line  rangeCheck  function 
was  copied  directly  into  Android.    As  to  the  eight  decom-
piled  files,  the  district  court  found  that  they  were  copied 
and  used  as  test  files  but  “never  found  their  way  into 
Android or any handset.”  Id. at 983. 

Google released the Android platform in 2007, and the 
first  Android  phones  went  on  sale  the  following  year.  
Although  it  is  undisputed  that  certain  Android  software 
contains  copies  of  the  37  API  packages’  declaring  code  at 
issue,  neither  the  district  court  nor  the  parties  specify  in 
which programs those copies appear.  Oracle indicated at 
oral  argument,  however,  that  all  Android  phones contain 
copies  of  the  accused  portions  of  the  Android  software.  
Oral  Argument  at  1:35,  available  at  http://www. 
cafc.uscourts.gov/oral-argument-recordings/2013-1021/all. 
Android  smartphones  “rapidly  grew  in  popularity  and 
now comprise a large share of the United States market.”  
Copyrightability Decision, 872 F. Supp. 2d at 978.  Google 
free  of  charge  to 
provides  the  Android  platform 
smartphone  manufacturers  and  receives  revenue  when 

12 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

customers use particular functions on the Android phone.  
Although  Android  uses  the  Java  programming  language, 
it  is  undisputed  that  Android  is  not  generally  Java  com-
patible.    As  Oracle  explains,  “Google  ultimately  designed 
Android  to  be  incompatible  with  the  Java  platform,  so 
that  apps  written  for  one  will  not  work  on  the  other.”  
Appellant Br. 29.  

C.  Trial and Post-Trial Rulings 

Beginning on April 16, 2012, the district court and the 
jury—on  parallel  tracks—viewed  documents  and  heard 
testimony from twenty-four witnesses on copyrightability, 
infringement,  fair  use,  and  Google’s  other  defenses.  
Because the parties agreed the district court would decide 
copyrightability,  the  court  instructed  the  jury  to  assume 
that  the  structure,  sequence,  and  organization  of  the  37 
API packages was copyrightable.  And, the court informed 
the jury that Google conceded that it copied the declaring 
code  used  in  the  37  packages  verbatim.    The  court  also 
instructed  the  jury  that  Google  conceded  copying  the 
rangeCheck  function  and  the  eight  decompiled  security 
files,  but  that  Google  maintained  that  its  use  of  those 
lines  of  code  was  de  minimis.    See  Final  Charge  to  the 
Jury (Phase One), Oracle Am., Inc. v. Google Inc., 3:10-cv-
3561 (N.D. Cal. Apr. 30, 2012), ECF No. 1018 at 14 (“With 
issues  concerning  the 
respect  to  the 
rangeCheck  and  other  similar  files,  Google  agrees  that 
the  accused  lines  of  code  and  comments  came  from  the 
copyrighted  material  but  contends  that  the  amounts 
involved were  so  negligible as  to  be  de  minimis  and  thus 
should be excused.”).   

infringement 

On  May  7,  2012,  the  jury  returned  a  verdict  finding 
that  Google  infringed  Oracle’s  copyright  in  the  37  Java 
API  packages  and  in  the  nine  lines  of  rangeCheck  code, 
but  returned  a  noninfringement  verdict  as  to  eight  de-
compiled security files.  The jury hung on Google’s fair use 
defense.   

ORACLE AMERICA, INC. v. GOOGLE INC. 

13 

The parties filed a number of post-trial motions, most 
of  which  were  ultimately  denied.    In  relevant  part,  the 
district court denied Oracle’s motion for JMOL regarding 
fair  use  and  Google’s  motion  for  JMOL  as  to  the 
rangeCheck  files.    Order  on  Motions  for  Judgment  as  a 
Matter  of  Law,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-
cv-3561  (N.D.  Cal.  May  10,  2012),  ECF  No.  1119.    The 
district  court  granted  Oracle’s  motion  for  JMOL  of  in-
fringement  as  to  the  eight  decompiled  files,  however.    In 
its  order,  the  court  explained  that:  (1)  Google  copied  the 
files in their entirety; (2) the trial testimony revealed that 
the use of those files was “significant”; and (3) no reason-
able jury could find the copying de minimis.  Order Grant-
ing  JMOL  on  Decompiled  Files,  2012  U.S.  Dist.  LEXIS 
66417, at *6.   

On May 31, 2012, the district court issued the prima-
ry decision at issue in this appeal, finding that the repli-
cated  elements  of  the  Java  API  packages—including  the 
declarations and their structure, sequence, and organiza-
tion—were  not  copyrightable.      As  to  the  declaring  code, 
the  court  concluded  that  “there  is  only  one  way  to  write” 
it, and thus the “merger doctrine bars anyone from claim-
ing  exclusive  copyright  ownership  of  that  expression.”  
Copyrightability  Decision,  872  F.  Supp.  2d  at  998.    The 
court  further  found  that  the  declaring  code  was  not  pro-
tectable  because  “names  and  short  phrases  cannot  be 
copyrighted.”    Id.    As  such,  the  court  determined  that 
“there can be no copyright violation in using the identical 
declarations.”  Id.   

As  to  the  overall  structure,  sequence,  and  organiza-
tion  of  the  Java  API  packages,  the  court  recognized  that 
“nothing  in  the  rules  of  the  Java  language  .  .  .  required 
that  Google  replicate  the  same  groupings  even  if  Google 
was  free  to  replicate  the  same  functionality.”    Id.  at  999.  
Therefore,  the  court determined  that  “Oracle’s  best  argu-
ment  .  .  .  is  that  while  no  single  name  is  copyrightable, 
Java’s  overall  system  of  organized  names—covering  37 

14 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

packages,  with  over  six  hundred  classes,  with  over  six 
thousand  methods—is  a  ‘taxonomy’  and,  therefore,  copy-
rightable.”  Id. 

Although it acknowledged that the overall structure of 
Oracle’s  API  packages  is  creative,  original,  and  “resem-
bles  a  taxonomy,”  the  district  court  found  that  it  “is 
nevertheless a command structure, a system or method of 
operation—a  long  hierarchy  of  over  six  thousand  com-
mands  to  carry  out  pre-assigned  functions”—that  is  not 
entitled  to  copyright  protection  under  Section  102(b)  of 
the  Copyright  Act.    Id.  at  999-1000.    In  reaching  this 
conclusion,  the  court  emphasized  that,  “[o]f  the  166  Java 
packages, 129 were not violated in any way.”  Id. at 1001.  
And, of the 37 Java API packages at issue, “97 percent of 
the Android lines were new from Google and the remain-
ing three percent were freely replicable under the merger 
and  names  doctrines.”    Id.    On  these  grounds,  the  court 
dismissed  Oracle’s  copyright  claims,  concluding  that  “the 
particular elements replicated by Google were free for all 
to use under the Copyright Act.”  Id.   

On  June  20,  2012,  the  district  court  entered  final 
judgment  in  favor  of  Google  and  against  Oracle  on  its 
claim  for  copyright  infringement,  except  with  respect  to 
the  rangeCheck  function  and  the  eight  decompiled  files.  
As  to  rangeCheck  and  the  decompiled  files,  the  court 
entered  judgment  for  Oracle  and  against  Google  in  the 
amount of zero dollars, per the parties’ stipulation.  Final 
Judgment,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-
3561  (N.D.  Cal.  June  20,  2012),  ECF  No.  1211.    Oracle 
timely  appealed  from  the  portion  of  the  district  court’s 
final judgment entered against it and Google timely cross-
appealed  with  respect  to  rangeCheck  and  the  eight  de-
compiled  files.    Because  this  action  included  patent 
claims,  we  have  jurisdiction  pursuant  to  28  U.S.C. 
§ 1295(a)(1).   

ORACLE AMERICA, INC. v. GOOGLE INC. 

15 

DISCUSSION 

I.  ORACLE’S APPEAL  

It is undisputed that the Java programming language 
is open and free for anyone to use.  Except to the limited 
extent noted below regarding three of the API packages, it 
is also undisputed that Google could have written its own 
API packages using the Java language.  Google chose not 
to  do  that.    Instead,  it  is  undisputed  that  Google  copied 
7,000 lines of declaring code and generally replicated the 
overall  structure,  sequence,  and  organization  of  Oracle’s 
37 Java API packages.  The central question before us is 
whether these elements of the Java platform are entitled 
to copyright protection.  The district court concluded that 
they are not, and Oracle challenges that determination on 
appeal.    Oracle  also  argues  that  the  district  court  should 
have  dismissed  Google’s  fair  use  defense  as  a  matter  of 
law.   

According  to  Google,  however,  the  district  court  cor-
rectly  determined  that:  (1) there  was  only  one  way  to 
write  the Java  method  declarations  and  remain  “interop-
erable” with Java; and (2) the organization and structure 
of  the  37  Java  API  packages  is  a  “command  structure” 
excluded  from  copyright  protection  under  Section 102(b).  
Google  also  argues  that,  if  we  reverse  the  district  court’s 
copyrightability  determination,  we  should  direct  the 
district court to retry its fair use defense.  

“When the questions on appeal involve law and prece-
dent  on  subjects  not  exclusively  assigned  to  the  Federal 
Circuit, the court applies the law which would be applied 
by the regional circuit.” Atari Games Corp. v. Nintendo of 
Am., Inc., 897 F.2d 1572, 1575 (Fed. Cir. 1990).  Copyright 
issues are not exclusively assigned to the Federal Circuit.  
See  28  U.S.C.  § 1295.    The  parties  agree  that  Ninth  Cir-
cuit  law  applies  and  that,  in  the  Ninth  Circuit,  whether 
particular  expression  is  protected  by  copyright  law  is 

16 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

“subject  to  de  novo  review.”    Ets-Hokin  v.  Skyy  Spirits, 
Inc., 225 F.3d 1068, 1073 (9th Cir. 2000).3     

                                            

3   The  Supreme  Court  has  not  addressed  whether 
copyrightability  is  a  pure  question  of  law  or  a  mixed 
question  of  law  and  fact,  or  whether,  if  it  is  a  mixed 
question  of  law  and  fact,  the  factual  components  of  that 
inquiry are for the court, rather than the jury.  Relatedly, 
it  has  not  decided  the  standard  of  review that  applies  on 
appeal.    Ten  years  ago,  before  finding  it  unnecessary  to 
decide  whether  copyrightability is  a  pure  question  of  law 
or  a  mixed  question  of  law  and  fact,  the  Seventh  Circuit 
noted that it had “found only a handful of appellate cases 
addressing  the  issue,  and  they  are  split.”    Gaiman  v. 
McFarlane,  360  F.3d  644,  648  (7th  Cir.  2004).    And, 
panels  of  the  Ninth  Circuit  have  defined  the  respective 
roles of the jury and the court differently where questions 
of originality were at issue.  Compare North Coast Indus. 
v.  Jason  Maxwell,  Inc.,  972  F.2d  1031,  1035  (9th  Cir. 
1992),  with  Ets-Hokin,  225  F.3d  at  1073.    More  recently, 
several  district  courts  within  the  Ninth  Circuit  have 
treated  copyrightability  as  a  question  for  only  the  court, 
regardless  of  whether  it  is  a  pure  question  of  law.    See 
Stern v. Does, No. 09-1986, 2011 U.S. Dist. LEXIS 37735, 
*7  (C.D.  Cal.  Feb.  10,  2011);  Jonathan  Browning,  Inc.  v. 
Venetian  Casino  Resort  LLC,  No.  C  07-3983,  2009  U.S. 
Dist.  LEXIS  57525,  at  *2  (N.D.  Cal.  June  19,  2009);  see 
also Pivot Point Int’l, Inc. v. Charlene Prods., Inc., 932 F. 
Supp. 220, 225 (N.D. Ill. 1996) (Easterbrook, J.) (citing to 
Markman  v.  Westview  Instruments,  Inc.,  517  U.S.  370 
(1996), and concluding that whether works are copyright-
able  is  a  question  which  the  “jury  has  nothing  to  do 
with”).    We  need  not  address  any  of  these  questions, 
because  the  parties  here  agreed  that  the  district  court 
would decide copyrightability, and both largely agree that 

ORACLE AMERICA, INC. v. GOOGLE INC. 

17 

We  are  mindful  that  the  application  of  copyright  law 
in the computer context is often a difficult task.  See Lotus 
Dev. Corp. v. Borland Int’l, Inc., 49 F.3d 807, 820 (1st Cir. 
1995) (Boudin, J., concurring) (“Applying copyright law to 
computer  programs  is  like  assembling  a  jigsaw  puzzle 
whose pieces do not quite fit.”).  On this record, however, 
we  find  that  the  district  court  failed  to  distinguish  be-
tween  the  threshold  question  of  what  is  copyrightable—
which  presents  a  low  bar—and  the  scope  of  conduct  that 
constitutes  infringing  activity.    The  court  also  erred  by 
importing  fair  use  principles,  including  interoperability 
concerns, into its copyrightability analysis.     

For  the  reasons  that  follow,  we  conclude  that  the  de-
claring  code  and  the  structure,  sequence,  and  organiza-
tion of the 37 Java API packages are entitled to copyright 
protection.    Because  there  is  an  insufficient  record  as  to 
the  relevant  fair  use  factors,  we  remand  for  further  pro-
ceedings on Google’s fair use defense.   

A.  Copyrightability  

The  Copyright  Act  provides  protection  to  “original 
works  of  authorship  fixed  in  any  tangible  medium  of 
expression,” 
  17  U.S.C. 
including  “literary  works.” 
§ 102(a).    It  is  undisputed  that  computer  programs—
defined  in  the  Copyright  Act  as  “a  set  of  statements  or 
instructions to be used directly or indirectly in a computer 
in  order  to  bring  about  a  certain  result,”    17  U.S.C. 
§ 101—can  be  subject  to  copyright  protection  as  “literary 
works.”    See  Atari  Games  Corp.  v.  Nintendo  of  Am.,  Inc., 
975  F.2d  832,  838  (Fed.  Cir.  1992)  (“As  literary  works, 
copyright  protection  extends  to  computer  programs.”).  
Indeed,  the  legislative  history  explains  that  “literary 
works”  includes  “computer  programs  to  the  extent  that 

                                                                                                  

we  may  undertake  a  review  of  that  determination  de 
novo. 

18 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

they  incorporate  authorship  in  the  programmer’s  expres-
sion  of  original  ideas,  as  distinguished  from  the  ideas 
themselves.”  H.R. Rep. No. 1476, 94th Cong., 2d Sess. 54, 
reprinted in 1976 U.S.C.C.A.N. 5659, 5667.   

By  statute,  a  work  must  be  “original”  to  qualify  for 
copyright protection.  17 U.S.C. § 102(a).  This “originality 
requirement is not particularly stringent,” however.  Feist 
Publ’ns,  Inc.  v.  Rural  Tel.  Serv.  Co.,  499  U.S.  340,  358 
(1991).  “Original, as the term is used in copyright, means 
only  that  the  work  was  independently  created  by  the 
author  (as  opposed  to  copied  from  other  works),  and  that 
it  possesses  at  least  some  minimal  degree  of  creativity.”  
Id. at 345.   

Copyright protection extends only to the expression of 
an idea—not to the underlying idea itself.  Mazer v. Stein, 
347  U.S.  201,  217  (1954)  (“Unlike  a  patent,  a  copyright 
gives no exclusive right to the art disclosed; protection is 
given  only  to  the  expression  of  the  idea—not  the  idea 
itself.”).    This  distinction—commonly  referred  to  as  the 
“idea/expression dichotomy”—is codified in Section 102(b) 
of the Copyright Act, which provides: 

In  no  case  does  copyright  protection  for  an  origi-
nal work of authorship extend to any idea, proce-
dure,  process,  system,  method  of  operation, 
concept,  principle,  or  discovery,  regardless  of  the 
form in which it is described, explained, illustrat-
ed, or embodied in such work.   

17  U.S.C.  § 102(b);  see  Golan  v.  Holder,  132  S.  Ct.  873, 
890  (2012)  (“The  idea/expression  dichotomy  is  codified  at 
17 U.S.C. § 102(b).”).   

The  idea/expression  dichotomy  traces  back  to  the  Su-
preme  Court’s  decision  in  Baker  v.  Selden,  101  U.S.  99, 
101  (1879).    In  Baker,  the  plaintiff  Selden  wrote  and 
obtained copyrights on a series of books setting out a new 
system of bookkeeping.  Id. at 100.  The books included an 

ORACLE AMERICA, INC. v. GOOGLE INC. 

19 

introductory essay explaining the system and blank forms 
with  ruled  lines  and headings  designed  for  use  with  that 
system.  Id.  Baker  published account books employing a 
system  with  similar  forms,  and  Selden  filed  suit  alleging 
copyright  infringement.    According  to  Selden,  the  “ruled 
lines  and  headings,  given  to  illustrate  the  system,  are  a 
part  of  the  book”  and  “no  one  can  make  or  use  similar 
ruled  lines  and  headings,  or  ruled  lines  and  headings 
made  and  arranged  on  substantially  the  same  system, 
without violating the copyright.”  Id. at 101.   

The  Supreme  Court  framed  the  issue  on  appeal  in 
Baker  as  “whether  the  exclusive  property  in  a  system  of 
book-keeping  can  be claimed,  under  the law  of  copyright, 
by  means  of  a  book  in  which  that  system  is  explained.”  
Id.    In  reversing  the  circuit  court’s  decision,  the  Court 
concluded  that  the  “copyright  of  a  book  on  book-keeping 
cannot  secure  the  exclusive  right  to  make,  sell,  and  use 
account-books  prepared  upon  the  plan  set  forth  in  such 
book.”    Id. at  104.    Likewise,  the  “copyright  of  a  work  on 
mathematical science cannot give to the author an exclu-
sive  right  to  the  methods  of  operation  which  he  pro-
pounds.”  Id. at 103.  The Court found that, although the 
copyright  protects  the  way  Selden  “explained  and  de-
scribed  a  peculiar  system  of  book-keeping,”  it  does  not 
prevent  others  from  using  the  system  described  therein.  
Id. at 104.  The Court further indicated that, if it is neces-
sary  to  use  the  forms  Selden  included  in  his  books  to 
make  use  of  the  accounting  system,  that  use  would  not 
amount  to  copyright  infringement.    See  id.  (noting  that 
the public has the right to use the account-books and that, 
“in using the art, the ruled lines and headings of accounts 
must necessarily be used as incident to it”).   

Courts  routinely  cite  Baker  as  the  source  of  several 
principles  incorporated  into  Section  102(b)  that  relate  to 
this  appeal,  including  that:  (1) copyright  protection  ex-
tends only to expression, not to ideas, systems, or process-
es;  and  (2) “those  elements  of  a  computer  program  that 

20 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

are  necessarily  incidental  to  its  function  are  .  .  .  unpro-
tectable.”    See  Computer  Assocs.  Int’l  v.  Altai,  982  F.2d 
693, 704-05 (2d Cir. 1992) (“Altai”) (discussing Baker, 101 
U.S. at 103-04). 

It is well established that copyright protection can ex-
tend to both literal and non-literal elements of a computer 
program.  See Altai, 982 F.2d at 702.  The literal elements 
of  a  computer  program  are  the  source  code  and  object 
code.  See Johnson Controls, Inc. v. Phoenix Control Sys., 
Inc.,  886  F.2d  1173,  1175  (9th  Cir.  1989).    Courts  have 
defined  source  code  as  “the  spelled-out  program  com-
mands  that  humans  can  read.”    Lexmark  Int’l,  Inc.  v. 
Static  Control  Components,  Inc.,  387  F.3d  522,  533  (6th 
Cir.  2004).    Object  code  refers  to  “the  binary  language 
comprised of zeros and ones through which the computer 
directly receives its instructions.”  Altai, 982 F.2d at 698.  
Both  source  and  object  code  “are  consistently  held  pro-
tected by a copyright on the program.”  Johnson Controls, 
886  F.2d  at  1175;  see  also  Altai,  982  F.2d  at  702  (“It  is 
now  well  settled  that  the  literal  elements  of  computer 
programs,  i.e.,  their  source  and  object  codes,  are  the 
subject  of  copyright  protection.”).    Google  nowhere  dis-
putes that premise.  See, e.g., Oral Argument at 57:38. 

The non-literal components of a computer program in-
clude, among other things, the program’s sequence, struc-
ture,  and  organization,  as  well  as  the  program’s  user 
interface.    Johnson  Controls,  886  F.2d  at  1175.    As  dis-
cussed  below,  whether  the  non-literal  elements  of  a  pro-
gram  “are  protected  depends  on  whether,  on  the 
particular  facts  of  each  case,  the  component  in  question 
qualifies as an expression of an idea, or an idea itself.”  Id.   

In  this  case,  Oracle  claims  copyright  protection  with 
respect to both: (1) literal elements of its API packages—
the 7,000 lines of declaring source code; and (2) non-literal 
elements—the  structure,  sequence,  and  organization  of 
each of the 37 Java API packages.   

ORACLE AMERICA, INC. v. GOOGLE INC. 

21 

The distinction between literal and non-literal aspects 
of  a  computer  program  is  separate  from  the  distinction 
between  literal  and  non-literal  copying.    See  Altai,  982 
F.2d  at  701-02.    “Literal”  copying  is  verbatim  copying  of 
original expression.  “Non-literal” copying is “paraphrased 
or loosely paraphrased rather than word for word.”  Lotus 
Dev.  Corp.  v.  Borland  Int’l,  49  F.3d  807,  814  (1st  Cir. 
1995).  Here, Google concedes that it copied the declaring 
code verbatim.  Oracle explains that the lines of declaring 
code “embody the structure of each [API] package, just as 
the chapter titles and topic sentences represent the struc-
ture  of  a  novel.”    Appellant  Br.  45.    As  Oracle  explains, 
when  Google  copied  the  declaring  code  in  these  packages 
“it  also  copied  the  ‘sequence  and  organization’  of  the 
packages  (i.e.,  the  three-dimensional  structure  with  all 
the  chutes  and  ladders)”  employed  by  Sun/Oracle  in  the 
packages.  Appellant Br. 27.  Oracle also argues that the 
nonliteral  elements  of  the  API  packages—the  structure, 
sequence,  and  organization  that  led  naturally  to  the 
implementing code Google created—are entitled to protec-
tion.  Oracle does not assert “literal” copying of the entire 
SSO,  but,  rather,  that  Google  literally  copied  the  declar-
ing code and then paraphrased the remainder of the SSO 
by  writing  its  own  implementing  code.    It  therefore  as-
serts non-literal copying with respect to the entirety of the 
SSO.   

At this stage, it is undisputed that the declaring code 
and the structure and organization of the Java API pack-
ages  are  original.    The  testimony  at  trial  revealed  that 
designing  the  Java  API  packages  was  a  creative  process 
and  that  the  Sun/Oracle  developers  had  a  vast  range  of 
options  for  the  structure  and  organization.    In  its  copy-
rightability  decision,  the  district  court  specifically  found 
that the API packages are both creative and original, and 
Google  concedes  on  appeal  that  the  originality  require-
ments  are  met.    See  Copyrightability  Decision,  872  F. 
Supp.  2d  at  976  (“The  overall  name  tree,  of  course,  has 

22 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

creative  elements  .  .  .  .”);  Id.  at  999  (“Yes,  it  is  creative.  
Yes,  it  is  original.”);  Appellee  Br.  5  (“Google  does  not 
dispute”  the  district  court’s  finding  that  “the  Java  API 
clears  the  low  originality  threshold.”).    The  court  found, 
however, that neither the declaring code nor the SSO was 
entitled to copyright protection under the Copyright Act.   

Although the parties agree that Oracle’s API packages 
meet  the  originality  requirement  under  Section 102(a), 
they disagree as to the proper interpretation and applica-
tion  of  Section 102(b).    For  its  part,  Google  suggests  that 
there  is  a  two-step  copyrightability  analysis,  wherein 
Section 102(a)  grants  copyright  protection  to  original 
works, while Section 102(b) takes it away if the work has 
a  functional  component.    To  the  contrary,  however,  Con-
gress emphasized that Section 102(b) “in no way enlarges 
or contracts the scope of copyright protection” and that its 
“purpose  is  to  restate  .  .  .  that  the  basic  dichotomy  be-
tween  expression  and  idea  remains  unchanged.”    Feist, 
499 U.S. at 356 (quoting H.R. Rep. No. 1476, 94th Cong., 
2d  Sess.  54,  reprinted  in  1976  U.S.C.C.A.N.  5659,  5670).  
“Section 102(b) does not extinguish the protection accord-
ed a particular expression of an idea merely because that 
expression  is  embodied  in  a  method  of  operation.”    Mitel, 
Inc.  v.  Iqtel,  Inc.,  124  F.3d  1366,  1372  (10th  Cir.  1997).  
Section 102(a) and 102(b) are to be considered collectively 
so that certain expressions are subject to greater scrutiny.  
Id.    In  assessing  copyrightability,  the  district  court  is 
required  to  ferret  out  apparent  expressive  aspects  of  a 
work  and  then  separate  protectable  expression  from 
“unprotectable  ideas,  facts,  processes,  and  methods  of 
operation.”  See Atari, 975 F.2d at 839.   

Of course, as with many things, in defining this task, 
the  devil  is  in  the  details.    Circuit  courts  have  struggled 
with,  and  disagree  over,  the  tests  to  be  employed  when 
attempting  to  draw  the  line  between  what  is  protectable 
expression and what is not.  Compare Whelan Assocs., Inc. 
v.  Jaslow  Dental  Lab.,  Inc.,  797  F.2d  1222, 1236  (3d  Cir. 

ORACLE AMERICA, INC. v. GOOGLE INC. 

23 

“abstraction-filtration-comparison” 

1986) (everything not necessary to the purpose or function 
of  a  work  is  expression),  with  Lotus,  49  F.3d  at  815 
(methods of operation are means by which a user operates 
something  and  any  words  used  to  effectuate  that  opera-
tion are unprotected expression).  When assessing wheth-
er  the  non-literal  elements  of  a  computer  program 
constitute  protectable  expression,  the  Ninth  Circuit  has 
test 
endorsed  an 
formulated  by  the  Second  Circuit  and  expressly  adopted 
by  several  other  circuits.    Sega  Enters.  Ltd.  v.  Accolade, 
Inc., 977 F.2d 1510, 1525 (9th Cir. 1992) (“In our view, in 
light  of  the  essentially  utilitarian  nature  of  computer 
programs, the Second Circuit’s approach is an appropriate 
one.”).    This  test  rejects  the  notion  that  anything  that 
performs  a  function  is  necessarily  uncopyrightable.    See 
Mitel, 124 F.3d at 1372 (rejecting the Lotus court’s formu-
lation,  and  concluding  that,  “although  an  element  of  a 
work may be characterized as a method of operation, that 
element  may  nevertheless  contain  expression  that  is 
eligible  for  copyright  protection.”).    And  it  also  rejects  as 
flawed  the  Whelan  assumption  that,  once  any  separable 
idea  can  be  identified  in  a  computer  program  everything 
else must be protectable expression, on grounds that more 
than  one  idea  may  be  embodied  in  any  particular  pro-
gram.  Altai, 982 F.2d at 705-06. 

Thus, this test eschews bright line approaches and re-
quires  a  more  nuanced  assessment  of  the  particular 
program at issue in order to determine what expression is 
protectable and infringed.  As the Second Circuit explains, 
this  test  has  three  steps.    In  the  abstraction  step,  the 
court “first break[s] down the allegedly infringed program 
into  its  constituent  structural  parts.”    Id.  at  706.    In  the 
filtration  step,  the  court  “sift[s]  out  all  non-protectable 
material,”  including  ideas  and  “expression  that  is  neces-
sarily incidental to those ideas.”  Id.  In the final step, the 

24 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

court  compares  the  remaining  creative  expression  with 
the allegedly infringing program.4   

In the second step, the court is first to assess whether 
the  expression  is  original  to  the  programmer  or  author.  
Atari,  975  F.2d  at  839.    The  court  must  then  determine 
whether  the  particular  inclusion  of  any  level  of  abstrac-
tion is dictated by considerations of efficiency, required by 
factors  already  external  to  the  program  itself,  or  taken 
from  the  public  domain—all  of  which  would  render  the 
expression unprotectable.  Id.  These conclusions are to be 
informed by traditional copyright principles of originality, 
merger,  and  scenes  a  faire.    See  Mitel,  124  F.3d  at  1372 
(“Although this core of expression is eligible for copyright 
protection,  it  is  subject  to  the  rigors  of  filtration  analysis 
which  excludes  from  protection  expression  that  is  in  the 
public  domain,  otherwise  unoriginal,  or  subject  to  the 
doctrines of merger and scenes a faire.”).   

In  all  circuits,  it  is  clear  that  the  first  step  is  part  of 
the  copyrightability  analysis  and  that  the  third  is  an 
infringement  question.    It  is  at  the  second  step  of  this 
analysis where the circuits are in less accord.  Some treat 
all aspects of this second step as part of the copyrightabil-
ity  analysis,  while  others  divide  questions  of  originality 
from the other inquiries, treating the former as a question 
of  copyrightability  and  the  latter  as  part  of  the  infringe-
ment  inquiry.    Compare  Lexmark,  387  F.3d  at  537-38 

                                            

4  

Importantly, this  full  analysis  only  applies  where 
a  copyright  owner  alleges  infringement  of  the  non-literal 
aspects of its work.  Where “admitted literal copying of a 
discrete,  easily-conceptualized  portion  of  a  work”  is  at 
issue—as with Oracle’s declaring code—a court “need not 
perform  a  complete  abstraction-filtration-comparison 
analysis” and may focus the protectability analysis on the 
filtration  stage,  with  attendant  reference  to  standard 
copyright principles.  Mitel, 124 F.3d at 1372-73. 

ORACLE AMERICA, INC. v. GOOGLE INC. 

25 

(finding  that  the  district  court  erred  in  assessing  princi-
ples  of  merger  and  scenes  a  faire  in  the  infringement 
analysis, rather than as a component of copyrightability), 
with  Kregos,  937  F.2d  at  705    (noting  that  the  Second 
Circuit  has  considered  the  merger  doctrine  “in  determin-
ing whether actionable infringement has occurred, rather 
than whether a copyright is valid”); see also Lexmark, 387 
F.3d  at  557  (Feikens,  J.,  dissenting-in-part)  (noting  the 
circuit  split  and  concluding  that,  where  a  court  is  as-
sessing  merger  of  an  expression  with  a  method  of  opera-
tion, “I would find the merger doctrine can operate only as 
a defense to infringement in that context, and as such has 
no bearing on the question of copyrightability.”).  We need 
not  assess  the  wisdom  of  these  respective  views  because 
there  is  no  doubt  on  which  side  of  this  circuit  split  the 
Ninth Circuit falls.    

In the Ninth Circuit, while questions regarding origi-
nality  are  considered  questions  of  copyrightability,  con-
cepts  of  merger  and  scenes  a  faire  are  affirmative 
defenses  to  claims  of  infringement.    Ets-Hokin,  225  F.3d 
at 1082; Satava v. Lowry, 323 F.3d 805, 810 n.3 (9th Cir. 
2003)  (“The  Ninth  Circuit  treats  scenes  a  faire  as  a  de-
fense  to  infringement  rather  than  as  a  barrier  to  copy-
rightability.”).    The Ninth  Circuit  has acknowledged  that 
“there  is  some  disagreement  among  courts  as  to  whether 
these two doctrines  figure into the issue of copyrightabil-
ity  or  are  more  properly  defenses  to  infringement.”    Ets-
Hokin,  225 F.3d at 1082  (citations  omitted).    It,  nonethe-
less,  has  made  clear  that,  in  that  circuit,  these  concepts 
are  to  be  treated  as defenses  to  infringement.    Id.  (citing 
Kregos, 937 F.2d at 705 (holding that the merger doctrine 
relates to infringement, not copyrightability); Reed-Union 
Corp. v. Turtle Wax, Inc., 77 F.3d 909, 914 (7th Cir. 1996) 
(explaining why the doctrine of scenes a faire is separate 
from the validity of a copyright)).  

With  these  principles  in  mind,  we  turn  to  the  trial 
court’s  analysis  and  judgment  and  to  Oracle’s  objections 

26 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

thereto.  While the trial court mentioned the abstraction-
filtration-comparison  test  when  describing  the  develop-
ment of relevant law, it did not purport to actually apply 
that  test.    Instead,  it  moved  directly  to  application  of 
familiar  principles  of  copyright  law  when  assessing  the 
copyrightability  of  the  declaring  code  and  interpreted 
Section  102(b)  to  preclude  copyrightability  for  any  func-
tional  element  “essential  for  interoperability”  “regardless 
of its form.”  Copyrightability Decision, 872 F. Supp. 2d at 
997.  

Oracle  asserts  that  all  of  the  trial  court’s  conclusions 
regarding  copyrightability  are  erroneous.    Oracle  argues 
that  its  Java  API  packages  are  entitled  to  protection 
under the Copyright Act because they are expressive and 
could  have  been  written  and  organized  in  any  number  of 
ways  to  achieve  the  same  functions.    Specifically,  Oracle 
argues that the district court erred when it: (1) concluded 
that  each  line  of  declaring  code  is  uncopyrightable  be-
cause the idea and expression have merged; (2) found the 
declaring  code  uncopyrightable  because  it  employs  short 
phrases; (3) found all aspects of the SSO devoid of protec-
tion as a “method of  operation” under 17  U.S.C. § 102(b); 
and (4) invoked Google’s “interoperability” concerns in the 
copyrightability  analysis.    For  the  reasons  explained 
below, we agree with Oracle on each point.   

1.  Declaring Source Code 

First,  Oracle  argues  that  the  district  court  erred  in 
concluding  that  each  line  of  declaring  source  code  is 
completely  unprotected  under  the  merger  and  short 
phrases  doctrines.    Google  responds  that  Oracle  waived 
its right to assert copyrightability based on the 7,000 lines 
of declaring code by failing “to object to instructions and a 
verdict  form  that  effectively  eliminated  that  theory  from 
the case.”  Appellee Br. 67.  Even if not waived, moreover, 
Google argues that, because there is only one way to write 

ORACLE AMERICA, INC. v. GOOGLE INC. 

27 

the  names  and  declarations,  the  merger  doctrine  bars 
copyright protection.   

We  find  that  Oracle  did  not  waive  arguments  based 
on Google’s literal copying of the declaring code.  Prior to 
trial,  both  parties  informed  the  court  that  Oracle’s  copy-
right infringement claims included the declarations of the 
API  elements  in  the  Android  class  library  source  code.  
See  Oracle’s  Statement  of  Issues  Regarding  Copyright, 
Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-3561  (N.D. 
Cal.  Apr.  12,  2012),  ECF  No.  899-1,  at  3  (Oracle  accuses 
the “declarations of the API elements in the Android class 
library  source  code  and  object  code  that  implements  the 
37  API  packages”  of  copyright  infringement.);  see  also 
Google’s  Proposed  Statement  of  Issues  Regarding  Copy-
right,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-3561 
(N.D.  Cal.  Apr.  12,  2012),  ECF  No.  901,  at  2  (Oracle 
accuses  the  “declarations  of  the  API  elements  in  Android 
class library source code and object code that implements 
the 37 API packages.”).   

While Google is correct that the jury instructions and 
verdict form focused  on the structure and organization of 
the  packages,  we  agree  with  Oracle  that  there  was  no 
need for the jury to address copying of the declaring code 
because  Google  conceded  that  it  copied  it  verbatim.  
Indeed,  the  district  court  specifically  instructed  the  jury 
that  “Google  agrees  that  it  uses  the  same  names  and 
declarations” in Android.  Final Charge to the Jury at 10.   

That the district court addressed the declaring code in 
its  post-jury  verdict  copyrightability  decision  further 
confirms  that  the  verbatim  copying  of  declaring  code 
remained in the case.  The court explained that the “iden-
tical  lines”  that  Google  copied  into  Android  “are  those 
lines that specify the names, parameters and functionali-
ty of the methods and classes, lines called ‘declarations’ or 
‘headers.’”    Copyrightability  Decision,  872  F.  Supp.  2d  at 
979.   The  court  specifically  found  that  the  declaring  code 

28 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

was not entitled to copyright protection under the merger 
and short phrases doctrines.  We address each in turn.   

a.  Merger  

The  merger  doctrine  functions  as  an  exception  to  the 
idea/expression  dichotomy.    It  provides  that,  when  there 
are a limited number of ways to express an idea, the idea 
is said to “merge” with its expression, and the expression 
becomes  unprotected.    Altai,  982  F.2d  at  707-08.    As 
noted, the Ninth Circuit treats this concept as an affirma-
tive  defense  to  infringement.    Ets-Hokin,  225  F.3d  at 
1082.    Accordingly,  it  appears  that  the  district  court’s 
merger  analysis  is  irrelevant  to  the  question  of  whether 
Oracle’s  API  packages  are  copyrightable  in  the  first 
instance.    Regardless  of  when  the  analysis  occurs,  we 
conclude that merger does not apply on the record before 
us. 

Under  the  merger  doctrine,  a  court  will  not  protect  a 
copyrighted work from infringement if the idea contained 
therein  can  be  expressed  in  only  one  way.    Satava  v. 
Lowry,  323  F.3d  805,  812  n.5  (9th  Cir.  2003).    For  com-
puter  programs,  “this  means  that  when  specific  [parts  of 
the  code],  even  though  previously  copyrighted,  are  the 
only  and  essential  means  of  accomplishing  a  given  task, 
their  later  use  by  another  will  not  amount  to  infringe-
ment.”  Altai, 982 F.2d at 708 (citation omitted).  We have 
recognized, however, applying Ninth Circuit law, that the 
“unique arrangement of computer program expression . . . 
does  not  merge  with  the  process  so  long  as  alternate 
expressions are available.”  Atari, 975 F.2d at 840.   

In Atari, for example, Nintendo designed a program—
the  10NES—to  prevent  its  video  game  system  from  ac-
cepting  unauthorized  game  cartridges.    975  F.2d  at  836.  
Nintendo  “chose  arbitrary  programming  instructions  and 
arranged  them  in  a  unique  sequence  to  create  a  purely 
arbitrary data stream” which “serves as the key to unlock 
the NES.”  Id. at 840.  Because Nintendo produced expert 

ORACLE AMERICA, INC. v. GOOGLE INC. 

29 

testimony  “showing  a  multitude  of  different  ways  to 
generate  a  data  stream  which  unlocks  the  NES  console,” 
we  concluded  that  Nintendo’s  specific  choice  of  code  did 
not merge with the process.  Id.   

Here,  the  district  court  found  that,  “no  matter  how 
creative  or  imaginative  a  Java  method  specification  may 
be,  the  entire  world  is  entitled  to  use  the  same  method 
specification  (inputs,  outputs,  parameters)  so  long  as  the 
line-by-line  implementations  are  different.”    Copyrighta-
bility Decision, 872 F. Supp. 2d at 998.  In its analysis, the 
court  identified  the  method  declaration  as  the  idea  and 
found  that  the  implementation  is  the  expression.    Id. 
(“The  method  specification  is  the  idea.    The  method  im-
plementation  is  the  expression.    No  one  may  monopolize 
the  idea.”)  (emphases  in  original).    The  court  explained 
that, under the rules of Java, a programmer must use the 
identical “declaration or method header lines” to “declare 
a  method  specifying  the  same  functionality.”    Id.  at  976.  
Because  the  district  court  found  that  there  was  only  one 
way to write the declaring code for each of the Java pack-
ages,  it  concluded  that  “the  merger  doctrine  bars  anyone 
from claiming exclusive copyright ownership” of it.  Id. at 
998.  Accordingly, the court held there could be “no copy-
right violation in using the identical declarations.”  Id.  

Google  agrees  with  the  district  court  that  the  imple-
menting code is the expression entitled to protection—not 
the declaring code.  Indeed, at oral argument, counsel for 
Google explained that, “it is not our position that none of 
Java is copyrightable.  Obviously, Google spent two and a 
half years . . . to write from scratch all of the implement-
ing code.”  Oral Argument at 33:16.5  Because it is undis-

                                            

5  

It  is  undisputed  that  Microsoft  and  Apple  devel-
oped  mobile  operating  systems  from  scratch,  using  their 
own  array  of  software  packages.    When  asked  whether 
Google could also copy all of Microsoft or Apple’s declaring 

30 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

puted  that  Google  wrote  its  own  implementing  code,  the 
copyrightability of the precise language of that code is not 
at issue on appeal.  Instead, our focus is on the declaring 
code and structure of the API packages.  

On  appeal,  Oracle  argues  that  the  district  court: 
(1) misapplied the merger doctrine; and (2) failed to focus 
its  analysis  on  the  options  available  to  the  original  au-
thor.    We  agree  with  Oracle  on  both  points.    First,  we 
agree that merger cannot bar copyright protection for any 
lines of declaring source code unless Sun/Oracle had only 
one way, or a limited number of ways, to write them.  See 
Satava, 323 F.3d at 812 n.5 (“Under the merger doctrine, 
courts  will  not  protect  a  copyrighted  work  from  infringe-
ment  if  the  idea  underlying  the  copyrighted  work  can  be 
expressed  in  only  one  way,  lest  there  be  a  monopoly  on 
the  underlying  idea.”).    The  evidence  showed  that  Oracle 
had  “unlimited  options  as  to  the  selection  and  arrange-
ment  of  the  7000 lines  Google  copied.”    Appellant  Br. 50.  
Using  the  district  court’s  “java.lang.Math.max”  example, 
Oracle  explains  that  the  developers  could  have  called  it 
any  number  of  things,  including  “Math.maximum”  or 
“Arith.larger.”  This was not a situation where Oracle was 
selecting among preordained names and phrases to create 
its packages.6  As the district court recognized, moreover, 

                                                                                                  

code—codes  that  obviously  differ  from  those  at  issue 
here—counsel  for  Google  responded:  “Yes,  but  only  the 
structure,  sequence,  and  organization.    Only  the  com-
mand  structure—what  you  need  to  access  the  functions.  
You’d  have  to  rewrite  all  the  millions  of  lines  of  code  in 
Apple  or  in  Microsoft  which  is  what  Google  did  in  An-
droid.”  Oral Argument at 36:00.   

6  

In  their  brief  as  amici  curiae  in  support  of  rever-
sal,  Scott  McNealy  and  Brian  Sutphin—both  former 
executives  at  Sun  who  were  involved  in  the  development 
of  the  Java  platform—provide  a  detailed  example  of  the 

ORACLE AMERICA, INC. v. GOOGLE INC. 

31 

“the  Android  method  and  class  names  could  have  been 
different  from  the  names  of  their  counterparts  in  Java 
and still have worked.”  Copyrightability Decision, 872 F. 
Supp. 2d at 976.  Because “alternative expressions [we]re 
available,” there is no merger.  See Atari, 975 F.2d at 840. 

We further find that  the district court erred in focus-
ing its merger analysis on the options available to Google 
at  the  time  of  copying.    It  is  well-established  that  copy-
rightability and the scope of protectable activity are to be 
evaluated  at  the  time  of  creation,  not  at  the  time  of  in-
fringement.    See  Apple  Computer,  Inc.  v.  Formula  Int’l, 
Inc.,  725  F.2d  521,  524  (9th  Cir.  1984)  (quoting  National 
Commission  on  New  Technological  Uses  of  Copyrighted 
Works,  Final  Report  at  21  (1979)  (“CONTU  Report”) 
(recognizing  that  the  Copyright  Act  was  designed  “to 
protect all works of authorship from the moment of their 
fixation  in  any  tangible  medium  of  expression”)).    The 
focus  is,  therefore,  on  the  options  that  were  available  to 
Sun/Oracle  at  the  time  it  created  the  API  packages.    Of 

                                                                                                  

creative  choices  involved  in  designing  a  Java  package.  
Looking  at  the  “java.text”  package,  they  explain  that  it 
“contains  25  classes,  2  interfaces,  and  hundreds  of  meth-
ods  to  handle  text,  dates,  numbers,  and  messages  in  a 
manner  independent  of  natural  human  languages  .  .  .  .” 
Br. of McNealy and Sutphin 14-15.  Java’s creators had to 
determine  whether  to  include  a  java.text  package  in  the 
first place, how long the package would be, what elements 
to  include,  how  to  organize  that  package,  and  how  it 
would  relate  to  other  packages.    Id.  at  16.    This  descrip-
tion  of  Sun’s  creative  process  is  consistent  with  the  evi-
dence  presented  at  trial.    See  Appellant  Br.  12-13  (citing 
testimony  that  it  took  years  to  write  some  of  the  Java 
packages and that Sun/Oracle developers  had to “wrestle 
with  what  functions  to  include  in  the  package,  which  to 
put in other packages, and which to omit entirely”). 

32 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

course,  once  Sun/Oracle  created  “java.lang.Math.max,” 
programmers  who  want  to  use  that  particular  package 
have  to  call  it  by  that  name.    But,  as  the  court  acknowl-
edged,  nothing  prevented  Google  from  writing  its  own 
declaring  code,  along  with  its  own  implementing  code,  to 
achieve  the  same  result.    In  such  circumstances,  the 
chosen  expression  simply  does  not  merge  with  the  idea 
being expressed.7   

It  seems  possible  that  the  merger  doctrine,  when 
properly  analyzed,  would  exclude  the  three  packages 
identified  by  the  district  court  as  core  packages  from  the 
scope of actionable infringing conduct.  This would be so if 
the Java authors, at the time these packages were creat-
ed,  had  only  a  limited  number  of  ways  to  express  the 
methods and classes therein if they wanted to write in the 
Java  language.    In  that  instance,  the  idea  may  well  be 
merged  with  the  expression  in  these  three  packages.8  

                                            

7   The district court did not find merger with respect 
to  the  structure,  sequence,  and  organization  of  Oracle’s 
Java API packages.  Nor could it, given the court’s recog-
nition  that  there  were  myriad  ways  in  which  the  API 
packages  could  have  been  organized.    Indeed,  the  court 
found  that  the  SSO  is  original  and  that  “nothing  in  the 
rules  of  the  Java  language  .  .  .  required  that  Google 
replicate the same groupings.”  Copyrightability Decision, 
872 F. Supp. 2d at 999.  As discussed below, however, the 
court nonetheless found that the SSO is an uncopyrighta-
ble “method of operation.” 

8   At  oral  argument,  counsel  for  Oracle  was  asked 
whether  we  should  view  the  three  core  packages  “differ-
ently  vis-à-vis  the  concept  of  a  method  of  operation  than 
the  other  packages.”    See  Oral  Argument  at  7:43.    He 
responded:  “I  think  not  your  Honor.  I  would  view  them 
differently with respect to fair use . . . . It’s not that they 
are  more  basic.   It’s  that  there  are  just  several  methods, 

ORACLE AMERICA, INC. v. GOOGLE INC. 

33 

Google  did  not  present  its  merger  argument  in  this  way 
below  and  does  not  do  so  here,  however.    Indeed,  Google 
does  not  try  to  differentiate  among  the  packages  for 
purposes  of  its  copyrightability  analysis  and  does  not 
appeal  the  infringement  verdict  as  to  the  packages.    For 
these reasons, we reject the trial court’s merger analysis.   

b.  Short Phrases  

The  district  court  also  found  that  Oracle’s  declaring 
code consists of uncopyrightable short phrases.  Specifical-
ly,  the  court  concluded  that,  “while  the  Android  method 
and  class  names  could  have  been  different  from  the 
names  of  their  counterparts  in  Java  and  still  have 
worked,  copyright  protection  never  extends  to  names  or 
short phrases as a matter of law.”  Copyrightability Deci-
sion, 872 F. Supp. 2d at 976.  

The  district  court  is  correct  that  “[w]ords  and  short 
phrases  such  as  names,  titles,  and  slogans”  are  not  sub-
ject  to  copyright  protection.    37  C.F.R.  § 202.1(a).    The 
court  failed  to  recognize,  however,  that  the  relevant 
question  for  copyrightability  purposes  is  not  whether  the 
work  at  issue  contains  short  phrases—as  literary  works 
often do—but, rather, whether those phrases are creative.  
See  Soc’y  of  Holy  Transfiguration  Monastery,  Inc.  v. 

                                                                                                  

that is, routines, within just those three packages that are 
necessary  to  ‘speak  the  Java  language.’   Nothing  in  the 
other  thirty-four  packages  is  necessary  in  order  to  speak 
in  Java,  so  to  speak.”    Id.    Counsel  conceded,  however, 
that  this  issue  “might  go  to  merger.   It  might  go  to  the 
question  whether  someone—since  we  conceded  that  it’s 
okay  to  use  the  language—if  it’s  alright  to  use  the  lan-
guage  that  there  are  certain  things  that  the  original 
developers  had  to  say  in  order  to  use  that  language, 
arguably, although I still think it’s really a fair use analy-
sis.”  Id.   

34 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

Gregory, 689 F.3d 29, 52 (1st Cir. 2012) (noting that “not 
all  short  phrases  will  automatically  be  deemed  uncopy-
rightable”);  see  also  1  Melville  B.  Nimmer  &  David  Nim-
mer,  Nimmer  on  Copyright  § 2.01[B]  (2013)  (“[E]ven  a 
short  phrase  may  command  copyright  protection  if  it 
exhibits  sufficient  creativity.”).  And,  by  dissecting  the 
individual  lines  of  declaring  code  at  issue  into  short 
phrases, the district court further failed to recognize that 
an original combination of elements can be copyrightable.  
See  Softel,  Inc.  v.  Dragon  Med.  &  Scientific  Commc’ns, 
118  F.3d  955,  964  (2d  Cir.  1997)  (noting  that,  in  Feist, 
“the  Court  made  quite  clear  that  a  compilation  of  non-
protectible  elements  can  enjoy  copyright  protection  even 
though its constituent elements do not”).   

By analogy, the opening of Charles Dickens’ A Tale of 
Two Cities is nothing but a string of short phrases.  Yet no 
one  could  contend  that  this  portion  of  Dickens’  work  is 
unworthy of copyright protection because it can be broken 
into  those  shorter  constituent  components.    The  question 
is  not  whether  a  short  phrase  or  series  of  short  phrases 
can be extracted from the work, but whether the manner 
in which they are used or strung together exhibits creativ-
ity.  

Although  the  district  court  apparently  focused  on  in-
dividual  lines  of  code,  Oracle  is  not  seeking  copyright 
protection  for  a  specific  short  phrase  or  word.    Instead, 
the  portion  of  declaring  code  at  issue  is  7,000  lines,  and 
Google’s  own  “Java  guru”  conceded  that  there  can  be 
“creativity  and  artistry  even  in  a  single  method  declara-
tion.”    Joint  Appendix  (“J.A.”)  20,970.      Because  Oracle 
“exercised creativity in the selection and arrangement” of 
the method declarations when it created the API packages 
and  wrote  the  relevant  declaring  code,  they  contain  pro-
tectable  expression  that  is  entitled  to  copyright  protec-
tion.  See Atari, 975 F.2d at 840; see also 17 U.S.C. §§ 101, 
103  (recognizing  copyright  protection  for  “compilations” 
which  are  defined  as  work  that  is  “selected,  coordinated, 

ORACLE AMERICA, INC. v. GOOGLE INC. 

35 

or  arranged  in  such  a  way  that  the  resulting  work  as  a 
whole  constitutes  an  original  work  of  authorship”).    Ac-
cordingly,  we  conclude  that  the  district  court  erred  in 
applying  the  short  phrases  doctrine  to  find  the  declaring 
code not copyrightable.  

c.  Scenes a Faire 

The  scenes  a  faire  doctrine,  which  is  related  to  the 
merger  doctrine,  operates  to  bar  certain  otherwise  crea-
tive expression from copyright protection.  Apple Comput-
er,  Inc.  v.  Microsoft  Corp.,  35  F.3d  1435,  1444  (9th  Cir. 
1994).  It provides that “expressive elements of a work of 
authorship  are  not  entitled  to  protection  against  in-
fringement  if  they  are  standard,  stock,  or  common  to  a 
topic,  or  if  they  necessarily  follow  from  a  common  theme 
or setting.”  Mitel, 124 F.3d at 1374.  Under this doctrine, 
“when certain commonplace expressions are indispensable 
and  naturally  associated  with  the  treatment  of  a  given 
idea,  those  expressions  are  treated  like  ideas  and  there-
fore  [are]  not  protected  by  copyright.”    Swirsky  v.  Carey, 
376  F.3d  841,  850  (9th  Cir.  2004).    In  the  computer  con-
text,  “the  scene  a  faire  doctrine  denies  protection  to  pro-
gram  elements  that  are  dictated  by  external  factors  such 
as ‘the mechanical specifications of the computer on which 
a particular program is intended to run’ or ‘widely accept-
ed programming practices within the computer industry.’”  
Softel, 118 F.3d at 963 (citation omitted).   

The trial court rejected Google’s reliance on the scenes 
a  faire  doctrine.    It  did  so  in  a  footnote,  finding  that 
Google had failed to present evidence to support the claim 
that either the grouping of methods within the classes or 
the  code  chosen  for  them  “would  be  so  expected  and 
customary  as  to  be  permissible  under  the  scenes  a  faire 
doctrine.”    Copyrightability  Decision,  872  F.  Supp.  2d  at 
999  n.9.    Specifically,  the  trial  court  found  that  “it  is 
impossible to say on this record that all of the classes and 
their  contents  are  typical  of  such  classes  and,  on  this 

36 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

record,  this  order  rejects  Google’s  global  argument  based 
on scenes a faire.”  Id.   

On  appeal,  Google  refers  to  scenes  a  faire  concepts 
briefly,  as  do  some  amici,  apparently  contending  that, 
because  programmers  have  become  accustomed  to  and 
comfortable using the groupings in the Java API packag-
es, those groupings are so commonplace as to be indispen-
sable  to  the  expression  of  an  acceptable  programming 
platform.  As such, the argument goes, they are so associ-
ated with the “idea” of what the packages are accomplish-
ing  that  they  should  be  treated  as  ideas  rather  than 
expression.    See  Br.  of  Amici  Curiae  Rackspace  US,  Inc., 
et al. at 19-22. 

Google cannot rely on the scenes a faire doctrine as an 
alternative  ground  upon  which  we  might  affirm  the 
copyrightability judgment of the district court.  This is so 
for  several  reasons.    First,  as  noted,  like  merger,  in  the 
Ninth  Circuit,  the  scenes  a  faire  doctrine  is  a  component 
of  the  infringement  analysis.    “[S]imilarity  of  expression, 
whether  literal  or  non-literal,  which  necessarily  results 
from  the  fact  that  the  common  idea  is  only  capable  of 
expression in more or less stereotyped form, will preclude 
a  finding  of  actionable  similarity.”    4  Nimmer  on  Copy-
right  § 13.03[B][3].    Thus,  the  expression  is  not  excluded 
from copyright protection; it is just that certain copying is 
forgiven  as  a  necessary  incident  of  any  expression  of  the 
underlying  idea.    See  Satava,  323  F.3d  at  810  n.3  (“The 
Ninth  Circuit  treats  scenes  a  faire  as  a  defense  to  in-
fringement rather than as a barrier to copyrightability.”).   

Second,  Google  has  not  objected  to  the  trial  court’s 
conclusion  that  Google  failed  to  make  a  sufficient  factual 
record  to  support  its  contention  that  the  groupings  and 
code chosen for the 37 Java API packages were driven by 
external  factors  or  premised  on  features  that  were  either 
commonplace  or  essential  to  the  idea  being  expressed.  
Google provides no record citations indicating that such a 

ORACLE AMERICA, INC. v. GOOGLE INC. 

37 

showing  was  made  and  does  not  contend  that  the  trial 
court  erred  when  it  expressly  found  it  was  not.    Indeed, 
Google does not even make this argument with respect to 
the core packages.  

Finally,  Google’s  reliance  on  the  doctrine  below  and 
the  amici  reference  to  it  here  are  premised  on  a  funda-
mental  misunderstanding  of  the  doctrine.    Like  merger, 
the  focus  of  the  scenes  a  faire  doctrine  is  on  the  circum-
stances presented to the creator, not the copier.  See Mitel, 
124  F.3d  at  1375  (finding  error  to  the  extent  the  trial 
court discussed “whether external factors such as market 
forces  and  efficiency  considerations  justified  Iqtel’s  copy-
ing  of  the  command  codes”).    The  court’s  analytical  focus 
must  be  upon  the  external  factors  that  dictated  Sun’s 
selection  of  classes,  methods,  and  code—not  upon  what 
Google  encountered  at  the  time  it  chose  to  copy  those 
groupings  and  that  code.    See  id.    “[T]he  scenes  a  faire 
doctrine  identifies  and  excludes  from  protection  against 
infringement  expression  whose  creation  ‘flowed  naturally 
from  considerations  external  to  the  author’s  creativity.’”  
Id. (quoting Nimmer § 13.03[F][3], at 13-131 (1997)).  It is 
this  showing  the  trial  court  found  Google  failed  to  make, 
and Google cites to nothing in the record which indicates 
otherwise. 

For  these  reasons,  the  trial  court  was  correct  to  con-
clude  that  the  scenes  a  faire  doctrine  does  not  affect  the 
copyrightability of either the declaring code in, or the SSO 
of, the Java API packages at issue.  

2.  The Structure, Sequence, and Organization  
of the API Packages 

The district court found that the SSO of the Java API 
packages  is  creative  and  original,  but  nevertheless  held 
that it is a “system or method of operation . . . and, there-
fore,  cannot  be  copyrighted”  under  17  U.S.C.  § 102(b).  
Copyrightability  Decision,  872  F.  Supp.  2d  at  976-77.    In 
reaching  this  conclusion,  the  district  court  seems  to  have 

38 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

relied upon language contained in a First Circuit decision: 
Lotus  Development  Corp.  v.  Borland  International,  Inc., 
49  F.3d  807  (1st  Cir.  1995),  aff’d  without  opinion  by 
equally divided court, 516 U.S. 233 (1996).9   

In Lotus, it was undisputed that the defendant copied 
the menu command hierarchy and interface from Lotus 1-
2-3, a computer spreadsheet program “that enables users 
to  perform  accounting  functions  electronically  on  a  com-
puter.”    49  F.3d  at  809.    The  menu  command  hierarchy 
referred to a series of commands—such as “Copy,” “Print,” 
and  “Quit”—which  were  arranged  into  more  than  50 
menus  and  submenus.    Id.    Although  the  defendant  did 
not  copy  any  Lotus  source  code,  it  copied  the  menu  com-
mand  hierarchy  into  its  rival  program.    The  question 
before the court was “whether a computer menu command 
hierarchy is copyrightable subject matter.”  Id.    

Although  it  accepted  the  district  court’s  finding  that 
Lotus  developers  made  some  expressive  choices  in  select-
ing  and  arranging  the  command  terms,  the  First  Circuit 
found that the command hierarchy was not copyrightable 
because,  among  other  things,  it  was  a  “method  of  opera-
tion”  under  Section 102(b).    In  reaching  this  conclusion, 
the  court  defined  a  “method  of  operation”  as  “the  means 
by  which  a  person  operates  something,  whether  it  be  a 
car,  a  food  processor,  or  a  computer.”    Id.  at  815.10    Be-
cause  the  Lotus  menu  command  hierarchy  provided  “the 
means by which users control and operate Lotus 1-2-3,” it 

                                            

9   The  Supreme  Court  granted  certiorari  in  Lotus, 
but,  shortly  after  oral  argument,  the  Court  announced 
that it was equally divided and that Justice Stevens took 
no  part  in  the  consideration  or  decision  of  the  case.    The 
Court  therefore  left  the  First  Circuit’s  decision  undis-
turbed.  See Lotus, 516 U.S. at 233-34.   

10   The Lotus majority cited no authority for this def-

inition of “method of operation.”  

ORACLE AMERICA, INC. v. GOOGLE INC. 

39 

was  deemed  unprotectable.    Id.    For  example,  if  users 
wanted  to  copy  material,  they  would  use  the  “Copy” 
command and the command terms would tell the comput-
er what to do.  According to the Lotus court, the “fact that 
Lotus  developers  could  have  designed  the  Lotus  menu 
command  hierarchy  differently  is  immaterial  to  the 
question  of  whether  it  is  a  ‘method  of  operation.’”    Id.  at 
816.  (noting  that  “our  initial  inquiry  is  not  whether  the 
Lotus menu command hierarchy incorporates any expres-
sion”).    The  court  further  indicated  that,  “[i]f  specific 
words are essential to operating something, then they are 
part  of  a  ‘method  of  operation’  and,  as  such,  are  unpro-
tectable.”  Id.  

On appeal, Oracle argues that the district court’s reli-
ance  on  Lotus  is  misplaced  because  it  is  distinguishable 
on  its  facts  and  is  inconsistent  with  Ninth  Circuit  law.  
We  agree.    First,  while  the  defendant  in  Lotus  did  not 
copy  any  of  the  underlying  code,  Google  concedes  that  it 
copied portions of Oracle’s declaring source code verbatim.  
Second, the Lotus court found that the commands at issue 
there (copy, print, etc.) were not creative, but it is undis-
puted here that the declaring code and the structure and 
organization  of  the  API  packages  are  both  creative  and 
original.    Finally,  while  the  court  in  Lotus  found  the 
commands  at  issue  were  “essential  to  operating”  the 
system,  it  is  undisputed  that—other  than  perhaps  as  to 
the three core packages—Google did not need to copy the 
structure,  sequence,  and  organization  of  the  Java  API 
packages to write programs in the Java language.   

More importantly, however, the Ninth Circuit has not 
adopted  the  court’s  “method  of  operation”  reasoning  in 
Lotus,  and  we  conclude  that  it  is  inconsistent  with  bind-
ing precedent.11  Specifically, we find that Lotus is incon-

                                            

11   As  Oracle  points  out,  the  Ninth  Circuit  has  cited 
Lotus  only  one  time,  on  a  procedural  issue.    See  Danjaq 

40 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

sistent  with  Ninth  Circuit  case  law  recognizing  that  the 
structure,  sequence,  and  organization  of  a  computer 
program  is  eligible  for  copyright  protection  where  it 
qualifies as an expression of an idea, rather than the idea 
itself.    See  Johnson  Controls,  886  F.2d  at  1175-76.    And, 
while the court in Lotus held “that expression that is part 
of a ‘method of operation’ cannot be copyrighted,” 49 F.3d 
at  818,  this  court—applying  Ninth  Circuit  law—reached 
the  exact  opposite  conclusion,  finding  that  copyright 
protects “the expression of [a] process or method,”  Atari, 
975 F.2d at 839.   

We  find,  moreover,  that  the  hard  and  fast  rule  set 
down  in  Lotus  and  employed  by  the  district  court  here—
i.e., that elements which perform a function can never be 
copyrightable—is  at  odds  with  the  Ninth  Circuit’s  en-
dorsement  of  the  abstraction-filtration-comparison  analy-
sis  discussed  earlier.    As  the  Tenth  Circuit  concluded  in 
expressly rejecting the Lotus “method of operation” analy-
sis,  in  favor  of  the  Second  Circuit’s  abstraction-filtration-
comparison  test,  “although  an  element  of  a  work  may  be 
characterized as a method of operation, that element may 
nevertheless  contain  expression  that  is  eligible  for  copy-
right  protection.”    Mitel,  124  F.3d  at  1372.    Specifically, 
the  court  found  that  Section 102(b)  “does  not  extinguish 
the protection accorded a particular expression of an idea 
merely  because  that  expression  is  embodied  in  a  method 
of operation at a higher level of abstraction.”  Id.   

Other courts agree that components of a program that 
can  be  characterized  as  a  “method  of  operation”  may 

                                                                                                  

LLC  v.  Sony  Corp.,  263  F.3d  942,  954  (9th  Cir.  2001) 
(citing Lotus for the proposition that delay “has been held 
permissible, among other reasons, when it is necessitated 
by the exhaustion of remedies through the administrative 
process  .  .  .  when  it  is  used  to  evaluate  and  prepare  a 
complicated claim”).   

ORACLE AMERICA, INC. v. GOOGLE INC. 

41 

nevertheless  be  copyrightable.    For  example,  the  Third 
Circuit  rejected  a  defendant’s  argument  that  operating 
system programs are “per se” uncopyrightable because an 
operating system is a “method of operation” for a comput-
er.  Apple Computer, Inc. v. Franklin Computer Corp., 714 
F.2d  1240,  1250-52  (3d  Cir.  1983).    The  court  distin-
guished  between  the  “method  which  instructs  the  com-
puter  to  perform  its  operating  functions”  and  “the 
instructions  themselves,”  and  found  that  the  instructions 
were  copyrightable.    Id.  at  1250-51.    In  its  analysis,  the 
court  noted:  “[t]hat  the  words  of  a  program  are  used 
ultimately in the implementation of a process should in no 
way  affect  their  copyrightability.”    Id.  at  1252  (quoting 
CONTU Report at 21).  The court focused “on whether the 
idea  is  capable  of  various  modes  of  expression”  and  indi-
cated that, “[i]f other programs can be written or created 
which perform the same function as [i]n Apple’s operating 
system  program,  then  that  program  is  an  expression  of 
the idea and hence copyrightable.”  Id. at 1253.  Notably, 
no other circuit has adopted the First Circuit’s “method of 
operation” analysis. 

Courts have likewise found that classifying a work as 
a  “system”  does  not  preclude  copyright  for  the  particular 
expression  of  that  system.    See Toro  Co.  v.  R  &  R  Prods. 
Co.,  787  F.2d  1208,  1212  (8th  Cir.  1986)  (rejecting  the 
district court’s decision that “appellant’s parts numbering 
system  is  not  copyrightable  because  it  is  a  ‘system’”  and 
indicating  that  Section  102(b)  does  not  preclude  protec-
tion  for  the  “particular  expression”  of  that  system);  see 
also  Am.  Dental  Ass’n  v.  Delta  Dental  Plans  Ass’n,  126 
F.3d  977,  980  (7th  Cir.  1997)  (“A  dictionary  cannot  be 
called  a  ‘system’  just  because  new  novels  are  written 
using words, all of which appear in the dictionary.  Nor is 
word-processing  software  a  ‘system’  just  because  it  has  a 
command structure for producing paragraphs.”). 

Here,  the  district  court  recognized  that  the  SSO  “re-
sembles a taxonomy,” but found that “it is nevertheless a 

42 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

command  structure,  a  system  or  method  of  operation—a 
long  hierarchy  of  over  six  thousand  commands  to  carry 
out  pre-assigned  functions.”  Copyrightability  Decision, 
872 F. Supp. 2d at 999-1000.12  In other words, the court 
concluded  that,  although  the  SSO  is  expressive,  it  is  not 
copyrightable  because  it  is  also  functional.    The  problem 
with  the  district  court’s  approach  is  that  computer  pro-
grams are by definition functional—they are all designed 
to accomplish some task.  Indeed, the statutory definition 
of  “computer  program”  acknowledges  that  they  function 
“to  bring  about  a  certain  result.”    See  17  U.S.C.  § 101 
(defining a “computer program” as “a set of statements or 
instructions to be used directly or indirectly in a computer 
in  order  to  bring  about  a  certain  result”).    If  we  were  to 
accept  the  district  court’s  suggestion  that  a  computer 
program  is  uncopyrightable  simply  because  it  “carr[ies] 
out  pre-assigned  functions,”  no  computer  program  is 
protectable.    That  result  contradicts  Congress’s  express 
intent  to  provide  copyright  protection  to  computer  pro-
grams,  as  well  as  binding  Ninth  Circuit  case  law  finding 
computer  programs  copyrightable,  despite  their  utilitari-
an or functional purpose.  Though the trial court did add 
the  caveat  that  it  “does  not  hold  that  the  structure,  se-
quence and organization of all computer programs may be 
stolen,”  Copyrightability  Decision,  872  F.  Supp.  2d  at 
1002, it is hard to see how its method of operation analy-
sis could lead to any other conclusion.   

While  it  does  not  appear  that  the  Ninth  Circuit  has 
addressed  the  precise  issue,  we  conclude  that  a  set  of 
commands  to  instruct  a  computer  to  carry  out  desired 

                                            

12   This  analogy  by  the  district  court  is  meaningful 
because  taxonomies,  in  varying  forms,  have  generally 
been deemed copyrightable.  See, e.g., Practice Mgmt. Info. 
Corp.  v.  Am.  Med.  Ass’n,  121  F.3d  516,  517-20  (9th  Cir. 
1997); Am. Dental, 126 F.3d at 978-81. 

ORACLE AMERICA, INC. v. GOOGLE INC. 

43 

operations  may  contain  expression  that  is  eligible  for 
copyright  protection.    See  Mitel,  124  F.3d  at  1372.    We 
agree  with  Oracle  that,  under  Ninth  Circuit  law,  an 
original  work—even  one  that  serves  a  function—is  enti-
tled  to  copyright  protection  as  long  as  the  author  had 
multiple  ways  to  express  the  underlying  idea.    Section 
102(b) does not, as Google seems to suggest, automatically 
deny  copyright  protection  to  elements  of  a  computer 
program  that  are  functional.    Instead,  as  noted,  Sec-
tion 102(b) codifies the idea/expression dichotomy and the 
legislative  history  confirms  that,  among  other  things, 
Section  102(b)  was  “intended  to  make  clear  that  the 
expression adopted by the programmer is the copyrighta-
ble element in a computer program.”  H.R. Rep. No. 1476, 
94th  Cong.,  2d  Sess.  54,  reprinted  in  1976  U.S.C.C.A.N. 
5659, 5670.  Therefore, even if an element directs a com-
puter  to  perform  operations,  the  court  must  nevertheless 
determine  whether  it  contains  any  separable  expression 
entitled to protection.   

On appeal, Oracle does not—and concedes that it can-
not—claim copyright in the idea of organizing functions of 
a  computer  program  or  in  the  “package-class-method” 
organizational  structure  in  the  abstract.    Instead,  Oracle 
claims  copyright  protection  only  in  its  particular  way  of 
naming  and  organizing  each  of  the  37  Java  API  packag-
es.13    Oracle  recognizes,  for  example,  that  it  “cannot 
copyright  the  idea  of  programs  that  open  an  internet 

                                            

13   At  oral  argument,  counsel  for  Oracle  explained 
that  it  “would  never  claim  that  anyone  who  uses  a  pack-
age-class-method  manner  of  classifying  violates  our 
copyright.  We don’t own every conceivable way of organ-
izing,  we  own  only  our  specific  expression—our  specific 
way  of  naming  each  of  these  362  methods,  putting  them 
into  36  classes,  and  20  subclasses.”    Oral  Argument  at 
16:44.   

44 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

connection,”  but  “it  can  copyright  the  precise  strings  of 
code  used  to  do  so,  at  least  so  long  as  ‘other  language  is 
available’ to achieve the same function.”  Appellant Reply 
Br.  13-14  (citation  omitted).    Thus,  Oracle  concedes  that 
Google and others could employ the Java language—much 
like anyone could employ the English language to write a 
paragraph  without  violating  the  copyrights  of  other 
English  language writers.    And,  that  Google  may  employ 
the  “package-class-method”  structure  much  like  authors 
can  employ  the  same  rules  of  grammar  chosen  by  other 
authors  without  fear  of  infringement.    What  Oracle  con-
tends is that, beyond that point, Google, like any author, 
is not permitted to employ the precise phrasing or precise 
structure  chosen  by  Oracle  to  flesh  out  the  substance  of 
its packages—the details and arrangement of the prose.   

As the district court acknowledged, Google could have 
structured  Android  differently  and  could  have  chosen 
different ways to express and implement the functionality 
that  it  copied.14    Specifically,  the  court  found  that  “the 

                                            

14   Amici McNealy and Sutphin explain that “a quick 
examination  of  other  programming  environments  shows 
that  creators  of  other  development  platforms  provide  the 
same  functions  with  wholly  different  creative  choices.”  
Br. of McNealy and Sutphin 17.  For example, in Java, a 
developer  setting  the  time  zone  would  call  the  “setTime-
Zone”  method  within  the  “DateFormat”  class  of  the  ja-
va.text  package.    Id.    Apple’s  iOS  platform,  on  the  other 
hand,  “devotes  an  entire  class  to  set  the  time  zone  in  an 
application—the  ‘NSTimeZone’  class”  which  is  in  the 
“Foundation  framework.”    Id.  at  17-18  (noting  that  a 
“framework is Apple’s terminology for a structure concep-
tually  similar  to  Java’s  ‘package’”).    Microsoft  provides 
similar functionality with “an entirely different structure, 
naming scheme, and selection.”  Id. at 18 (“In its Windows 
Phone  development  platform,  Microsoft  stores  its  time 

ORACLE AMERICA, INC. v. GOOGLE INC. 

45 

very  same  functionality  could  have  been  offered  in  An-
droid  without  duplicating  the  exact  command  structure 
used in Java.”  Copyrightability Decision, 872 F. Supp. 2d 
at  976.    The  court  further  explained  that  Google  could 
have  offered  the  same  functions  in  Android  by  “re-
arranging the various methods under different groupings 
among  the  various  classes  and  packages.”    Id.    The  evi-
dence showed, moreover, that Google designed many of its 
own  API  packages  from  scratch,  and,  thus,  could  have 
designed  its  own  corresponding  37  API  packages  if  it 
wanted to do so.   

Given the court’s findings that the SSO is original and 
creative,  and  that  the  declaring  code  could  have  been 
written  and  organized  in  any  number  of  ways  and  still 
have  achieved  the  same  functions,  we  conclude  that 
Section 102(b)  does  not  bar  the  packages  from  copyright 
protection just because they also perform functions.   

3.  Google’s Interoperability Arguments  
are Irrelevant to Copyrightability 

Oracle  also argues  that  the  district  court  erred  in  in-

voking  interoperability  in  its  copyrightability  analysis.  
Specifically,  Oracle  argues  that  Google’s  interoperability 
arguments  are  only  relevant,  if  at  all,  to  fair  use—not  to 
the question of whether the API packages are copyrighta-
ble.  We agree.  

In  characterizing  the  SSO  of  the  Java  API  packages 
as  a  “method  of  operation,”  the  district  court  explained 
that “[d]uplication of the command structure is necessary 
for  interoperability.”    Copyrightability  Decision,  872  F. 
Supp.  2d  at  977.    The  court  found  that,  “[i]n  order  for  at 

                                                                                                  

zone programs in the ‘TimeZoneInfo’ class in its ‘Systems’ 
namespace  (Microsoft’s  version  of  a  ‘package’  or  ‘frame-
work’).”).    Again,  this  is  consistent  with  the  evidence 
presented at trial.  

46 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

least  some  of  [the  pre-Android  Java]  code  to  run  on  An-
droid,  Google  was  required  to  provide  the  same  ja-
va.package.Class.method()  command  system  using  the 
same names with the same ‘taxonomy’ and with the same 
functional specifications.”  Id. at 1000 (emphasis omitted).  
And,  the  court  concluded  that  “Google  replicated  what 
was necessary to achieve a degree of interoperability—but 
no  more,  taking  care,  as  said  before,  to  provide  its  own 
implementations.”    Id.    In  reaching  this  conclusion,  the 
court  relied  primarily  on  two  Ninth  Circuit  decisions: 
Sega Enterprises v. Accolade, Inc., 977 F.2d 1510 (9th Cir. 
1992),  and  Sony  Computer  Entertainment,  Inc.  v.  Con-
nectix, Corp., 203 F.3d 596 (9th Cir. 2000).   

Both Sega and Sony are fair use cases in which copy-
rightability was addressed only tangentially.  In Sega, for 
example,  Sega  manufactured  a  video  game  console  and 
game  cartridges  that  contained  hidden  functional  pro-
gram  elements  necessary  to  achieve  compatibility  with 
the  console.    Defendant  Accolade:  (1) reverse-engineered 
Sega’s video game programs to discover the requirements 
for  compatibility;  and  (2) created  its  own  games  for  the 
Sega  console.    Sega, 977 F.2d  at 1514-15.   As  part  of  the 
reverse-engineering  process,  Accolade  made  intermediate 
copies  of  object  code  from  Sega’s  console.    Id.    Although 
the  court  recognized  that  the  intermediate  copying  of 
computer code may infringe Sega’s copyright, it concluded 
that  “disassembly  of  copyrighted  object  code  is,  as  a 
matter  of  law,  a  fair  use  of  the  copyrighted  work  if  such 
disassembly  provides  the  only  means  of  access  to  those 
elements  of  the  code  that  are  not  protected  by  copyright 
and  the  copier  has  a  legitimate  reason  for  seeking  such 
access.”  Id. at 1518.  The court agreed with Accolade that 
its  copying  was  necessary  to  examine  the  unprotected 
functional  aspects  of  the  program.    Id.  at  1520.    And, 
because  Accolade  had  a  legitimate  interest  in  making  its 
cartridges compatible with Sega’s console, the court found 
that Accolade’s intermediate copying was fair use.  

ORACLE AMERICA, INC. v. GOOGLE INC. 

47 

Likewise,  in  Sony,  the  Ninth  Circuit  found  that  the 
defendant’s reverse engineering and intermediate copying 
of Sony’s copyrighted software program “was a fair use for 
the purpose of gaining access to the unprotected elements 
of  Sony’s  software.”    Sony,  203  F.3d  at  602.    The  court 
explained that Sony’s software program contained unpro-
tected  functional  elements  and  that  the  defendant  could 
only  access  those  elements  through  reverse  engineering.  
Id. at 603.  The defendant used that information to create 
a  software  program  that  let  consumers  play  games  de-
signed for Sony’s PlayStation console on their computers.  
Notably,  the  defendant’s  software  program  did  not  con-
tain any of Sony’s copyrighted material.  Id. at 598.   

The  district  court  characterized  Sony  and  Sega  as 
“close  analogies”  to  this  case.    Copyrightability  Decision, 
872  F.  Supp.  2d  at  1000.    According  to  the  court,  both 
decisions “held that interface procedures that were neces-
sary to duplicate in order to achieve interoperability were 
functional  aspects  not  copyrightable  under  Section 
102(b).”    Id.    The  district  court’s  reliance  on  Sega  and 
Sony  in  the  copyrightability  context  is  misplaced,  howev-
er.   

As noted, both cases were focused on fair use, not cop-
yrightability.  In Sega, for example, the only question was 
whether  Accolade’s  intermediate  copying  was  fair  use.  
The court never addressed the question of whether Sega’s 
software  code,  which  had  functional  elements,  also  con-
tained  separable  creative  expression  entitled  to  protec-
tion.    Likewise,  although  the  court  in  Sony  determined 
that Sony’s computer program had functional elements, it 
never addressed whether it also had expressive elements.  
Sega and Sony are also factually distinguishable because 
the defendants in those cases made intermediate copies to 
understand  the  functional  aspects  of  the  copyrighted 
works and then created new products.  See Sony, 203 F.3d 
at  606-07;  Sega,  977  F.2d  at  1522-23.    This  is  not  a  case 
where  Google  reverse-engineered  Oracle’s  Java  packages 

48 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

to  gain  access  to  unprotected  functional  elements  con-
tained  therein.    As  the  former  Register  of  Copyrights  of 
the  United  States  pointed  out  in  his  brief  amicus  curiae, 
“[h]ad  Google  reverse  engineered  the  programming  pack-
ages to figure out the ideas and functionality of the origi-
nal, and then created its own structure and its own literal 
code,  Oracle  would  have  no  remedy  under  copyright 
whatsoever.”    Br.  for  Amicus  Curiae  Ralph  Oman  29.  
Instead, Google chose to copy both the declaring code and 
the overall SSO of the 37 Java API packages at issue.   

We  disagree  with  Google’s  suggestion  that  Sony  and 
Sega created an “interoperability exception” to copyright-
ability.  See Appellee Br. 39 (citing Sony and Sega for the 
proposition  that  “compatibility  elements  are  not  copy-
rightable  under  section  102(b)”  (emphasis  omitted)).  
Although  both  cases  recognized  that  the  software  pro-
grams  at  issue  there  contained  unprotected  functional 
elements, a determination that some elements are unpro-
tected is not the same as saying that the entire work loses 
copyright  protection.    To  accept  Google’s  reading  would 
contradict  Ninth  Circuit  case  law  recognizing  that  both 
the  literal  and  non-literal  components  of  a  software 
program  are  eligible  for  copyright  protection.    See  John-
son  Controls,  886  F.2d  at  1175.    And  it  would  ignore  the 
fact  that  the  Ninth  Circuit  endorsed  the  abstraction-
filtration-comparison inquiry in Sega itself. 

As  previously  discussed,  a  court  must  examine  the 
software  program  to  determine  whether  it  contains  crea-
tive expression that can be separated from the underlying 
function.  See Sega, 977 F.2d at 1524-25.  In doing so, the 
court  filters  out  the  elements  of  the  program  that  are 
“ideas” as well as elements that are “dictated by consider-
ations  of  efficiency,  so  as  to  be  necessarily  incidental  to 
that  idea;  required  by  factors  external  to  the  program 
itself.”  Altai, 982 F.2d at 707.   

ORACLE AMERICA, INC. v. GOOGLE INC. 

49 

To determine “whether certain aspects of an allegedly 
infringed software are not protected by copyright law, the 
focus  is  on  external  factors  that  influenced  the  choice  of 
the  creator  of  the  infringed  product.”    Dun  &  Bradstreet 
Software  Servs.,  Inc.  v.  Grace  Consulting,  Inc.,  307  F.3d 
197,  215  (3d  Cir.  2002)  (citing  Altai,  982  F.2d  at  714; 
Mitel, 124 F.3d at 1375).  The Second Circuit, for example, 
has  noted  that  programmers  are  often  constrained  in 
their  design  choices  by  “extrinsic  considerations”  includ-
ing  “the  mechanical  specifications  of  the  computer  on 
which a particular program is intended to run” and “com-
patibility  requirements  of  other  programs  with  which  a 
program is designed to operate in conjunction.”  Altai, 982 
F.2d  at  709-10  (citing  3  Melville  B.  Nimmer  &  David 
Nimmer,  Nimmer  on  Copyright  § 13.01  at  13-66-71 
(1991)).    The  Ninth  Circuit  has  likewise  recognized  that: 
(1) computer  programs  “contain  many  logical,  structural, 
and  visual  display  elements  that  are  dictated  by  .  .  . 
external  factors  such  as  compatibility  requirements  and 
industry  demands”;  and  (2) “[i]n  some  circumstances, 
even the exact set of commands used by the programmer 
is deemed functional rather than creative for purposes of 
copyright.”    Sega,  977  F.2d  at  1524  (internal  citation 
omitted).  

Because  copyrightability  is  focused  on  the  choices 
available  to  the  plaintiff  at  the  time  the  computer  pro-
gram was created, the relevant compatibility inquiry asks 
whether the plaintiff’s choices were dictated by a need to 
ensure that its program worked with existing third-party 
programs.    Dun  &  Bradstreet,  307  F.3d  at  215;  see  also 
Atari,  975  F.2d  at  840  (“External  factors  did  not  dictate 
the  design  of  the  10NES  program.”).    Whether  a  defend-
ant  later  seeks  to  make  its  program  interoperable  with 
the  plaintiff’s  program  has  no  bearing  on  whether  the 
software  the  plaintiff  created  had  any  design  limitations 
dictated  by  external  factors.    See  Dun  &  Bradstreet,  307 
F.3d  at  215  (finding an  expert’s  testimony  on  interopera-

50 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

bility “wholly misplaced” because he “looked at externali-
ties  from  the  eyes  of  the  plagiarist,  not  the  eyes  of  the 
program’s creator”).  Stated differently, the focus is on the 
compatibility needs and programming choices of the party 
claiming  copyright  protection—not  the  choices  the  de-
fendant made to achieve compatibility with the plaintiff’s 
program.    Consistent  with  this  approach,  courts  have 
recognized that, once the plaintiff creates a copyrightable 
work,  a  defendant’s  desire  “to  achieve  total  compatibil-
ity . . .  is  a  commercial  and  competitive  objective  which 
does  not  enter  into  the  .  .  .  issue  of  whether  particular 
ideas  and  expressions  have  merged.”    Apple  Computer, 
714 F.2d at 1253. 

Given  this  precedent,  we  conclude  that  the  district 
court  erred  in  focusing  its  interoperability  analysis  on 
Google’s desires for its Android software.  See Copyrighta-
bility Decision, 872 F. Supp. 2d at 1000 (“Google replicat-
to  achieve  a  degree  of 
ed  what  was  necessary 
interoperability”  with  Java.).    Whether  Google’s  software 
is  “interoperable”  in  some  sense  with  any  aspect  of  the 
Java platform (although as Google concedes, certainly not 
with the JVM) has no bearing on the threshold question of 
whether  Oracle’s  software  is  copyrightable.    It  is  the 
interoperability  and  other  needs  of  Oracle—not  those  of 
Google—that  apply  in  the  copyrightability  context,  and 
there  is  no  evidence  that  when  Oracle  created  the  Java 
API  packages  at  issue  it  did  so  to  meet  compatibility 
requirements of other pre-existing programs.   

Google  maintains  on  appeal  that  its  use  of  the  “Java 
class  and  method  names  and  declarations  was  ‘the  only 
and  essential  means’  of  achieving  a  degree  of  interopera-
bility  with  existing  programs  written  in  the  [Java  lan-
guage].”    Appellee  Br.  49.    Indeed,  given  the  record 
evidence  that  Google  designed  Android  so  that  it  would 
not  be  compatible  with  the  Java  platform,  or  the  JVM 
specifically,  we  find  Google’s  interoperability  argument 
confusing.    While  Google  repeatedly  cites  to  the  district 

ORACLE AMERICA, INC. v. GOOGLE INC. 

51 

court’s  finding  that  Google  had  to  copy  the  packages  so 
that an app written in Java could run on Android, it cites 
to no evidence in the record that any such app exists and 
points to no Java apps that either pre-dated or post-dated 
Android  that  could  run  on  the  Android  platform.15    The 
compatibility  Google  sought  to  foster  was  not  with  Ora-
cle’s  Java  platform  or  with  the  JVM  central  to  that  plat-
form.    Instead,  Google  wanted  to  capitalize  on  the  fact 
that software developers were already trained and experi-
enced  in  using  the  Java  API  packages  at  issue.    The 
district  court  agreed,  finding  that,  as  to  the  37  Java  API 
packages, “Google believed Java application programmers 
would  want  to  find  the  same  37  sets  of  functionalities  in 
the  new  Android  system  callable  by  the  same  names  as 
used in Java.”  Copyrightability Decision, 872 F. Supp. 2d 
at  978.   Google’s  interest  was  in  accelerating  its  develop-
ment process by “leverag[ing] Java for its existing base of 
developers.”    J.A.  2033,  2092.    Although  this  competitive 
objective  might  be  relevant  to  the  fair  use  inquiry,  we 
conclude  that  it  is  irrelevant  to  the  copyrightability  of 
Oracle’s declaring code and organization of the API pack-
ages.   

Finally, to the extent Google suggests that it was enti-
tled  to  copy  the  Java  API  packages  because  they  had 

                                            

15   During  oral  argument,  Google’s  counsel  stated 
that “a program written in the Java language can run on 
Android  if  it’s  only  using  packages  within  the  37.    So  if 
I’m a developer and I have written a program, I’ve written 
it in Java, I can stick an Android header on it and it will 
run in Android because it is using the identical names of 
the  classes,  methods,  and  packages.”    Oral  Argument  at 
31:31.    Counsel  did  not  identify  any  programs  that  use 
only  the  37  API  packages  at  issue,  however,  and  did  not 
attest  that  any  such  program  would  be  useful.    Nor  did 
Google cite to any record evidence to support this claim.  

52 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

become  the  effective  industry  standard,  we  are  unper-
suaded.    Google  cites  no  authority  for  its  suggestion  that 
copyrighted  works  lose  protection  when  they  become 
popular,  and  we  have  found  none.16    In  fact,  the  Ninth 
Circuit  has  rejected  the  argument  that  a  work  that  later 
becomes  the  industry  standard  is  uncopyrightable.    See 
Practice  Mgmt.  Info.  Corp.  v.  Am.  Med.  Ass’n,  121  F.3d 
516, 520 n.8 (9th Cir. 1997) (noting that the district court 
found  plaintiff’s  medical  coding  system  entitled  to  copy-
right  protection,  and  that,  although  the  system  had 
become the industry standard, plaintiff’s copyright did not 
prevent  competitors  “from  developing  comparative  or 
better  coding  systems  and  lobbying  the  federal  govern-
ment  and  private  actors  to  adopt  them.    It  simply  pre-
vents  wholesale  copying  of  an  existing  system.”).    Google 
was  free  to  develop  its  own  API  packages  and  to  “lobby” 
programmers  to  adopt  them.    Instead,  it  chose  to  copy 

                                            

16   Google  argues  that,  in  the  same  way  a  formerly 
distinctive  trademark  can  become  generic  over  time,  a 
program  element  can  lose  copyright  protection  when  it 
becomes  an  industry  standard.    But  “it  is  to  be  expected 
that  phrases  and  other  fragments  of  expression  in  a 
highly successful copyrighted work will become part of the 
language.  That does not mean they lose all protection in 
the  manner  of  a  trade  name  that  has  become  generic.”  
Warner  Bros.,  Inc.  v.  Am.  Broadcasting  Cos.,  720  F.2d 
231,  242  (2d  Cir.  1983)  (“No  matter  how  well  known  a 
copyrighted  phrase  becomes,  its  author  is  entitled  to 
guard  against  its  appropriation  to  promote  the  sale  of 
commercial  products.”).    Notably,  even  when  a  patented 
method  or  system  becomes  an  acknowledged  industry 
standard  with  acquiescence  of  the  patent  owner,  any 
permissible use generally requires payment of a reasona-
ble royalty, which Google refused to do here.  See general-
ly In re Innovatio IP Ventures, LLC, No. 11-C-9308, 2013 
U.S. Dist. LEXIS 144061 (N.D. Ill. Sept. 27, 2013).  

ORACLE AMERICA, INC. v. GOOGLE INC. 

53 

Oracle’s  declaring  code  and  the  SSO  to  capitalize  on  the 
preexisting  community  of  programmers  who  were  accus-
tomed  to  using  the  Java  API  packages.    That  desire  has 
nothing to do with copyrightability.  For these reasons, we 
find  that  Google’s  industry  standard  argument  has  no 
bearing on the copyrightability of Oracle’s work.  

B.  Fair Use  

As  noted,  the  jury  hung  on  Google’s  fair  use  defense, 
and  the  district  court  declined  to  order  a  new  trial  given 
its  conclusion  that  the  code  and  structure  Google  copied 
were  not  entitled  to  copyright  protection.    On  appeal, 
Oracle  argues  that:  (1) a  remand  to  decide  fair  use  “is 
pointless”;  and  (2) this  court  should  find,  as  a  matter  of 
law,  that  “Google’s  commercial  use  of  Oracle’s  work  in  a 
market where Oracle already competed was not fair use.”  
Appellant Br. 68. 

Fair  use  is  an  affirmative  defense  to  copyright  in-
fringement and is codified in Section 107 of the Copyright 
Act.    Golan,  132  S.  Ct.  at  890  (“[T]he  fair  use  defense,  is 
codified at 17 U.S.C. § 107.”).  Section 107 permits use of 
copyrighted  work  if  it  is  “for  purposes  such  as  criticism, 
comment,  news  reporting,  teaching  (including  multiple 
copies  for  classroom  use),  scholarship,  or  research.”    17 
U.S.C.  § 107.    The  fair  use  doctrine  has  been  referred  to 
as “‘the most troublesome in the whole law of copyright.’”  
Monge v. Maya Magazines, Inc., 688 F.3d 1164, 1170 (9th 
Cir.  2012)  (quoting  Dellar  v.  Samuel  Goldwyn,  Inc.,  104 
F.2d  661,  662  (2d  Cir.  1939)  (per  curiam)).    It  both  per-
mits and requires “courts to avoid rigid application of the 
copyright  statute  when,  on  occasion,  it  would  stifle  the 
very  creativity  which  that  law  is  designed  to  foster.” 
Campbell  v.  Acuff-Rose  Music,  Inc.,  510  U.S.  569,  577 
(1994)  (quoting  Stewart  v.  Abend,  495  U.S.  207,  236 
(1990)).   

“Section  107  requires  a  case-by-case  determination 
whether a particular use is fair, and the statute notes four 

54 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

nonexclusive  factors  to  be  considered.”    Harper  &  Row 
Publishers,  Inc.  v.  Nation  Enters.,  471  U.S.  539,  549 
(1985).    Those  factors  are:  (1) “the  purpose  and  character 
of the use, including whether such use is of a commercial 
nature  or  is  for  nonprofit  educational  purposes;”  (2) “the 
nature  of  the  copyrighted  work;”  (3) “the  amount  and 
substantiality  of  the portion  used  in  relation  to  the  copy-
righted  work  as  a  whole;”  and  (4) “the  effect  of  the  use 
upon the potential market for or value of the copyrighted 
work.”    17  U.S.C.  § 107.    The  Supreme  Court  has  ex-
plained  that  all  of  the  statutory  factors  “are  to  be  ex-
plored,  and  the  results  weighed  together,  in  light  of  the 
purpose[]  of  copyright,”  which  is  “[t]o  promote  the  Pro-
gress  of  Science  and useful  Arts.”    Campbell,  510  U.S. at 
578, 575 (internal citations omitted).   

“Fair use is a mixed question of law and fact.”  Harper 
&  Row,  471  U.S.  at  560.    Thus,  while  subsidiary  and 
controverted  findings  of  fact  must  be  reviewed  for  clear 
error  under  Rule  52  of  the  Federal  Rules  of  Civil  Proce-
dure,  the  Ninth  Circuit  reviews  the  ultimate  application 
of those facts de novo.  See Seltzer v. Green Day, Inc., 725 
F.3d 1170, 1175 (9th Cir. 2013) (citing SOFA Entm’t, Inc. 
v.  Dodger  Prods.,  Inc.,  709  F.3d  1273,  1277  (9th  Cir. 
2013)).    Where  there  are  no  material  facts  at  issue  and 
“the  parties  dispute  only  the  ultimate  conclusions  to  be 
drawn  from  those  facts,  we  may  draw  those  conclusions 
without  usurping  the  function  of  the  jury.”    Id.  (citing 
Fisher v. Dees, 794 F.2d 432, 436 (9th Cir. 1986)).  Indeed, 
the  Supreme  Court  has  specifically  recognized  that, 
“[w]here  the  district  court  has  found  facts  sufficient  to 
evaluate  each  of  the  statutory  factors,  an  appellate  court 
‘need  not  remand  for  further  factfinding  .  .  .  [but]  may 
conclude  as  a  matter  of  law  that  [the  challenged  use] 
[does]  not  qualify  as  a  fair  use  of  the  copyrighted  work.’”  
Harper & Row, 471 U.S. at 560 (citation omitted). 

Of course, the corollary to this point is true as well—
where there are material facts in dispute and those facts 

ORACLE AMERICA, INC. v. GOOGLE INC. 

55 

have  not  yet  been  resolved  by  the  trier  of  fact,  appellate 
courts may not make findings of fact in the first instance.  
See  Shawmut  Bank,  N.A.  v.  Kress  Assocs.,  33  F.3d  1477, 
1504 (9th Cir. 1994) (“[W]e must avoid finding facts in the 
first  instance.”);  see  also  Golden  Bridge  Tech.,  Inc.  v. 
Nokia, Inc., 527 F.3d 1318, 1323 (Fed. Cir. 2008) (“Appel-
late courts review district court judgments; we do not find 
facts.”).    Here,  it  is  undisputed  that  neither  the  jury  nor 
the  district  court  made  findings  of  fact  to  which  we  can 
refer in assessing the question of whether Google’s use of 
the  API  packages  at  issue  was  a  “fair  use”  within  the 
meaning  of  Section  107.    Oracle  urges  resolution  of  the 
fair  use  question  by  arguing  that  the  trial  court  should 
have decided the question as a matter of law based on the 
undisputed facts developed at trial, and that we can do so 
as  well.    Google,  on  the  other  hand,  argues  that  many 
critical facts regarding fair use are in dispute.  It asserts 
that the fact that the jury could not reach a resolution on 
the fair use defense indicates that at least some presuma-
bly reasonable jurors found its use to be fair.  And, Google 
asserts that, even if it is true that the district court erred 
in discussing concepts of “interoperability” when consider-
ing copyrightability, those concepts are still relevant to its 
fair use defense.  We turn first to a more detailed exami-
nation of fair use.   

The  first  factor  in  the  fair  use  inquiry  involves  “the 
purpose and character of the use, including whether such 
use  is  of  a  commercial  nature  or  is  for  nonprofit  educa-
tional purposes.”  17 U.S.C. § 107(1).  This factor involves 
two  sub-issues:  (1) “whether  and  to  what  extent  the  new 
work is transformative,” Campbell, 510 U.S. at 579 (cita-
tion  and 
internal  quotation  marks  omitted);  and 
(2) whether the use serves a commercial purpose.   

A  use  is  “transformative”  if  it  “adds  something  new, 
with a further purpose or different character, altering the 
first with new expression, meaning or message.” Id.   The 
critical  question  is  “whether  the  new  work  merely  super-

56 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

sede[s]  the  objects  of  the  original  creation  .  .  .  or  instead 
adds  something  new.”    Id.  (citations  and  internal  quota-
tion marks omitted).  This inquiry “may be guided by the 
examples  given  in  the  preamble  to  § 107,  looking  to 
whether  the  use  is  for  criticism,  or  comment,  or  news 
reporting,  and  the  like.”    Id.  at  578-79.    “The  Supreme 
Court has recognized that parodic works, like other works 
that  comment  and  criticize,  are  by  their  nature  often 
sufficiently transformative to fit clearly under the fair use 
exception.”    Mattel  Inc.  v.  Walking  Mountain  Prods.,  353 
F.3d 792, 800 (9th Cir. 2003) (citing Campbell, 510 U.S. at 
579). 

Courts have described new works as “transformative” 
when  “the  works  use  copy-righted  material  for  purposes 
distinct from the purpose of the original material.”  Elvis 
Presley  Enters.,  Inc.  v.  Passport  Video,  349  F.3d  622, 629 
(9th  Cir.  2003)  (“Here,  Passport’s  use  of  many  of  the 
television clips is transformative because they are cited as 
historical  reference  points  in  the  life  of  a  remarkable 
entertainer.”),  overruled  on  other  grounds  by  Flexible 
Lifeline Sys., Inc. v. Precision Lift, Inc., 654 F.3d 989, 995 
(9th Cir. 2011) (per curiam); see also Bouchat v. Baltimore 
Ravens  Ltd.  P’ship,  619  F.3d  301,  309-10  (4th  Cir.  2010) 
(quoting A.V. ex rel. Vanderhyge v. iParadigms, LLC, 562 
F.3d  630,  638  (4th  Cir.  2009)  (“[A]  transformative  use  is 
one that ‘employ[s] the quoted matter in a different man-
ner or for a different purpose from the original.’”)).  “A use 
is  considered  transformative  only  where  a  defendant 
changes  a  plaintiff’s  copyrighted  work  or  uses  the  plain-
tiff’s copyrighted work in a different context such that the 
plaintiff’s  work  is  transformed  into  a  new  creation.”  
Perfect 10, Inc. v. Amazon.com, Inc., 508 F.3d 1146, 1165 
(9th  Cir.  2007)  (quoting  Wall  Data  Inc.  v.  L.A.  County 
Sheriff’s  Dep’t,  447  F.3d  769,  778  (9th  Cir.  2006),  and 
finding  that  Google’s  use  of  thumbnail  images  in  its 
search engine was “highly transformative”).   

ORACLE AMERICA, INC. v. GOOGLE INC. 

57 

A  work  is  not  transformative  where  the  user  “makes 
no  alteration  to  the  expressive  content  or  message  of  the 
original  work.”    Seltzer,  725  F.3d  at  1177;  see  also  Wall 
Data, 447 F.3d at 778 (“The Sheriff’s Department created 
exact  copies  of  RUMBA’s  software.    It  then  put  those 
copies  to  the  identical  purpose  as  the  original  software.  
Such a use cannot be considered transformative.”); Monge, 
688 F.3d at 1176 (finding that a magazine’s publication of 
photographs of a secret celebrity wedding “sprinkled with 
written commentary” was “at best minimally transforma-
tive”  where  the  magazine  “did  not  transform  the  photos 
into a new work . . . or incorporate the photos as part of a 
broader  work”);  Elvis  Presley  Enters.,  349  F.3d  at  629 
(finding  that  use  of  copyrighted  clips  of  Elvis’s  television 
appearances  was  not  transformative  where  “some  of  the 
clips [we]re played without much interruption, if any . . . 
[and]  instead  serve[d]  the  same  intrinsic  entertainment 
value that is protected by Plaintiffs’ copyrights.”).  Where 
the use “is for the same intrinsic purpose as [the copyright 
holder’s]  .  .  .  such  use  seriously  weakens  a  claimed  fair 
use.”  Worldwide Church of God v. Phila. Church of God, 
Inc.,  227  F.3d  1110,  1117  (9th  Cir.  2000)  (quoting  Weiss-
mann v. Freeman, 868 F.2d 1313, 1324 (2d Cir. 1989)).  

Analysis  of  the  first  factor  also  requires  inquiry  into 
the commercial nature of the use.  Use of the copyrighted 
work that is commercial “tends to weigh against a finding 
of fair use.”  Harper & Row, 471 U.S. at 562 (“The crux of 
the  profit/nonprofit  distinction  is  not  whether  the  sole 
motive  of  the  use  is  monetary  gain  but  whether  the  user 
stands  to  profit  from  exploitation  of  the  copyrighted 
material  without  paying  the  customary  price.”).    “[T]he 
more  transformative  the  new  work,  the  less  will  be  the 
significance of other factors, like commercialism, that may 
weigh  against  a  finding  of  fair  use.”    Campbell,  510  U.S. 
at 579.   

The  second  factor—the  nature  of  the  copyrighted 
work—“calls for recognition that some works are closer to 

58 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

the core of intended copyright protection than others, with 
the consequence that fair use is more difficult to establish 
when  the  former  works  are  copied.”    Id.  at  586.    This 
factor  “turns  on  whether  the  work  is  informational  or 
creative.”    Worldwide  Church  of  God,  227  F.3d  at  1118; 
see also Harper & Row, 471 U.S. at 563 (“The law general-
ly recognizes a greater need to disseminate factual works 
than  works  of  fiction  or  fantasy.”).    Creative  expression 
“falls within the core of the copyright’s protective purpos-
es.”    Campbell,  510  U.S.  at  586.    Because  computer  pro-
grams  have  both  functional  and  expressive  components, 
however, where the functional components are themselves 
unprotected (because, e.g., they are dictated by considera-
tions  of  efficiency  or  other  external  factors),  those  ele-
ments  should  be  afforded  “a  lower  degree  of  protection 
than  more  traditional  literary works.”    Sega,  977 F.2d  at 
1526.    Thus,  where  the  nature  of  the  work  is  such  that 
purely  functional  elements  exist  in  the  work  and  it  is 
necessary  to  copy  the  expressive  elements  in  order  to 
perform  those  functions,  consideration  of  this  second 
factor arguably supports a finding that the use is fair.   

The  third  factor  asks  the  court  to  examine  “the 
amount and substantiality of the portion used in relation 
to  the  copyrighted  work  as  a  whole.”    17  U.S.C.  § 107(3).  
Analysis  of  this  factor  is  viewed  in  the  context  of  the 
copyrighted  work,  not  the  infringing  work.    Indeed,  the 
statutory language makes clear that “a taking may not be 
excused merely because it is insubstantial with respect to 
the  infringing  work.”    Harper  &  Row,  471  U.S.  at  565.  
“As  Judge  Learned  Hand  cogently  remarked,  ‘no  plagia-
rist  can  excuse  the  wrong  by  showing  how  much  of  his 
work  he  did  not  pirate.’”  Id.  (quoting  Sheldon  v.  Metro-
Goldwyn Pictures Corp., 81 F.2d 49, 56 (2d Cir. 1936)).  In 
contrast,  “the  fact  that  a  substantial  portion  of  the  in-
fringing  work  was  copied  verbatim  is  evidence  of  the 
qualitative value of the copied material, both to the origi-
nator and to the plagiarist who seeks to profit from mar-

ORACLE AMERICA, INC. v. GOOGLE INC. 

59 

keting  someone  else’s  copyrighted  expression.”    Id.    The 
Ninth  Circuit  has  recognized  that,  while  “wholesale 
copying  does  not  preclude  fair  use  per  se,  copying  an 
entire  work  militates  against  a  finding  of  fair  use.”  
Worldwide  Church  of  God,  227  F.3d  at  1118  (internal 
citation  and  quotation  omitted).    “If  the  secondary  user 
only copies as much as is necessary for his or her intended 
use,  then  this  factor  will  not  weigh  against  him  or  her.”  
Kelly v. Arriba Soft Corp., 336 F.3d 811, 820-21 (9th Cir. 
2003).    Under  this  factor,  “attention  turns  to  the  persua-
siveness  of  a  parodist’s  justification  for  the  particular 
copying  done,  and  the  enquiry  will  harken  back  to  the 
first  of  the  statutory  factors  .  .  .  [because]  the  extent  of 
permissible copying varies with the purpose and character 
of the use.”  Campbell, 510 U.S. at 586-87.   

The fourth and final factor focuses on “the effect of the 
use  upon  the  potential  market  for  or  value  of  the  copy-
righted  work.”    Harper  &  Row,  471  U.S.  at  566.    This 
factor reflects the idea that fair use “is limited to copying 
by  others  which  does  not  materially  impair  the  marketa-
bility  of  the  work  which  is  copied.”    Id.  at  566-67.    The 
Supreme  Court  has  said  that  this  factor  is  “undoubtedly 
the single most important element of fair use.”  Id. at 566.   
It  requires  that  courts  “consider  not  only  the  extent  of 
market  harm  caused  by  the  particular  actions  of  the 
alleged  infringer,  but  also  whether  unrestricted  and 
widespread conduct of the sort engaged in by the defend-
ant . . . would result in a substantially adverse impact on 
the potential market for the original.”  Campbell, 510 U.S. 
at  590  (citation  and  quotation  marks  omitted).    “Market 
harm  is  a  matter  of  degree,  and  the  importance  of  this 
factor  will  vary,  not  only  with  the  amount  of  harm,  but 
also with the relative strength of the showing on the other 
factors.”  Id. at 590 n.21.   

Oracle asserts that all of these factors support its po-
sition that Google’s use was not “fair use”—Google know-
ingly and illicitly copied a creative work to further its own 

60 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

commercial  purposes,  did  so  verbatim,  and  did  so  to  the 
detriment  of  Oracle’s  market  position.    These  undisputa-
ble  facts,  according  to  Oracle,  should  end  the  fair  use 
inquiry.  Oracle’s position is not without force.  On many 
of these points, Google does not debate Oracle’s character-
ization of its conduct, nor could it on the record evidence.   

Google contends, however, that, although it admitted-
ly copied portions of the API packages and did so for what 
were purely commercial purposes, a reasonable juror still 
could  find  that:  (1) Google’s  use  was  transformative; 
(2) the  Java  API  packages  are  entitled  only  to  weak 
protection;  (3) Google’s  use  was  necessary  to  work  within 
a  language  that  had  become  an  industry  standard;  and 
(4) the market impact on Oracle was not substantial.   

its  use 

incorporated 

the  packages 

On  balance,  we  find  that  due  respect  for  the  limit  of 
our  appellate  function  requires  that  we  remand  the  fair 
use  question  for  a  new  trial.    First,  although  it  is  undis-
puted  that  Google’s  use  of  the  API  packages  is  commer-
cial,  the  parties  disagree  on  whether 
is 
“transformative.”    Google  argues  that  it  is,  because  it 
wrote its own implementing code, created its own virtual 
into  a 
machine,  and 
smartphone platform.  For its part, Oracle maintains that 
Google’s use is not transformative because: (1) “[t]he same 
code  in  Android  .  .  .  enables  programmers  to  invoke  the 
same  pre-programmed  functions  in  exactly  the  same 
way;”  and  (2) Google’s  use  of  the  declaring  code  and 
packages  does  not  serve  a  different  function  from  Java.  
Appellant  Reply  Br.  47.    While  Google  overstates  what 
activities  can  be  deemed  transformative  under  a  correct 
application  of  the  law,  we  cannot  say  that  there  are  no 
material  facts  in  dispute  on  the  question  of  whether 
Google’s  use  is  “transformative,”  even  under  a  correct 
reading of the law.  As such, we are unable to resolve this 
issue on appeal.  

ORACLE AMERICA, INC. v. GOOGLE INC. 

61 

Next,  while  we  have  concluded  that  it  was  error  for 
the trial court to focus unduly on the functional aspects of 
the  packages,  and  on  Google’s  competitive  desire  to 
achieve  commercial  “interoperability”  when  deciding 
whether  Oracle’s  API  packages  are  entitled  to  copyright 
protection,  we  expressly  noted  that  these  factors  may  be 
relevant to a fair use analysis.  While the trial court erred 
in  concluding  that  these  factors  were  sufficient  to  over-
come Oracle’s threshold claim of copyrightability, reason-
able  jurors  might  find  that  they  are  relevant  to  Google’s 
fair use defense under the second and third factors of the 
inquiry.    See  Sega,  977  F.2d  at  1524-25  (discussing  the 
Second Circuit’s approach to “break[ing] down a computer 
program 
its  component  subroutines  and  sub-
subroutines  and  then  identif[ying]  the  idea  or  core  func-
tional  element  of  each”  in  the  context  of  the  second  fair 
use  factor:  the  nature  of  the  copyrighted  work).    We  find 
this particularly true with respect to those core packages 
which  it  seems  may  be  necessary  for  anyone  to  copy  if 
they are to write programs in the Java language.  And, it 
may be that others of the packages were similarly essen-
tial components of any Java language-based program.  So 
far, that type of filtration analysis has not occurred.  

into 

Finally,  as  to  market  impact,  the  district  court  found 
that “Sun and Oracle never successfully developed its own 
smartphone platform using Java technology.”  Copyright-
ability  Decision,  872  F.  Supp.  2d  at  978.    But  Oracle 
argues that, when Google copied the API packages, Oracle 
was licensing in the mobile and smartphone markets, and 
that  Android’s  release  substantially  harmed  those  com-
mercial opportunities as well as the potential market for a 
Java  smartphone  device.    Because  there  are  material 
facts  in  dispute  on  this  factor  as  well,  remand  is  neces-
sary.   

Ultimately,  we  conclude  that  this  is  not  a  case  in 
which the record contains sufficient factual findings upon 
which  we  could  base  a  de  novo  assessment  of  Google’s 

62 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

affirmative  defense  of  fair  use.    Accordingly,  we  remand 
this question to the district court for further proceedings.  
On remand, the district court should revisit and revise its 
jury  instructions  on  fair  use  consistent  with  this  opinion 
so  as  to  provide  the  jury  with  a  clear  and  appropriate 
picture of the fair use defense.17 

II.  GOOGLE’S CROSS-APPEAL  

Google  cross-appeals  from  the  portion  of  the  district 
court’s  final  judgment  entered  in  favor  of  Oracle  on  its 
claim  for  copyright  infringement  as  to  the  nine  lines  of 

                                            

17  Google  argues  that,  if  we  allow  it  to  retry  its  fair 
use  defense  on  remand,  it  is  entitled  to  a  retrial  on  in-
fringement as well.  We disagree.  The question of wheth-
er  Google’s  copying  constituted 
infringement  of  a 
copyrighted  work  is  “distinct  and  separable”  from  the 
question  of  whether  Google  can  establish  a  fair  use  de-
fense to its copying.  See Gasoline Prods. Co. v. Champlin 
Refining  Co.,  283  U.S.  494,  500  (1931)  (“Where  the  prac-
tice  permits  a  partial  new  trial,  it  may  not  properly  be 
resorted  to  unless  it  clearly  appears  that  the  issue  to  be 
retried is so distinct and separable from the others that a 
trial  of  it  alone  may  be  had  without  injustice.”).    Indeed, 
we  have  emphasized  more  than  once  in  this  opinion  the 
extent  to  which  the  questions  are  separable,  and  the 
confusion  and  error  caused  when  they  are  blurred.    The 
issues  are  not  “interwoven”  and it  would  not  create  “con-
fusion  and  uncertainty”  to  reinstate  the  infringement 
verdict  and  submit  fair  use  to  a  different  jury.    Id.    We 
note,  moreover,  that,  because  Google  only  mentions  this 
point in passing, with no development of  an argument in 
support of it, under our case law, it has not been properly 
raised.    See  SmithKline  Beecham  Corp.  v.  Apotex  Corp., 
439  F.3d  1312,  1320  (Fed.  Cir.  2006)  (when  a  party  pro-
vides  no  developed  argument  on  a  point,  we  treat  that 
argument as waived) (collecting cases).   

ORACLE AMERICA, INC. v. GOOGLE INC. 

63 

rangeCheck  code  and  the  eight  decompiled  files.    Final 
Judgment,  Oracle  Am.,  Inc.  v.  Google  Inc.,  No.  3:10-cv-
3561 (N.D. Cal. June 20, 2012), ECF No. 1211.  Specifical-
ly,  Google  appeals  from  the  district  court’s  decisions: 
(1) granting Oracle’s motion for JMOL of infringement as 
to the eight decompiled Java files that Google copied into 
Android;  and  (2) denying  Google’s  motion  for  JMOL  with 
respect to rangeCheck.   

When reviewing a district court’s grant or denial of a 
motion  for  JMOL,  we  apply  the  procedural  law  of  the 
relevant regional circuit, here the Ninth Circuit.  Trading 
Techs. Int’l, Inc. v. eSpeed, Inc., 595 F.3d 1340, 1357 (Fed. 
Cir.  2010).    The  Ninth  Circuit  reviews  a  district  court’s 
JMOL  decision  de  novo,  applying  the  same  standard  as 
the  district  court.    Mangum  v.  Action  Collection  Serv., 
Inc.,  575  F.3d  935,  938  (9th  Cir.  2009).    To  grant  judg-
ment  as  a  matter  of  law,  the  court  must  find  that  “the 
evidence  presented  at  trial  permits  only  one  reasonable 
conclusion” and that “no reasonable juror could find in the 
non-moving  party’s  favor.”    Id.  at  938-39  (citation  and 
internal quotation marks omitted).  

Oracle  explains  that  the  eight  decompiled  files  at  is-
sue  “contain  security  functions  governing  access  to  net-
work  files”  while  rangeCheck  “facilitates  an  important 
sorting function, frequently called upon during the opera-
tion  of  Java  and  Android.”    Oracle  Response  to  Cross-
Appeal 60-61.  At trial, Google conceded that it copied the 
eight decompiled Java code files and the nine lines of code 
referred to as rangeCheck into Android.  Its only defense 
was  that  the  copying  was  de  minimis.    Accordingly,  the 
district  court  instructed  the  jury  that,  “[w]ith  respect  to 
the  infringement  issues  concerning  the  rangeCheck  and 
other similar files, Google agrees that the accused lines of 
code  and  comments  came  from  the  copyrighted  materials 
but contends that the amounts involved were so negligible 
as to be de minimis and thus should be excluded.”  Final 
Charge  to  the  Jury  (Phase  One),  Oracle  Am.,  Inc.  v. 

64 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

Google,  Inc.,  No.  3:10-cv-3561  (N.D.  Cal.  Apr.  30,  2012), 
ECF No. 1018, at 14.   

Although  the  jury  found  that  Google  infringed  Ora-
cle’s  copyright  in  the  nine  lines  of  code  comprising 
rangeCheck,  it  returned  a  noninfringement  verdict  as  to 
eight  decompiled  security  files.    But  because  the  trial 
testimony  was  that  Google’s  use  of  the  decompiled  files 
was  significant—and  there  was  no  testimony  to  the  con-
trary—the  district  court  concluded  that  “[n]o  reasonable 
jury could find that this copying was de minimis.”  Order 
Granting  JMOL  on  Decompiled  Files,  2012  U.S.  Dist. 
LEXIS  66417, at  *6.   As  such,  the  court  granted  Oracle’s 
motion  for  JMOL  of  infringement  as  to  the  decompiled 
security files.  

On  appeal,  Google  maintains  that  its  copying  of 
rangeCheck  and  the  decompiled  security  files  was  de 
minimis  and  thus  did  not  infringe  any  of  Oracle’s  copy-
rights.    According  to  Google,  the  district  court  should 
have denied  Oracle’s  motion  for  JMOL  “because  substan-
tial evidence supported the jury’s verdict that Google’s use 
of  eight  decompiled  test  files  was  de  minimis.”    Cross-
Appellant  Br.  76.    Google  further  argues  that  the  court 
should  have  granted 
for  JMOL  as  to 
rangeCheck because  the “trial evidence revealed that the 
nine  lines  of  rangeCheck  code  were  both  quantitatively 
and  qualitatively  insignificant  in  relation  to  the  [Java] 
platform.”  Id. at 78.   

its  motion 

In response, Oracle argues that the Ninth Circuit does 
not  recognize  a  de  minimis  defense  to  copyright  infringe-
ment and that, even if it does, we should affirm the judg-
ments  of  infringement  on  grounds  that  Google’s  copying 
was  significant.    Because  we  agree  with  Oracle  on  its 
second point, we need not address the first, except to note 
that  there  is  some  conflicting Ninth  Circuit  precedent  on 
the  question  of  whether  there  is  a  free-standing  de  mini-
mis  defense  to  copyright  infringement  or  whether  the 

ORACLE AMERICA, INC. v. GOOGLE INC. 

65 

substantiality  of  the  alleged  copying is  best  addressed  as 
part of a fair use defense.  Compare Norse v. Henry Holt & 
Co.,  991  F.2d  563,  566  (9th  Cir.  1993)  (indicating  that 
“even  a  small  taking  may  sometimes  be  actionable”  and 
the  “question  of  whether  a  copying  is  substantial  enough 
to be actionable may be best resolved through the fair use 
doctrine”), with Newton v. Diamond, 388 F.3d 1189, 1192-
93  (9th  Cir.  2003)  (“For  an  unauthorized  use  of  a  copy-
righted work to be actionable, the use must be significant 
enough to constitute infringement.  This means that even 
where  the  fact  of  copying  is  conceded,  no  legal  conse-
quences  will  follow  from  that  fact  unless  the  copying  is 
substantial.”) (internal citation omitted)).18   

Even  assuming  that  the  Ninth  Circuit  recognizes  a 
stand-alone de minimis defense to copyright infringement, 
however,  we  conclude  that:  (1) the  jury  reasonably  found 
that  Google’s  copying  of  the  rangeCheck  files  was  more 
than  de  minimis;  and  (2) the  district  court  correctly 
concluded that the defense failed as a matter of law with 
respect to the decompiled security files.   

First, the unrebutted testimony at trial revealed that 
rangeCheck and the decompiled security files were signif-
icant to both Oracle and Google.  Oracle’s expert, Dr. John 
the 
Mitchell, 

that  Android  devices  call 

testified 

                                            

18   At least one recent district court decision has rec-

ognized  uncertainty  in  Ninth  Circuit  law  on  this  point.  
See Brocade Commc’ns Sys. v. A10 Networks, Inc., No. 10-
cv-3428,  2013  U.S.  Dist.  LEXIS  8113,  at  *33  (N.D.  Cal. 
Jan. 10, 2013) (“The Ninth Circuit has been unclear about 
whether the de minimis use doctrine serves as an affirma-
tive defense under the Copyright Act’s fair use exceptions 
or  whether  the  doctrine  merely  highlights  plaintiffs’ 
obligation  to  show  that  ‘the  use  must  be  significant 
enough  to  constitute  infringement.’”)  (citing  Newton,  388 
F.2d at 1193; Norse, 991 F.2d at 566).   

66 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

rangeCheck  function  2,600  times  just  in  powering  on  the 
device.  Although Google argues that the eight decompiled 
files  were  insignificant  because  they  were  used  only  to 
test  the  Android  platform,  Dr.  Mitchell  testified  that 
“using  the  copied  files  even  as  test  files would  have been 
significant  use”  and  the  district  court  specifically  found 
that  “[t]here  was  no  testimony  to  the  contrary.”    Order 
Granting  JMOL  on  Decompiled  Files,  2012  U.S.  Dist. 
LEXIS  66417,  at  *6.    Given  this  testimony,  a  reasonable 
jury could not have found Google’s copying de minimis.     

Google  emphasizes  that  the  nine  lines  of  rangeCheck 
code  “represented  an  infinitesimal  percentage  of  the  2.8 
million  lines  of  code  in  the  166  Java  packages—let  alone 
the millions of lines of code in the entire [Java] platform.”  
Google  Cross-Appeal  Br.  78-79.    To  the  extent  Google  is 
arguing  that  a  certain  minimum  number  of  lines  of  code 
must be copied before a court can find infringement, that 
argument is without merit.  See Baxter v. MCA, Inc., 812 
F.2d 421, 425 (9th Cir. 1987) (“[N]o bright line rule exists 
as  to  what  quantum  of  similarity  is  permitted.”).    And, 
given  the  trial  testimony  that  both  rangeCheck  and  the 
decompiled security files are qualitatively significant and 
Google copied them in their entirety, Google cannot show 
that  the  district  court  erred  in  denying  its  motion  for 
JMOL. 

We  have  considered  Google’s  remaining  arguments 
and find them unpersuasive.  Accordingly, we affirm both 
of the JMOL decisions at issue in Google’s cross-appeal. 

III. GOOGLE’S POLICY-BASED ARGUMENTS 

Many of Google’s arguments, and those of some amici, 
appear  premised  on  the  belief  that  copyright  is  not  the 
correct  legal  ground  upon  which  to  protect  intellectual 
property  rights  to  software  programs;  they  opine  that 
patent protection for such programs, with its insistence on 
non-obviousness,  and  shorter  terms  of  protection,  might 
be  more  applicable,  and  sufficient.    Indeed,  the  district 

ORACLE AMERICA, INC. v. GOOGLE INC. 

67 

court’s  method  of  operation  analysis  seemed  to  say  as 
much.    Copyrightability  Decision,  872  F.  Supp.  2d  at 984 
(stating that this case raises the question of “whether the 
copyright  holder  is  more  appropriately  asserting  an 
exclusive right to a functional system, process, or method 
of  operation  that  belongs  in  the  realm  of  patents,  not 
copyrights”).  Google argues that “[a]fter Sega, developers 
could  no  longer  hope  to  protect  [software]  interfaces  by 
copyright  .  .  .  Sega  signaled  that  the  only reliable  means 
for  protecting  the  functional  requirements  for  achieving 
interoperability was by patenting them.”  Appellee Br. 40 
(quoting  Pamela  Samuelson,  Are  Patents  on  Interfaces 
Impeding  Interoperability?  93  Minn.  L.  Rev.  1943,  1959 
(2009)).  And, Google relies heavily on articles written by 
Professor  Pamela  Samuelson,  who  has  argued  that  “it 
would  be  best  for  a  commission  of  computer  program 
experts to draft a new form of intellectual property law for 
machine-readable  programs.” 
  Pamela  Samuelson, 
CONTU Revisited: The Case Against Copyright Protection 
for Computer Programs in Machine-Readable Form, 1984 
Duke L.J. 663, 764 (1984).  Professor Samuelson has more 
recently  argued  that  “Altai  and  Sega  contributed  to  the 
eventual  shift  away  from  claims  of  copyright  in  program 
interfaces  and  toward  reliance  on  patent  protection.  
Patent protection also became more plausible and attrac-
tive  as  the  courts  became  more  receptive  to  software 
patents.”  Samuelson, 93 Minn. L. Rev. at 1959.   

Although Google, and the authority on which it relies, 
seem  to  suggest  that  software  is  or  should  be  entitled  to 
protection  only  under  patent  law—not  copyright  law—
several  commentators  have  recently  argued  the  exact 
opposite. 
Technology  Quarterly, Stalking 
Trolls, ECONOMIST,  Mar.  8,  2014,  http://www.economist. 
com/news/technology-quarterly/21598321-intellectual-
property-after-being-blamed-stymying-innovation-
america-vague  (“[M]any  innovators  have  argued  that  the 
electronics  and  software  industries  would  flourish  if 

See 

 

68 
 

  ORACLE AMERICA, INC. v. GOOGLE INC. 

companies  trying  to  bring  new  technology  (software 
innovations  included)  to  market  did  not  have  to  worry 
about  being  sued  for  infringing  thousands  of  absurd 
patents  at  every  turn.    A  perfectly  adequate  means  of 
protecting  and  rewarding  software  developers  for  their 
ingenuity  has  existed  for  over  300  years.    It  is  called 
copyright.”);  Timothy B. Lee, Will the Supreme Court save 
us from software patents?, WASH. POST, Feb. 26, 2014, 1:13 
PM,  http://www.washingtonpost.com/blogs/the-switch/wp/ 
2014/02/26/will-the-supreme-court-save-us-from-software-
patents/ (“If you write a book or a song, you can get copy-
right protection for it.  If you invent a new pill or a better 
mousetrap,  you  can  get  a  patent  on  it.    But  for  the  last 
two  decades,  software  has  had  the  distinction  of  being 
potentially  eligible  for  both  copyright  and  patent  protec-
tion.    Critics  say  that’s  a  mistake.    They  argue  that  the 
complex  and  expensive  patent  system  is  a  terrible  fit  for 
the  fast-moving  software  industry.    And  they  argue  that 
patent protection is unnecessary because software innova-
tors already have copyright protection available.”).  

Importantly for our purposes, the Supreme Court has 
made  clear  that  “[n]either  the  Copyright  Statute  nor  any 
other  says  that  because  a  thing  is  patentable  it  may  not 
be copyrighted.”  Mazer v. Stein, 347 U.S. 201, 217 (1954).  
Indeed, the thrust of the CONTU Report is that copyright 
is “the most suitable mode of legal protection for computer 
software.”    Peter  S.  Menell,  An  Analysis  of  the  Scope  of 
Copyright  Protection  for  Application  Programs,  41  Stan. 
L.  Rev.  1045,  1072  (1989);  see  also  CONTU  Report  at  1 
(recommending  that  copyright  law  be  amended  “to  make 
it explicit that computer programs, to the extent that they 
embody  an  author’s  original  creation,  are  proper  subject 
matter of copyright”).  Until either the Supreme Court or 
Congress  tells  us  otherwise,  we  are  bound  to  respect  the 
Ninth  Circuit’s  decision  to  afford  software  programs 
protection under the copyright laws.  We thus decline any 

ORACLE AMERICA, INC. v. GOOGLE INC. 

69 

invitation to declare that protection of software programs 
should be the domain of patent law, and only patent law. 

CONCLUSION 

For  the  foregoing  reasons,  we  conclude  that  the  de-
claring  code  and  the  structure,  sequence,  and  organiza-
tion  of  the  37  Java  API  packages  at  issue  are  entitled  to 
copyright  protection.    We  therefore  reverse  the  district 
court’s copyrightability determination with instructions to 
reinstate  the  jury’s  infringement  verdict.    Because  the 
jury hung on fair use, we remand Google’s fair use defense 
for further proceedings consistent with this decision.   

With  respect  to  Google’s  cross-appeal,  we  affirm  the 
district  court’s  decisions:  (1)  granting  Oracle’s  motion  for 
JMOL  as  to  the  eight  decompiled  Java  files  that  Google 
copied  into  Android;  and  (2)  denying  Google’s  motion  for 
JMOL  with  respect  to  the  rangeCheck  function.    Accord-
ingly,  we  affirm-in-part,  reverse-in-part,  and  remand  for 
further proceedings.  

AFFIRMED-IN-PART, REVERSED-IN-PART,  
AND REMANDED 


